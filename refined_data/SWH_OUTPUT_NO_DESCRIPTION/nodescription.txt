File: 100_Lisovsa_PythonCourse.txt
Full Name: Lisovsa/PythonCourse
Description: None
created_at: 2021-11-05T20:17:57Z
updated_at: 2021-11-05T21:23:41Z
pushed_at: 2021-12-02T08:15:09Z
Language: None
URL: https://github.com/Lisovsa/PythonCourse
Forks: 0
Stars: 0
Topics: 
README:
 # PythonCourse

 Репозиторий для курса по питону с девочками.


File: 103_Pallavikumari8_week1-python-CipherSchools.txt
Full Name: Pallavikumari8/week1-python-CipherSchools
Description: None
created_at: 2022-11-29T14:40:33Z
updated_at: 2022-11-29T19:10:25Z
pushed_at: 2022-12-02T10:22:55Z
Language: Python
URL: https://github.com/Pallavikumari8/week1-python-CipherSchools
Forks: 0
Stars: 0
Topics: 
README:



File: 109_rajeshbagaria_PythonDataScienceHandbook.txt
Full Name: rajeshbagaria/PythonDataScienceHandbook
Description: None
created_at: 2021-05-21T09:17:53Z
updated_at: 2021-05-21T09:17:53Z
pushed_at: 2021-05-21T09:17:54Z
Language: None
URL: https://github.com/rajeshbagaria/PythonDataScienceHandbook
Forks: 0
Stars: 0
Topics: 
README:



File: 10_ashu020497_Python.txt
Full Name: ashu020497/Python
Description: None
created_at: 2017-03-19T11:13:12Z
updated_at: 2017-03-19T11:13:12Z
pushed_at: 2017-03-19T11:13:13Z
Language: None
URL: https://github.com/ashu020497/Python
Forks: 0
Stars: 0
Topics: 
README:
# Python


File: 110_c3bosskung_python-sockect-and-game.txt
Full Name: c3bosskung/python-sockect-and-game
Description: None
created_at: 2022-02-15T15:47:27Z
updated_at: 2022-02-15T16:47:51Z
pushed_at: 2022-02-16T08:46:53Z
Language: Python
URL: https://github.com/c3bosskung/python-sockect-and-game
Forks: 0
Stars: 0
Topics: 
README:
# python-sockect-and-game


File: 112_amjdp_python_questionnaire.txt
Full Name: amjdp/python_questionnaire
Description: None
created_at: 2022-11-23T04:29:55Z
updated_at: 2022-11-23T04:29:55Z
pushed_at: 2022-11-23T04:29:55Z
Language: None
URL: https://github.com/amjdp/python_questionnaire
Forks: 0
Stars: 0
Topics: 
README:



File: 113_tombailey_Python-Scripts.txt
Full Name: tombailey/Python-Scripts
Description: None
created_at: 2014-07-31T22:48:32Z
updated_at: 2014-07-31T23:44:11Z
pushed_at: 2014-08-15T14:51:14Z
Language: Python
URL: https://github.com/tombailey/Python-Scripts
Forks: 0
Stars: 0
Topics: 
README:
Python-Scripts
==============
This a collection of small scripts I have made for Python. They might be of use for some people but they are mainly to showcase that I can use Python and my programming style.



File: 117_Kubyshina_PythonAlgorithms.txt
Full Name: Kubyshina/PythonAlgorithms
Description: None
created_at: 2022-06-03T17:49:35Z
updated_at: 2022-06-03T17:49:35Z
pushed_at: 2022-06-18T19:12:41Z
Language: None
URL: https://github.com/Kubyshina/PythonAlgorithms
Forks: 0
Stars: 0
Topics: 
README:
# PythonAlgorithms


File: 11_pratiksatham_PYTHON.txt
Full Name: pratiksatham/PYTHON
Description: None
created_at: 2022-06-08T07:35:18Z
updated_at: 2022-06-08T07:54:54Z
pushed_at: 2022-06-08T08:41:41Z
Language: Jupyter Notebook
URL: https://github.com/pratiksatham/PYTHON
Forks: 0
Stars: 0
Topics: 
README:



File: 121_devanshisingh_Currency-Converter-using-Python.txt
Full Name: devanshisingh/Currency-Converter-using-Python
Description: None
created_at: 2021-06-30T11:30:58Z
updated_at: 2021-07-08T14:01:42Z
pushed_at: 2021-07-08T14:01:40Z
Language: Python
URL: https://github.com/devanshisingh/Currency-Converter-using-Python
Forks: 0
Stars: 0
Topics: 
README:
# Currency-Converter-using-Python

A simple application to convert curriencies based on the current exchange rate. Utilises the Python libraries 
<ul>
  <li>TKinter - To build the GUI for the application</li>
  <li>Responses - To get the current exchange rates from the ExchangeRate API</li>
</ul>



File: 126_A-GRETSKIY_PYTHON_HW.txt
Full Name: A-GRETSKIY/PYTHON_HW
Description: None
created_at: 2022-09-09T13:41:07Z
updated_at: 2022-09-09T14:10:53Z
pushed_at: 2022-09-09T14:10:50Z
Language: Python
URL: https://github.com/A-GRETSKIY/PYTHON_HW
Forks: 0
Stars: 0
Topics: 
README:



File: 127_c-adams126_python_game_space.txt
Full Name: c-adams126/python_game_space
Description: None
created_at: 2021-09-21T17:34:00Z
updated_at: 2022-01-18T02:48:06Z
pushed_at: 2021-09-21T17:38:17Z
Language: Python
URL: https://github.com/c-adams126/python_game_space
Forks: 0
Stars: 0
Topics: 
README:



File: 129_spamuelranek_pythonic-garage-band.txt
Full Name: spamuelranek/pythonic-garage-band
Description: None
created_at: 2021-12-02T20:56:57Z
updated_at: 2021-12-03T02:58:04Z
pushed_at: 2021-12-03T02:58:00Z
Language: Python
URL: https://github.com/spamuelranek/pythonic-garage-band
Forks: 0
Stars: 0
Topics: 
README:
## Deployment
- None
## Pull Request
https://github.com/spamuelranek/pythonic-garage-band/pull/1


File: 135_June202210_Python-Capstone-Project-911-calls.txt
Full Name: June202210/Python-Capstone-Project-911-calls
Description: None
created_at: 2022-12-15T13:32:28Z
updated_at: 2022-12-15T13:33:24Z
pushed_at: 2023-01-12T18:10:21Z
Language: Jupyter Notebook
URL: https://github.com/June202210/Python-Capstone-Project-911-calls
Forks: 0
Stars: 0
Topics: 
README:
# Python-Capstone-Project-911-calls
 This is a capstone project for analysing Emergency 911 calls dataset with Python. 
 These emergency calls include fire, traffic, EMS call records for Montgomery County, PA, US.
 Data is available on Kaggle. https://www.kaggle.com/datasets/mchirico/montcoalert



File: 139_aravindanath_PythonAdvCourse.txt
Full Name: aravindanath/PythonAdvCourse
Description: None
created_at: 2020-06-17T13:23:31Z
updated_at: 2020-07-28T16:49:35Z
pushed_at: 2020-07-28T16:49:33Z
Language: Python
URL: https://github.com/aravindanath/PythonAdvCourse
Forks: 0
Stars: 0
Topics: 
README:



File: 13_ashu1click_udemy_python_code.txt
Full Name: ashu1click/udemy_python_code
Description: None
created_at: 2019-12-26T18:39:38Z
updated_at: 2019-12-26T18:39:50Z
pushed_at: 2021-03-25T23:32:34Z
Language: Python
URL: https://github.com/ashu1click/udemy_python_code
Forks: 0
Stars: 0
Topics: 
README:
# Python Refresher

This repository contains our Python Refresher or Reference code, ordered by lecture.

Feel free to bookmark or download this code to come back to it at a later date!


File: 140_Bdobbenie_Masterproef-Python.txt
Full Name: Bdobbenie/Masterproef-Python
Description: None
created_at: 2022-04-09T13:04:53Z
updated_at: 2022-04-09T13:04:53Z
pushed_at: 2022-04-09T13:10:57Z
Language: None
URL: https://github.com/Bdobbenie/Masterproef-Python
Forks: 0
Stars: 0
Topics: 
README:



File: 143_Singlarpit456_week-1-python-cipherschools.txt
Full Name: Singlarpit456/week-1-python-cipherschools
Description: None
created_at: 2022-11-30T18:40:56Z
updated_at: 2022-11-30T18:40:56Z
pushed_at: 2022-11-30T18:44:36Z
Language: None
URL: https://github.com/Singlarpit456/week-1-python-cipherschools
Forks: 0
Stars: 0
Topics: 
README:
# week-1-python-cipherschools



File: 145_max-durnea_Python_Rec.txt
Full Name: max-durnea/Python_Rec
Description: None
created_at: 2022-11-15T18:19:54Z
updated_at: 2022-11-15T18:20:09Z
pushed_at: 2022-11-16T08:58:03Z
Language: Python
URL: https://github.com/max-durnea/Python_Rec
Forks: 0
Stars: 0
Topics: 
README:



File: 147_Mole-Python_Landing-startup-test.txt
Full Name: Mole-Python/Landing-startup-test
Description: None
created_at: 2020-07-12T05:20:59Z
updated_at: 2020-07-12T05:26:59Z
pushed_at: 2020-07-12T05:26:56Z
Language: HTML
URL: https://github.com/Mole-Python/Landing-startup-test
Forks: 0
Stars: 0
Topics: 
README:
# Landing-startup-test
a test on how to use github to host your website



File: 151_olcayatabey_Patika.dev-python.txt
Full Name: olcayatabey/Patika.dev-python
Description: None
created_at: 2021-07-07T10:36:21Z
updated_at: 2023-10-04T09:07:01Z
pushed_at: 2023-10-04T09:06:57Z
Language: Jupyter Notebook
URL: https://github.com/olcayatabey/Patika.dev-python
Forks: 0
Stars: 0
Topics: 
README:



File: 152_Coderunner06_Learning_Python.txt
Full Name: Coderunner06/Learning_Python
Description: None
created_at: 2021-10-30T14:57:48Z
updated_at: 2021-10-30T14:57:48Z
pushed_at: 2021-10-30T14:57:49Z
Language: None
URL: https://github.com/Coderunner06/Learning_Python
Forks: 0
Stars: 0
Topics: 
README:



File: 153_juliamoraiss_python-CursoEmVideo.txt
Full Name: juliamoraiss/python-CursoEmVideo
Description: None
created_at: 2019-10-08T00:51:48Z
updated_at: 2020-05-12T18:53:13Z
pushed_at: 2020-05-12T18:17:46Z
Language: Python
URL: https://github.com/juliamoraiss/python-CursoEmVideo
Forks: 0
Stars: 0
Topics: 
README:
# PythonExercicios

Exercícios resolvidos nas aulas de Python 3 do Curso em Vídeo no YouTube.

[Mundo 1 - Fundamentos](https://www.youtube.com/playlist?list=PLHz_AreHm4dlKP6QQCekuIPky1CiwmdI6)

[Mundo 2 - Estruturas de Controle](https://www.youtube.com/playlist?list=PLHz_AreHm4dk_nZHmxxf_J0WRAqy5Czye)

[Mundo 3 - Estruturas Compostas](https://www.youtube.com/playlist?list=PLHz_AreHm4dksnH2jVTIVNviIMBVYyFnH)



File: 154_Misieek1916_python-trening.txt
Full Name: Misieek1916/python-trening
Description: None
created_at: 2022-12-27T10:31:30Z
updated_at: 2022-12-27T10:31:30Z
pushed_at: 2022-12-27T10:31:30Z
Language: None
URL: https://github.com/Misieek1916/python-trening
Forks: 0
Stars: 0
Topics: 
README:



File: 156_20A91A0162_codemind-python.txt
Full Name: 20A91A0162/codemind-python
Description: None
created_at: 2022-06-01T09:28:44Z
updated_at: 2022-06-01T09:28:49Z
pushed_at: 2022-07-28T18:57:00Z
Language: Python
URL: https://github.com/20A91A0162/codemind-python
Forks: 0
Stars: 0
Topics: 
README:



File: 158_eklerpm_PythonTests.txt
Full Name: eklerpm/PythonTests
Description: None
created_at: 2018-11-08T12:48:46Z
updated_at: 2018-11-19T00:29:51Z
pushed_at: 2018-11-19T00:29:50Z
Language: Python
URL: https://github.com/eklerpm/PythonTests
Forks: 0
Stars: 0
Topics: 
README:



File: 159_CarevLeonid_homework_python.txt
Full Name: CarevLeonid/homework_python
Description: None
created_at: 2021-10-12T15:32:52Z
updated_at: 2021-10-12T16:18:56Z
pushed_at: 2021-11-10T18:41:05Z
Language: None
URL: https://github.com/CarevLeonid/homework_python
Forks: 0
Stars: 0
Topics: 
README:
# homework_python


File: 160_Infinite09_python-.txt
Full Name: Infinite09/python-
Description: None
created_at: 2020-05-05T09:42:16Z
updated_at: 2020-05-05T09:42:16Z
pushed_at: 2020-05-05T09:42:17Z
Language: None
URL: https://github.com/Infinite09/python-
Forks: 0
Stars: 0
Topics: 
README:



File: 161_Rabbi1118_Classification-Based-Machine-Learning-Model-Development-Using-Python.txt
Full Name: Rabbi1118/Classification-Based-Machine-Learning-Model-Development-Using-Python
Description: None
created_at: 2022-12-29T05:48:21Z
updated_at: 2022-12-29T05:50:12Z
pushed_at: 2023-01-03T11:23:02Z
Language: Jupyter Notebook
URL: https://github.com/Rabbi1118/Classification-Based-Machine-Learning-Model-Development-Using-Python
Forks: 0
Stars: 0
Topics: 
README:



File: 162_NadezhdaYureva_python_homework1.txt
Full Name: NadezhdaYureva/python_homework1
Description: None
created_at: 2022-09-06T18:32:52Z
updated_at: 2022-09-06T18:36:17Z
pushed_at: 2022-09-06T18:36:13Z
Language: Python
URL: https://github.com/NadezhdaYureva/python_homework1
Forks: 0
Stars: 0
Topics: 
README:



File: 163_xiangcao_PythonLeetcode.txt
Full Name: xiangcao/PythonLeetcode
Description: None
created_at: 2016-06-21T16:54:32Z
updated_at: 2016-06-21T16:55:26Z
pushed_at: 2016-07-23T21:17:38Z
Language: Python
URL: https://github.com/xiangcao/PythonLeetcode
Forks: 0
Stars: 0
Topics: 
README:



File: 170_stefanushinardi_swa-python.txt
Full Name: stefanushinardi/swa-python
Description: None
created_at: 2020-09-25T23:13:48Z
updated_at: 2020-09-25T23:13:57Z
pushed_at: 2020-09-25T23:13:54Z
Language: None
URL: https://github.com/stefanushinardi/swa-python
Forks: 0
Stars: 0
Topics: 
README:



File: 17_lastdylan_stanford_algorithms_python.txt
Full Name: lastdylan/stanford_algorithms_python
Description: None
created_at: 2019-01-02T23:38:42Z
updated_at: 2019-01-02T23:39:19Z
pushed_at: 2019-01-02T23:39:18Z
Language: Python
URL: https://github.com/lastdylan/stanford_algorithms_python
Forks: 0
Stars: 0
Topics: 
README:



File: 180_mikulass_Cloud-Python.txt
Full Name: mikulass/Cloud-Python
Description: None
created_at: 2020-01-18T20:15:22Z
updated_at: 2020-01-19T20:58:05Z
pushed_at: 2020-01-19T20:57:52Z
Language: Python
URL: https://github.com/mikulass/Cloud-Python
Forks: 0
Stars: 0
Topics: 
README:
Cloud-Python



File: 182_brisarosatti_python-labs.txt
Full Name: brisarosatti/python-labs
Description: None
created_at: 2021-10-08T15:14:12Z
updated_at: 2021-11-16T16:10:16Z
pushed_at: 2021-11-16T16:10:13Z
Language: Python
URL: https://github.com/brisarosatti/python-labs
Forks: 0
Stars: 0
Topics: 
README:
# PythonLabs

Desafios do curso de 'Python para Análise de Dados' da Data cience Academy.



File: 185_alexbugheanu77_goitneo-python-hw-3-group-name.txt
Full Name: alexbugheanu77/goitneo-python-hw-3-group-name
Description: None
created_at: 2024-04-05T19:35:46Z
updated_at: 2024-04-06T12:18:33Z
pushed_at: 2024-04-06T12:18:30Z
Language: Python
URL: https://github.com/alexbugheanu77/goitneo-python-hw-3-group-name
Forks: 0
Stars: 0
Topics: 
README:



File: 187_mmcintyre1_advent_of_code_2020_python.txt
Full Name: mmcintyre1/advent_of_code_2020_python
Description: None
created_at: 2020-12-01T20:58:39Z
updated_at: 2020-12-22T02:25:40Z
pushed_at: 2020-12-22T02:25:37Z
Language: Python
URL: https://github.com/mmcintyre1/advent_of_code_2020_python
Forks: 0
Stars: 1
Topics: 
README:
# AOC 2020 
This is a repository for the Advent of Code 2020 challenges written in python, found here https://adventofcode.com/2020


File: 189_acvarun_Python-Programming-Basic-Assignment_4.txt
Full Name: acvarun/Python-Programming-Basic-Assignment_4
Description: None
created_at: 2022-01-28T08:51:58Z
updated_at: 2022-01-28T08:53:14Z
pushed_at: 2022-01-28T08:53:12Z
Language: Jupyter Notebook
URL: https://github.com/acvarun/Python-Programming-Basic-Assignment_4
Forks: 0
Stars: 0
Topics: 
README:



File: 18_boigdzip_megasdk-python-docker.txt
Full Name: boigdzip/megasdk-python-docker
Description: None
created_at: 2020-12-24T14:34:01Z
updated_at: 2020-12-24T14:34:16Z
pushed_at: 2020-12-24T14:34:13Z
Language: Dockerfile
URL: https://github.com/boigdzip/megasdk-python-docker
Forks: 0
Stars: 0
Topics: 
README:



File: 190_boboycamara_hello-python.txt
Full Name: boboycamara/hello-python
Description: None
created_at: 2018-10-25T05:00:34Z
updated_at: 2018-10-26T04:02:18Z
pushed_at: 2018-10-26T04:02:17Z
Language: Python
URL: https://github.com/boboycamara/hello-python
Forks: 0
Stars: 0
Topics: 
README:



File: 191_Omkarkv_Python-E-Lectures.txt
Full Name: Omkarkv/Python-E-Lectures
Description: None
created_at: 2022-10-10T13:24:59Z
updated_at: 2022-10-10T13:30:28Z
pushed_at: 2022-10-15T17:19:36Z
Language: Python
URL: https://github.com/Omkarkv/Python-E-Lectures
Forks: 0
Stars: 0
Topics: 
README:
# Python-E-Lectures


File: 192_lizaASU2_Python_for_DataScience.txt
Full Name: lizaASU2/Python_for_DataScience
Description: None
created_at: 2020-06-17T14:08:33Z
updated_at: 2020-07-07T08:53:22Z
pushed_at: 2020-07-07T08:53:20Z
Language: Python
URL: https://github.com/lizaASU2/Python_for_DataScience
Forks: 0
Stars: 0
Topics: 
README:
# Задания по курсу Python_for_DataScience Гребеньщковой Елизаветы Витальевны



File: 195_santipm29_schedule-python.txt
Full Name: santipm29/schedule-python
Description: None
created_at: 2019-09-05T15:16:47Z
updated_at: 2019-09-05T18:37:55Z
pushed_at: 2019-09-05T18:37:54Z
Language: Python
URL: https://github.com/santipm29/schedule-python
Forks: 0
Stars: 0
Topics: 
README:
# Schedule Python 3.7

## Create virtualenv
```bash
virtualenv venv
```
## Activate virtualenv
```bash
.\venv\Scripts\activate.ps1
```
or
```bash
.\venv\Scripts\activate.bat
```
## Installation
```bash
pip install -r requirements.txt
```
## Test
```bash
py .\main.py
```



File: 196_NiharikaBalaga_PythonTutorial.txt
Full Name: NiharikaBalaga/PythonTutorial
Description: None
created_at: 2021-03-13T16:58:52Z
updated_at: 2021-03-13T17:13:11Z
pushed_at: 2021-03-13T17:13:09Z
Language: Python
URL: https://github.com/NiharikaBalaga/PythonTutorial
Forks: 0
Stars: 0
Topics: 
README:



File: 199_cool21th_python_library.txt
Full Name: cool21th/python_library
Description: None
created_at: 2018-10-08T04:52:32Z
updated_at: 2018-10-24T02:51:05Z
pushed_at: 2018-10-24T02:51:04Z
Language: None
URL: https://github.com/cool21th/python_library
Forks: 0
Stars: 0
Topics: 
README:
# python_library



File: 204_ratulpaul1990_Python-Learning.txt
Full Name: ratulpaul1990/Python-Learning
Description: None
created_at: 2018-09-26T03:15:47Z
updated_at: 2020-05-16T14:10:07Z
pushed_at: 2020-05-16T14:10:05Z
Language: Python
URL: https://github.com/ratulpaul1990/Python-Learning
Forks: 0
Stars: 0
Topics: 
README:



File: 206_rstraub_automate-the-boring-stuff-python.txt
Full Name: rstraub/automate-the-boring-stuff-python
Description: None
created_at: 2020-10-05T17:55:14Z
updated_at: 2020-12-06T16:03:08Z
pushed_at: 2020-12-06T16:03:06Z
Language: Python
URL: https://github.com/rstraub/automate-the-boring-stuff-python
Forks: 0
Stars: 0
Topics: 
README:



File: 208_beepboopblap_Tic-Tac-Toe-Python.txt
Full Name: beepboopblap/Tic-Tac-Toe-Python
Description: None
created_at: 2022-03-07T02:38:17Z
updated_at: 2022-03-07T06:18:58Z
pushed_at: 2022-03-07T06:18:56Z
Language: Python
URL: https://github.com/beepboopblap/Tic-Tac-Toe-Python
Forks: 0
Stars: 0
Topics: 
README:
# Tic-Tac-Toe-Python

*****DOES NOT FULLY WORK YET*****

Tic Tac Toe in Python (Computer Science Class Work)

Still has problems with win detection



File: 209_pythonprosinaction_Local.txt
Full Name: pythonprosinaction/Local
Description: None
created_at: 2020-06-25T11:13:24Z
updated_at: 2020-06-26T14:00:11Z
pushed_at: 2020-06-26T14:00:08Z
Language: HTML
URL: https://github.com/pythonprosinaction/Local
Forks: 0
Stars: 0
Topics: 
README:



File: 212_abl_cs5500-fly-python-telegram.txt
Full Name: abl/cs5500-fly-python-telegram
Description: None
created_at: 2021-09-17T02:49:39Z
updated_at: 2021-09-17T04:21:33Z
pushed_at: 2021-09-17T04:21:30Z
Language: Python
URL: https://github.com/abl/cs5500-fly-python-telegram
Forks: 0
Stars: 0
Topics: 
README:



File: 216_Nido89_Pythonfun.txt
Full Name: Nido89/Pythonfun
Description: None
created_at: 2018-10-30T09:05:52Z
updated_at: 2018-10-30T10:25:39Z
pushed_at: 2018-10-30T10:25:37Z
Language: Python
URL: https://github.com/Nido89/Pythonfun
Forks: 0
Stars: 0
Topics: 
README:



File: 218_godfatheranza_Bank_Marketing_Campaign_Data_Analysis_Using_Python-Logistic_Regression.txt
Full Name: godfatheranza/Bank_Marketing_Campaign_Data_Analysis_Using_Python-Logistic_Regression
Description: None
created_at: 2020-12-31T01:44:58Z
updated_at: 2020-12-31T01:45:28Z
pushed_at: 2020-12-31T01:45:26Z
Language: None
URL: https://github.com/godfatheranza/Bank_Marketing_Campaign_Data_Analysis_Using_Python-Logistic_Regression
Forks: 0
Stars: 0
Topics: 
README:
# Bank_Marketing_Campaign_Data_Analysis_Using_Python-Logistic_Regression-

## I have used Bank Campaign Marketing dataset for doing analysis of it and applied Logistic regression upon to classify new  customers if they will ready to opt for deposit or not based upon current campaign data.
## I have included Final Cleaned excel file named(Modeling_Dataset.xlsx) which i have used for applying Logistic Regression as well as python jupyter notebook (Banking_Marketing_Data_Logistic_Regression.ipynb).

### Python Libraries need to Install:

* pandas
* sklearn
* numpy
* matplotlib
* xlrd

### Data Understating:

* Our Dataset is about bank marketing campaign where they are marketing term deposit to their customer.
* Dataset contains various details about customer information as well as campaign related information.
* There are total 10,000 observations and 17 variables in dataset below is brief description about each variables:

#### Age: Age of customer.
#### Job: Contains customer job type such as categorical: 'admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','unknown'
#### Marital: Marital status of customer contains divorced, married, single , unknown
#### Education: What is education of customer contains primary, secondary, tertiary and unknown
#### Default: Customer has default has or not contains yes, no and unknown
#### Housing: Customer has housing loan or not contains yes and no
#### Loan: Customer has any other loan or not contains yes and no
#### Balance: Customer bank balance
#### Contact: During term deposit campaign how customer were contacted contains cellular, telephone and unknown
#### Day: Contains last contacted day of month to customer all 1 to 30/31 day of month
#### Month: Contains last contacted month of year to customer all months of year
#### Duration: During Campaign for how many seconds of duration customer talked
#### Campaign: During campaign how many times customer were contacted.
#### Pdays: number of days that passed by after the client was last contacted from a previous campaign
#### Previous: number of contacts performed before this campaign and for this client
#### Poutcome: outcome of the previous marketing campaign contains failure, success, other and unknown
#### Deposit: Contains yes and no if customer made customer deposit than yes otherwise no.

### Data Cleaning: 

* Our dataset is not having any missing values.
* Some of columns like job, education and contact are having unknown values we assume that those values exist because some customer may not want to disclose this information.  By Removing those unknown values we can loose other useful records of that whole row. So,  We will keep them.
* Out of all columns or variables we are going to remove columns like Blank Column_Name, Month, Day, Poutcome, Pdays  and Previous using Access which we will not require for future analysis. 

### Identify Business Questions:

* Highlight of this banking marketing dataset is that after running campaign how many customer agreed to make term deposit and how many not.
* Customer’s who is  ready to make and who is not ready to make term deposit:

 #### what is age of those customer?
 #### How much bank balance they have?
 #### How many number of times they have been contacted during campaign?
 #### What is time duration of call?
 #### What is their marital status?
 #### Which type of job they have?
 #### What is their education? 
* By finding all this patterns in both type of customer who made term deposit and not made term deposit bank can make future decision about in next marketing campaign which type of customer need to target.
* So, based upon all this we can conclude that for finding relationship between two variables our dependent variable is deposit which is yes if customer made and no if customer has not and any of  these independent variables like bank balance, marital status, number of time contacted , duration for they talked, type of job and what is their education level.

### Data Pre-Processing:

* Target variable deposit is categorical so we will convert it into 0 for “no” and 1 for “yes” using Excel.
* Some of independent variable are categorical variable like job, marital, education, default, housing, loan and contact.
* For doing Logistic regression we need to convert them into numerical values.
* In Python to apply logistic regression on categorical variables get_dummies() function is available inside Pandas library which will create additional variable of each categorical variables and  fill it’s values with 0 and 1 dummies. For Example, in case of marital variable it will create marital_married,  marital_divorced and marital_single than fill each of this variables with 1 and 0.Likewise for each categorical variable.
* In R also same like python there is one function dummy_cols function is available inside fastDummies library which does same thing will create additional variable of each categorical variables and  fill it’s values with 0 and 1 dummies. 

### Interpreting Python Model :

* In case of python From Accuracy of our logistic regression model it says that out of all term deposit that were marketed in campaign 78% of them liked by customer and subscribed for it.  
* From above results we can say that Bank may rely on this model if they apply same marketing campaign on targeted customer there are 78% of probability that bank can predict weather a customer will subscribe for term deposit or not.



File: 219_PARKYOONJUNG6163_PythonWebDjango.txt
Full Name: PARKYOONJUNG6163/PythonWebDjango
Description: None
created_at: 2019-02-01T01:18:31Z
updated_at: 2019-02-01T01:28:44Z
pushed_at: 2019-02-01T01:28:43Z
Language: Python
URL: https://github.com/PARKYOONJUNG6163/PythonWebDjango
Forks: 0
Stars: 0
Topics: 
README:
# PythonWebDjango

참고 사이트 

https://kis6473.tistory.com/49                                          
https://beomi.github.io/2017/03/01/HowToMakeWebCrawler-Save-with-Django/



File: 21_infocomputerlearning_pythonlearning.txt
Full Name: infocomputerlearning/pythonlearning
Description: None
created_at: 2021-04-20T09:54:48Z
updated_at: 2021-04-20T09:54:52Z
pushed_at: 2021-04-20T09:54:49Z
Language: None
URL: https://github.com/infocomputerlearning/pythonlearning
Forks: 0
Stars: 0
Topics: 
README:
# pythonlearning


File: 220_ak991983_python_os.txt
Full Name: ak991983/python_os
Description: None
created_at: 2021-05-29T11:54:40Z
updated_at: 2021-05-31T20:19:33Z
pushed_at: 2021-05-31T20:21:30Z
Language: None
URL: https://github.com/ak991983/python_os
Forks: 0
Stars: 0
Topics: 
README:



File: 221_shantanupatwardhan_pythonDS.txt
Full Name: shantanupatwardhan/pythonDS
Description: None
created_at: 2017-02-13T06:46:26Z
updated_at: 2017-02-13T06:46:26Z
pushed_at: 2017-02-13T06:46:27Z
Language: None
URL: https://github.com/shantanupatwardhan/pythonDS
Forks: 0
Stars: 0
Topics: 
README:
# pythonDS


File: 223_Karrisyamkumar123_week2-python-cipherschools.txt
Full Name: Karrisyamkumar123/week2-python-cipherschools
Description: None
created_at: 2022-12-16T13:34:51Z
updated_at: 2022-12-16T13:34:51Z
pushed_at: 2022-12-16T13:39:07Z
Language: None
URL: https://github.com/Karrisyamkumar123/week2-python-cipherschools
Forks: 0
Stars: 0
Topics: 
README:



File: 226_Chaithra-28_Python-Codes.txt
Full Name: Chaithra-28/Python-Codes
Description: None
created_at: 2021-02-02T09:54:17Z
updated_at: 2021-06-13T15:21:24Z
pushed_at: 2021-06-13T15:17:48Z
Language: Python
URL: https://github.com/Chaithra-28/Python-Codes
Forks: 0
Stars: 0
Topics: 
README:
# Python-Codes



File: 228_ichakrabarty_python-challenge.txt
Full Name: ichakrabarty/python-challenge
Description: None
created_at: 2021-05-04T06:19:22Z
updated_at: 2021-05-08T18:41:43Z
pushed_at: 2021-05-08T18:41:41Z
Language: Python
URL: https://github.com/ichakrabarty/python-challenge
Forks: 0
Stars: 0
Topics: 
README:
# Python-Accounting-Polling-Challenge

Includes PyBank Challenge and PyPoll Challenge.

Both folders for each challenge contain python code and a results file.


File: 229_lauraramirezencinas_python.txt
Full Name: lauraramirezencinas/python
Description: None
created_at: 2020-05-11T14:56:01Z
updated_at: 2020-05-11T16:05:42Z
pushed_at: 2022-12-08T09:50:40Z
Language: Python
URL: https://github.com/lauraramirezencinas/python
Forks: 0
Stars: 0
Topics: 
README:



File: 22_ASrini8397_Python-Project.txt
Full Name: ASrini8397/Python-Project
Description: None
created_at: 2022-04-23T19:10:43Z
updated_at: 2022-05-06T14:02:26Z
pushed_at: 2022-05-06T14:02:33Z
Language: HTML
URL: https://github.com/ASrini8397/Python-Project
Forks: 1
Stars: 0
Topics: 
README:
A FLASK application to optimize portfolio allocation by providing users the exact number of shares to purchase for an optimal portfolio(max sharpe ratio), an equally balanced portfolio, or a minimal risk portfolio. Users can create and update a portfolio of stocks and can input the amount of capital they are looking to invest and will be given their portfolio allocation results based on these inputs. The application also has a forecasting feature where users can see 3 forecasts of what the next trading day's adjusted close price will be for any stock they pick. This is to help users in making allocation decisions.



File: 234_sonsm0318_python.txt
Full Name: sonsm0318/python
Description: None
created_at: 2024-04-09T13:29:06Z
updated_at: 2024-04-29T14:21:22Z
pushed_at: 2024-04-29T14:21:18Z
Language: Jupyter Notebook
URL: https://github.com/sonsm0318/python
Forks: 0
Stars: 0
Topics: 
README:
# python-


File: 236_hitsujinoke_study_python.txt
Full Name: hitsujinoke/study_python
Description: None
created_at: 2018-09-23T11:36:39Z
updated_at: 2018-10-21T13:35:25Z
pushed_at: 2018-10-21T13:35:24Z
Language: Python
URL: https://github.com/hitsujinoke/study_python
Forks: 0
Stars: 0
Topics: 
README:



File: 239_squidarth_my-python-project.txt
Full Name: squidarth/my-python-project
Description: None
created_at: 2022-10-12T11:23:44Z
updated_at: 2022-10-12T11:24:10Z
pushed_at: 2022-10-12T11:24:05Z
Language: Python
URL: https://github.com/squidarth/my-python-project
Forks: 1
Stars: 0
Topics: 
README:



File: 23_xiaobinworker_pythonProject1.txt
Full Name: xiaobinworker/pythonProject1
Description: None
created_at: 2022-04-12T00:21:20Z
updated_at: 2022-04-12T00:26:22Z
pushed_at: 2022-04-12T00:39:21Z
Language: Python
URL: https://github.com/xiaobinworker/pythonProject1
Forks: 0
Stars: 0
Topics: 
README:



File: 242_liujianpc_pythonScript.txt
Full Name: liujianpc/pythonScript
Description: None
created_at: 2016-01-09T07:04:29Z
updated_at: 2016-04-04T09:22:58Z
pushed_at: 2016-04-07T07:15:16Z
Language: Python
URL: https://github.com/liujianpc/pythonScript
Forks: 0
Stars: 0
Topics: 
README:
it is my python scripts ,somethings done by myself.



File: 243_tejamaddimsetty_Python-Course.txt
Full Name: tejamaddimsetty/Python-Course
Description: None
created_at: 2022-02-08T07:26:51Z
updated_at: 2022-02-08T07:28:16Z
pushed_at: 2022-02-09T12:32:14Z
Language: Python
URL: https://github.com/tejamaddimsetty/Python-Course
Forks: 0
Stars: 0
Topics: 
README:
# Python-Course



File: 244_nyudji_fatec_2023_2_pbd_ap07_ex_python.txt
Full Name: nyudji/fatec_2023_2_pbd_ap07_ex_python
Description: None
created_at: 2023-09-16T01:19:32Z
updated_at: 2023-10-15T08:35:39Z
pushed_at: 2023-09-16T01:47:53Z
Language: None
URL: https://github.com/nyudji/fatec_2023_2_pbd_ap07_ex_python
Forks: 0
Stars: 0
Topics: 
README:
# fatec_2023_2_pdb_ex_python

Essa atividade tem como o intuito de seguir a aula de programação em Banco de dados da Fatec Ipiranga. Nesta aula estamos aprendendo um pouco mais sobre o Python e Postgree. Como fazer um sistema com integração dos dois, usado funções, classes e um menu.

Nomes e RA:

Nome: Augusto Pinho de Freitas RA: 2041382221010

Nome: Juscilene Cecilia dos Santos Varandas RA: 2041382221013

Nome: Nicolas Yudji Kondo RA: 2041382221040



File: 247_cloudyfazy_python-DOV.txt
Full Name: cloudyfazy/python-DOV
Description: None
created_at: 2022-10-03T18:05:34Z
updated_at: 2022-10-03T18:07:04Z
pushed_at: 2022-12-06T23:26:55Z
Language: Python
URL: https://github.com/cloudyfazy/python-DOV
Forks: 0
Stars: 0
Topics: 
README:



File: 248_ivantuzita_Heroku-Python-Prime-Key.txt
Full Name: ivantuzita/Heroku-Python-Prime-Key
Description: None
created_at: 2022-05-17T18:36:03Z
updated_at: 2022-05-17T18:37:34Z
pushed_at: 2022-05-17T18:37:30Z
Language: Python
URL: https://github.com/ivantuzita/Heroku-Python-Prime-Key
Forks: 0
Stars: 0
Topics: 
README:



File: 24_bigbalo1_welcome-to-python-work.txt
Full Name: bigbalo1/welcome-to-python-work
Description: None
created_at: 2022-10-25T13:09:32Z
updated_at: 2022-10-25T13:13:42Z
pushed_at: 2022-10-26T14:51:54Z
Language: Jupyter Notebook
URL: https://github.com/bigbalo1/welcome-to-python-work
Forks: 0
Stars: 0
Topics: 
README:
# welcome-to-python-work


File: 250_TUWAIQ-PYTHON-COURSE_DICTS_SETS.txt
Full Name: TUWAIQ-PYTHON-COURSE/DICTS_SETS
Description: None
created_at: 2022-07-03T17:32:53Z
updated_at: 2022-07-03T17:32:53Z
pushed_at: 2022-07-04T17:14:21Z
Language: None
URL: https://github.com/TUWAIQ-PYTHON-COURSE/DICTS_SETS
Forks: 16
Stars: 0
Topics: 
README:
# DICTS_SETS

### Kate, Dalia & Monica are work associates . They all work at a consultancy company.

## Kate has the products sales of Nestle :

##### KitKat : 34,456,432 US Dollars
##### Nescafe : 14,106,132 US Dollars
##### Maggi : 9,960,312 US Dollars
##### Nido : 44,506,003 US Dollars

      

## Dalia has the products sales of Unilever :

##### Lipton : 23,456,000 US Dollars
##### Breyers : 1,235,891 US Dollars
##### HellManns : 17,241,412 US Dollars
##### Marmite : 11,715,324 US Dollars
      

## Monica has 2 tables containing the countries in which Unilever and Nestle sell the products:
##### Nestle : "Saudi Arabia", "Oman", "Kuwait", "Egypt", "Jordan", "Sudan"
##### Unilever : "Saudi Arabia", "Kuwait", "Iraq", "Morocco", "Yemen", "United Emirates"


## Using what you've learned during . Please do the following :
- Create a variable to hold the values of Nestle products (use a dicitionary)
- Create a variable to hold the values of Unilever products (Use a dictionary)
- Print each product sold by Unilever and the sales figures / numbers  for that product.
- Print each product sold by Nestle and the sales figures / numbers  for that product.
- Print which of the companies has more products that the other company.
- Print the top selling product from Nestle with sales figures.
- Print the top selling product from Unilever with sales figures.
- Using Sets & a loop, print all the cities Unilever & Nestle sell their products in.
- Using Sets & a loop, print the cities that both Nestle & Unilver sell in common.
- Using Sets & a loop, print the cities Nestle sells in , but Unilver doens't sell in.







File: 258_kzimmer495_PythonTraining.txt
Full Name: kzimmer495/PythonTraining
Description: None
created_at: 2020-03-03T18:46:43Z
updated_at: 2020-03-03T18:46:43Z
pushed_at: 2020-03-03T18:46:43Z
Language: None
URL: https://github.com/kzimmer495/PythonTraining
Forks: 0
Stars: 0
Topics: 
README:



File: 259_asthakri50_pythonBasics.txt
Full Name: asthakri50/pythonBasics
Description: None
created_at: 2021-02-16T14:24:56Z
updated_at: 2021-02-16T14:30:47Z
pushed_at: 2021-02-16T14:30:45Z
Language: Python
URL: https://github.com/asthakri50/pythonBasics
Forks: 0
Stars: 0
Topics: 
README:
# pythonBasics


File: 25_glen-macharia-kinyua_alogarithms-in-python.txt
Full Name: glen-macharia-kinyua/alogarithms-in-python
Description: None
created_at: 2023-01-27T09:53:38Z
updated_at: 2023-01-27T09:55:03Z
pushed_at: 2023-01-27T09:55:00Z
Language: Jupyter Notebook
URL: https://github.com/glen-macharia-kinyua/alogarithms-in-python
Forks: 0
Stars: 0
Topics: 
README:



File: 260_pritam-aich_Python-project.txt
Full Name: pritam-aich/Python-project
Description: None
created_at: 2023-01-02T18:17:27Z
updated_at: 2023-01-02T18:19:25Z
pushed_at: 2023-01-02T18:19:22Z
Language: Python
URL: https://github.com/pritam-aich/Python-project
Forks: 0
Stars: 0
Topics: 
README:
# Python-project


File: 263_sohamatgit_python-scripts.txt
Full Name: sohamatgit/python-scripts
Description: None
created_at: 2022-07-06T13:28:54Z
updated_at: 2022-07-06T13:28:54Z
pushed_at: 2022-07-06T13:28:55Z
Language: None
URL: https://github.com/sohamatgit/python-scripts
Forks: 0
Stars: 0
Topics: 
README:
# python-scripts


File: 268_Mr-Croa_passwordGen_Python.txt
Full Name: Mr-Croa/passwordGen_Python
Description: None
created_at: 2020-02-20T13:46:55Z
updated_at: 2020-02-20T13:50:19Z
pushed_at: 2020-02-20T13:50:17Z
Language: Python
URL: https://github.com/Mr-Croa/passwordGen_Python
Forks: 0
Stars: 0
Topics: 
README:



File: 270_asbasson_Python.txt
Full Name: asbasson/Python
Description: None
created_at: 2019-02-02T12:23:51Z
updated_at: 2019-04-21T10:19:51Z
pushed_at: 2019-02-02T12:24:57Z
Language: Jupyter Notebook
URL: https://github.com/asbasson/Python
Forks: 0
Stars: 1
Topics: 
README:



File: 276_rgvkrushnan_Lex_Java.txt
Full Name: rgvkrushnan/Lex_Java
Description: None
created_at: 2021-05-29T12:41:05Z
updated_at: 2022-12-16T15:18:44Z
pushed_at: 2022-12-16T15:18:56Z
Language: None
URL: https://github.com/rgvkrushnan/Lex_Java
Forks: 0
Stars: 0
Topics: 
README:
# Trying to learn Java & its intricacies as a MF developer!!! lets hope i keep learing something new everyday!!!!



File: 277_jawnaphin_markdown-dsl-for-python.txt
Full Name: jawnaphin/markdown-dsl-for-python
Description: None
created_at: 2017-09-14T00:52:11Z
updated_at: 2017-09-14T00:56:26Z
pushed_at: 2017-10-21T20:02:41Z
Language: Python
URL: https://github.com/jawnaphin/markdown-dsl-for-python
Forks: 0
Stars: 0
Topics: 
README:
# Markdown DSL for python
Generates Gitlab / Github flavoured markdown
```
print ("\n".join([h1("Markdown DSL for python"),
				  "Generates Gitlab / Github flavoured markdown",
				  code(readme_example)]))
```



File: 278_Namratha369_Shapeai_python_data_analytics.txt
Full Name: Namratha369/Shapeai_python_data_analytics
Description: None
created_at: 2021-06-26T11:42:05Z
updated_at: 2021-06-26T11:48:12Z
pushed_at: 2021-06-26T11:48:10Z
Language: Jupyter Notebook
URL: https://github.com/Namratha369/Shapeai_python_data_analytics
Forks: 0
Stars: 0
Topics: 
README:



File: 281_pragya-2_PythonGame.txt
Full Name: pragya-2/PythonGame
Description: None
created_at: 2021-03-20T14:24:41Z
updated_at: 2021-03-20T14:24:43Z
pushed_at: 2021-03-20T14:29:27Z
Language: None
URL: https://github.com/pragya-2/PythonGame
Forks: 0
Stars: 0
Topics: 
README:
# PythonGame


File: 284_Cologler_trackerslist-builder-python.txt
Full Name: Cologler/trackerslist-builder-python
Description: None
created_at: 2018-06-18T17:53:07Z
updated_at: 2018-07-04T11:01:23Z
pushed_at: 2018-07-04T11:01:22Z
Language: Python
URL: https://github.com/Cologler/trackerslist-builder-python
Forks: 0
Stars: 0
Topics: 
README:
# trackerslist-builder

filter trackers as you type.



File: 287_Amrit07-dev_python.txt
Full Name: Amrit07-dev/python
Description: None
created_at: 2020-12-31T11:53:08Z
updated_at: 2023-04-05T00:04:05Z
pushed_at: 2023-04-07T00:26:20Z
Language: Python
URL: https://github.com/Amrit07-dev/python
Forks: 0
Stars: 0
Topics: 
README:
# python


File: 289_HolzeHan_python-docker.txt
Full Name: HolzeHan/python-docker
Description: None
created_at: 2021-01-03T10:09:05Z
updated_at: 2021-01-03T10:09:10Z
pushed_at: 2021-01-03T10:09:07Z
Language: None
URL: https://github.com/HolzeHan/python-docker
Forks: 0
Stars: 0
Topics: 
README:
# python-docker


File: 290_subhamkhd_265109_LTTS_MINIPROJECT_PYTHON.txt
Full Name: subhamkhd/265109_LTTS_MINIPROJECT_PYTHON
Description: None
created_at: 2021-04-30T12:45:10Z
updated_at: 2021-06-04T14:41:46Z
pushed_at: 2021-05-01T06:34:37Z
Language: Python
URL: https://github.com/subhamkhd/265109_LTTS_MINIPROJECT_PYTHON
Forks: 1
Stars: 1
Topics: 
README:
# LTTS_PYTHON_MINI_PROJECT

# INTRODUCTION

This Project is About Captcha Generate system.
we can Enter any 8 Digit Number as REGISTRATION NUMBER.

# HOW TO RUN ?

Step 1:- Open Implementation Folder 

Step 2:- Download all three files and save it in a folder. (PS:- Your system   should have installed any python compiler)

Step 3:- Run the CAP2334567.py file 

Step 4:- you will we be Seeing an interface in your system. Asking to enter Registration  number and Captcha.

Step 5:- if any Details entered wrong then it will show the error message.

Step 6 :- If all the Credentials entered correctly then you will see the Success Message.

# OUTPUT SCREENSHOTS

![alt text](https://github.com/subhamkhd/265109_LTTS_MINIPROJECT_PYTHON/blob/master/OUTPUT%20SCREENSHOTS/Screenshot%20(64).png?raw=true)

![alt text](https://github.com/subhamkhd/265109_LTTS_MINIPROJECT_PYTHON/blob/master/OUTPUT%20SCREENSHOTS/Screenshot%20(65).png?raw=true)

![alt text](https://github.com/subhamkhd/265109_LTTS_MINIPROJECT_PYTHON/blob/master/OUTPUT%20SCREENSHOTS/Screenshot%20(66).png?raw=true)

![alt text](https://github.com/subhamkhd/265109_LTTS_MINIPROJECT_PYTHON/blob/master/OUTPUT%20SCREENSHOTS/Screenshot%20(67).png?raw=true)

![alt text](https://github.com/subhamkhd/265109_LTTS_MINIPROJECT_PYTHON/blob/master/OUTPUT%20SCREENSHOTS/Screenshot%20(68).png?raw=true)

![alt text](https://github.com/subhamkhd/265109_LTTS_MINIPROJECT_PYTHON/blob/master/OUTPUT%20SCREENSHOTS/Screenshot%20(69).png?raw=true)







File: 294_firozhc_microservices-python-react.txt
Full Name: firozhc/microservices-python-react
Description: None
created_at: 2021-06-18T12:32:28Z
updated_at: 2021-06-19T12:18:49Z
pushed_at: 2021-06-19T12:18:46Z
Language: Python
URL: https://github.com/firozhc/microservices-python-react
Forks: 0
Stars: 1
Topics: 
README:
# microservices-python-react

This project demonstrates how we can build a simple python application using distributed frameworks and microservices architectural pattern.
The main components of this project are as follows-
  1. Docker - For Containerization
  2. Django REST Framework - For building lightweight microservices
  3. Django Framework - For building the complete application as Python BE
  4. Flask Framework - For building lightweight microservices
  5. React JS Framework - For building the FE of the application
  
  
 This project follows the instructions from the freeCodeCamp.org Video located here - https://www.youtube.com/watch?v=0iB5IPoTDts
 
 All copyright belongs to the original creator of the video - https://www.youtube.com/watch?v=0iB5IPoTDts
 
 This project is intended to be a companion guide for learners so they can pull the repository and run the code on their machines to see how it works.
 
 
 Thanks!
  



File: 295_jeremyjong_FTP-Download-On-Python.txt
Full Name: jeremyjong/FTP-Download-On-Python
Description: None
created_at: 2021-10-19T12:19:40Z
updated_at: 2023-11-18T21:06:58Z
pushed_at: 2021-10-19T12:21:04Z
Language: Jupyter Notebook
URL: https://github.com/jeremyjong/FTP-Download-On-Python
Forks: 0
Stars: 0
Topics: 
README:



File: 296_Anushwa0306_Python-Practises.txt
Full Name: Anushwa0306/Python-Practises
Description: None
created_at: 2021-07-24T20:23:47Z
updated_at: 2021-07-26T12:08:41Z
pushed_at: 2021-07-26T12:08:39Z
Language: Jupyter Notebook
URL: https://github.com/Anushwa0306/Python-Practises
Forks: 0
Stars: 0
Topics: 
README:



File: 298_Priyanshi423_pythonprojects.txt
Full Name: Priyanshi423/pythonprojects
Description: None
created_at: 2021-05-10T16:32:23Z
updated_at: 2021-06-17T16:53:40Z
pushed_at: 2021-06-17T16:53:37Z
Language: Python
URL: https://github.com/Priyanshi423/pythonprojects
Forks: 0
Stars: 1
Topics: 
README:
# pythonprojects



File: 299_ZeroShka_pythonProjectelebot.txt
Full Name: ZeroShka/pythonProjectelebot
Description: None
created_at: 2021-03-16T08:37:52Z
updated_at: 2021-03-16T08:38:52Z
pushed_at: 2021-03-16T08:38:50Z
Language: Python
URL: https://github.com/ZeroShka/pythonProjectelebot
Forks: 0
Stars: 0
Topics: 
README:



File: 29_yshivv_pythonQueue.txt
Full Name: yshivv/pythonQueue
Description: None
created_at: 2022-09-28T04:35:41Z
updated_at: 2022-09-28T04:35:53Z
pushed_at: 2022-09-28T04:35:50Z
Language: Python
URL: https://github.com/yshivv/pythonQueue
Forks: 0
Stars: 0
Topics: 
README:



File: 2_LuciaOriana123_Python-Prep.txt
Full Name: LuciaOriana123/Python-Prep
Description: None
created_at: 2022-12-27T18:35:40Z
updated_at: 2022-12-26T23:26:11Z
pushed_at: 2022-12-16T18:12:46Z
Language: None
URL: https://github.com/LuciaOriana123/Python-Prep
Forks: 0
Stars: 0
Topics: 
README:
![HenryLogo](https://d31uz8lwfmyn8g.cloudfront.net/Assets/logo-henry-white-lg.png)

# Prep Course 

### ¡Hola! Bienvenido al Prep Course para la carrera de Data Science. 

En este curso introductorio podrás aprender todo el contenido que luego será evaluado en el Henry Challenge, el último paso para ingresar a la carrera de Data Science en Henry. 

#### ¿Qué es el Prep Course? 


El Prep Course, o curso preparatorio, es un curso que diseñamos desde Henry con la finalidad de nivelar a todos nuestros aplicantes. La idea es que con este curso puedas dar tus primeros pasos en tecnología y así aprender esos conceptos básicos que serán necesarios para cuando estés dentro de la carrera. 

#### ¿En qué consiste el Prep Course? 

El curso consiste en una serie de videos, material escrito y ejercicios para que puedas ir aprendiendo estos conceptos básicos de Python y Matemática. 
Todo el material de Python, incluyendo los VIDEOS, se encuentra dentro de esta página, en las pestañas superiores puedes acceder a cada una de las clases. 

Para resolver los ejercicios (Homeworks), accede a este repositorio (https://github.com/soyHenry/Python-Prep), RECUERDA que no puedes acceder a los videos desde este repositorio.

Una vez que hayas terminado de estudiarlo, podrás continuar con el contenido de matemática que se encuentra en: math.prep.soyhenry.com

Podrás ir avanzando con el contenido a tu ritmo y de manera asincrónica (es decir, en los horarios y tiempos que tu prefieras). Cuando hayas finalizado, podrás inscribirte para realizar el Henry Challenge. 

#### ¿Qué es el Henry Challenge? 

Es un examen donde evaluamos los conceptos que se aprenden en el Prep Course. El examen tiene la finalidad de asegurarnos que realmente se han aprendido estos conceptos, dado que tenerlos bien claro es la clave de éxito para que puedas avanzar bien dentro de la carrera. 
El examen se realiza los días sábados cada dos semanas, previa inscripción en el siguiente enlace (https://forms.gle/L9LeFbrtxPTPaxM49). Podrás rendirlo todas las veces que quieras. Para más información, puedes ir a la sección del challenge. 

#### ¿Qué puedo hacer si tengo dudas? 


Contamos con Slack: una plataforma de comunicación donde podrás ponerte en contacto con nuestra comunidad que siempre te ayudará a resolver todas tus dudas. Encontrarás acceso a slack desde los mails que recibiste al aplicar a la carrera. Más adelante te explicaremos cómo usar la herramienta. 

Entonces, ¿qué debo hacer ahora para avanzar con el proceso? 
Debes comenzar a ver todos los videos, el material escrito y a hacer los ejercicios, siguiendo el orden postulado aquí en el curso. Una vez que hayas finalizado, pasarás al material de matemática y luego podrás realizar el Henry Challenge. 


Cualquier duda, nos puedes escribir a admisiones@soyhenry.com
¡Muchos éxitos!



## Open House

En este video podrás conocer más sobre Henry, la carrera de Data Science y el proceso de admisión. 

<div class="iframeContainer">
  <iframe src="https://player.vimeo.com/video/682041440" allow="autoplay; fullscreen" allowfullscreen></iframe>
</div>


El Henry Challenge se realiza los sabados, cada dos semanas. 
Puedes encontrar las nuevas fechas e inscribirte aqui:
https://docs.google.com/forms/d/e/1FAIpQLSdzlBPk6hNHK6IlyIHIjvg4ehYhi5Wn39t4Vo9q9fVW0zid0w/viewform

Los proximos inicios de la carrera se iran publicando en la landing de Data Science: https://www.soyhenry.com/carrera-data-science

Si tienes mas dudas sobre Henry, la carrera o el proceso de admisión puedes consultarlo en el canal #consultas_administrativas de Slack.



File: 300_ultraUnicorn74_Python-Practice.txt
Full Name: ultraUnicorn74/Python-Practice
Description: None
created_at: 2020-08-09T10:40:39Z
updated_at: 2020-08-20T09:37:32Z
pushed_at: 2020-08-20T09:37:30Z
Language: Python
URL: https://github.com/ultraUnicorn74/Python-Practice
Forks: 0
Stars: 0
Topics: 
README:
# Python-Practice
#### This Program keeps on adding the a stream of numbers entered by the users .The adding stops as soon as the user press the 'q'.



File: 301_imrodrig_PythonForDS.txt
Full Name: imrodrig/PythonForDS
Description: None
created_at: 2022-12-11T05:39:19Z
updated_at: 2022-12-11T05:41:04Z
pushed_at: 2022-12-11T05:40:59Z
Language: Python
URL: https://github.com/imrodrig/PythonForDS
Forks: 0
Stars: 0
Topics: 
README:



File: 305_spettigrew_pythonII-guided-practice.txt
Full Name: spettigrew/pythonII-guided-practice
Description: None
created_at: 2020-06-08T21:38:42Z
updated_at: 2020-06-09T22:02:48Z
pushed_at: 2020-06-09T22:02:45Z
Language: Python
URL: https://github.com/spettigrew/pythonII-guided-practice
Forks: 0
Stars: 0
Topics: 
README:



File: 306_Manish8264_PYTHON-BANKING-SYSTEM.txt
Full Name: Manish8264/PYTHON-BANKING-SYSTEM
Description: None
created_at: 2022-05-05T06:07:38Z
updated_at: 2022-05-05T06:10:04Z
pushed_at: 2022-09-27T15:50:05Z
Language: Python
URL: https://github.com/Manish8264/PYTHON-BANKING-SYSTEM
Forks: 0
Stars: 0
Topics: 
README:



File: 307_jugani_hackerrank-python.txt
Full Name: jugani/hackerrank-python
Description: None
created_at: 2020-01-18T11:49:19Z
updated_at: 2020-01-19T05:54:38Z
pushed_at: 2020-01-19T05:54:36Z
Language: Python
URL: https://github.com/jugani/hackerrank-python
Forks: 0
Stars: 0
Topics: 
README:
# hackerrank-python problems



File: 30_marinawu_pythonlearning.txt
Full Name: marinawu/pythonlearning
Description: None
created_at: 2020-06-18T07:57:51Z
updated_at: 2020-06-18T07:57:51Z
pushed_at: 2020-06-18T07:57:52Z
Language: None
URL: https://github.com/marinawu/pythonlearning
Forks: 0
Stars: 0
Topics: 
README:



File: 311_walera01_pythonProject2.txt
Full Name: walera01/pythonProject2
Description: None
created_at: 2022-04-21T17:33:19Z
updated_at: 2022-04-21T17:33:19Z
pushed_at: 2022-04-21T17:33:20Z
Language: None
URL: https://github.com/walera01/pythonProject2
Forks: 0
Stars: 0
Topics: 
README:



File: 312_srinivasan95009_python-3.txt
Full Name: srinivasan95009/python-3
Description: None
created_at: 2019-02-05T09:55:16Z
updated_at: 2019-02-05T09:55:18Z
pushed_at: 2019-02-05T09:55:17Z
Language: None
URL: https://github.com/srinivasan95009/python-3
Forks: 0
Stars: 0
Topics: 
README:
# python-3


File: 316_python03_719.txt
Full Name: python03/719
Description: None
created_at: 2021-04-20T13:22:49Z
updated_at: 2021-04-20T13:22:52Z
pushed_at: 2021-04-22T13:57:31Z
Language: None
URL: https://github.com/python03/719
Forks: 0
Stars: 0
Topics: 
README:
# 719


File: 321_ZhenLiGit_Python-for-data-analysis.txt
Full Name: ZhenLiGit/Python-for-data-analysis
Description: None
created_at: 2018-09-11T11:05:16Z
updated_at: 2018-09-11T11:05:18Z
pushed_at: 2018-09-11T11:05:17Z
Language: None
URL: https://github.com/ZhenLiGit/Python-for-data-analysis
Forks: 0
Stars: 0
Topics: 
README:
# Python-for-data-analysis


File: 322_aceyang108_python20210425.txt
Full Name: aceyang108/python20210425
Description: None
created_at: 2021-04-25T01:52:26Z
updated_at: 2021-04-25T06:58:34Z
pushed_at: 2021-04-25T06:58:32Z
Language: Jupyter Notebook
URL: https://github.com/aceyang108/python20210425
Forks: 0
Stars: 0
Topics: 
README:
# python20210425


File: 323_yudai416_python_tools.txt
Full Name: yudai416/python_tools
Description: None
created_at: 2012-11-28T21:38:38Z
updated_at: 2013-10-26T16:31:03Z
pushed_at: 2012-11-28T21:53:12Z
Language: Python
URL: https://github.com/yudai416/python_tools
Forks: 0
Stars: 1
Topics: 
README:



File: 324_FedNick99_Python-Homework.txt
Full Name: FedNick99/Python-Homework
Description: None
created_at: 2022-10-12T06:05:44Z
updated_at: 2022-10-12T06:27:20Z
pushed_at: 2022-11-13T09:48:02Z
Language: Python
URL: https://github.com/FedNick99/Python-Homework
Forks: 0
Stars: 0
Topics: 
README:



File: 326_StanKozlov_python_course.txt
Full Name: StanKozlov/python_course
Description: None
created_at: 2015-09-05T13:40:47Z
updated_at: 2016-02-20T20:01:27Z
pushed_at: 2016-05-22T09:09:40Z
Language: Python
URL: https://github.com/StanKozlov/python_course
Forks: 0
Stars: 0
Topics: 
README:
﻿# python_course
Quack Quack
Kozlov Stanislav



File: 327_pythonontheplane123_API_hastag_generation.txt
Full Name: pythonontheplane123/API_hastag_generation
Description: None
created_at: 2022-10-01T11:17:55Z
updated_at: 2023-11-08T14:20:01Z
pushed_at: 2022-10-01T11:23:28Z
Language: None
URL: https://github.com/pythonontheplane123/API_hastag_generation
Forks: 0
Stars: 0
Topics: 
README:
# API_hastag_generation



File: 328_AnupamJuniwal_test-lambda-python-VulnerableApp.txt
Full Name: AnupamJuniwal/test-lambda-python-VulnerableApp
Description: None
created_at: 2021-07-03T08:44:22Z
updated_at: 2021-09-23T06:56:21Z
pushed_at: 2021-09-23T06:56:19Z
Language: Python
URL: https://github.com/AnupamJuniwal/test-lambda-python-VulnerableApp
Forks: 0
Stars: 0
Topics: 
README:
# test-lambda-python

This project contains source code and supporting files for a serverless application that you can deploy with the SAM CLI. It includes the following files and folders.

- hello_world - Code for the application's Lambda function.
- events - Invocation events that you can use to invoke the function.
- tests - Unit tests for the application code. 
- template.yaml - A template that defines the application's AWS resources.

The application uses several AWS resources, including Lambda functions and an API Gateway API. These resources are defined in the `template.yaml` file in this project. You can update the template to add AWS resources through the same deployment process that updates your application code.

If you prefer to use an integrated development environment (IDE) to build and test your application, you can use the AWS Toolkit.  
The AWS Toolkit is an open source plug-in for popular IDEs that uses the SAM CLI to build and deploy serverless applications on AWS. The AWS Toolkit also adds a simplified step-through debugging experience for Lambda function code. See the following links to get started.

* [CLion](https://docs.aws.amazon.com/toolkit-for-jetbrains/latest/userguide/welcome.html)
* [GoLand](https://docs.aws.amazon.com/toolkit-for-jetbrains/latest/userguide/welcome.html)
* [IntelliJ](https://docs.aws.amazon.com/toolkit-for-jetbrains/latest/userguide/welcome.html)
* [WebStorm](https://docs.aws.amazon.com/toolkit-for-jetbrains/latest/userguide/welcome.html)
* [Rider](https://docs.aws.amazon.com/toolkit-for-jetbrains/latest/userguide/welcome.html)
* [PhpStorm](https://docs.aws.amazon.com/toolkit-for-jetbrains/latest/userguide/welcome.html)
* [PyCharm](https://docs.aws.amazon.com/toolkit-for-jetbrains/latest/userguide/welcome.html)
* [RubyMine](https://docs.aws.amazon.com/toolkit-for-jetbrains/latest/userguide/welcome.html)
* [DataGrip](https://docs.aws.amazon.com/toolkit-for-jetbrains/latest/userguide/welcome.html)
* [VS Code](https://docs.aws.amazon.com/toolkit-for-vscode/latest/userguide/welcome.html)
* [Visual Studio](https://docs.aws.amazon.com/toolkit-for-visual-studio/latest/user-guide/welcome.html)

## Deploy the sample application

The Serverless Application Model Command Line Interface (SAM CLI) is an extension of the AWS CLI that adds functionality for building and testing Lambda applications. It uses Docker to run your functions in an Amazon Linux environment that matches Lambda. It can also emulate your application's build environment and API.

To use the SAM CLI, you need the following tools.

* SAM CLI - [Install the SAM CLI](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html)
* [Python 3 installed](https://www.python.org/downloads/)
* Docker - [Install Docker community edition](https://hub.docker.com/search/?type=edition&offering=community)

To build and deploy your application for the first time, run the following in your shell:

```bash
sam build --use-container
sam deploy --guided
```

The first command will build the source of your application. The second command will package and deploy your application to AWS, with a series of prompts:

* **Stack Name**: The name of the stack to deploy to CloudFormation. This should be unique to your account and region, and a good starting point would be something matching your project name.
* **AWS Region**: The AWS region you want to deploy your app to.
* **Confirm changes before deploy**: If set to yes, any change sets will be shown to you before execution for manual review. If set to no, the AWS SAM CLI will automatically deploy application changes.
* **Allow SAM CLI IAM role creation**: Many AWS SAM templates, including this example, create AWS IAM roles required for the AWS Lambda function(s) included to access AWS services. By default, these are scoped down to minimum required permissions. To deploy an AWS CloudFormation stack which creates or modifies IAM roles, the `CAPABILITY_IAM` value for `capabilities` must be provided. If permission isn't provided through this prompt, to deploy this example you must explicitly pass `--capabilities CAPABILITY_IAM` to the `sam deploy` command.
* **Save arguments to samconfig.toml**: If set to yes, your choices will be saved to a configuration file inside the project, so that in the future you can just re-run `sam deploy` without parameters to deploy changes to your application.

You can find your API Gateway Endpoint URL in the output values displayed after deployment.

## Use the SAM CLI to build and test locally

Build your application with the `sam build --use-container` command.

```bash
test-lambda-python$ sam build --use-container
```

The SAM CLI installs dependencies defined in `hello_world/requirements.txt`, creates a deployment package, and saves it in the `.aws-sam/build` folder.

Test a single function by invoking it directly with a test event. An event is a JSON document that represents the input that the function receives from the event source. Test events are included in the `events` folder in this project.

Run functions locally and invoke them with the `sam local invoke` command.

```bash
test-lambda-python$ sam local invoke HelloWorldFunction --event events/event.json
```

The SAM CLI can also emulate your application's API. Use the `sam local start-api` to run the API locally on port 3000.

```bash
test-lambda-python$ sam local start-api
test-lambda-python$ curl http://localhost:3000/
```

The SAM CLI reads the application template to determine the API's routes and the functions that they invoke. The `Events` property on each function's definition includes the route and method for each path.

```yaml
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
```

## Add a resource to your application
The application template uses AWS Serverless Application Model (AWS SAM) to define application resources. AWS SAM is an extension of AWS CloudFormation with a simpler syntax for configuring common serverless application resources such as functions, triggers, and APIs. For resources not included in [the SAM specification](https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md), you can use standard [AWS CloudFormation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) resource types.

## Fetch, tail, and filter Lambda function logs

To simplify troubleshooting, SAM CLI has a command called `sam logs`. `sam logs` lets you fetch logs generated by your deployed Lambda function from the command line. In addition to printing the logs on the terminal, this command has several nifty features to help you quickly find the bug.

`NOTE`: This command works for all AWS Lambda functions; not just the ones you deploy using SAM.

```bash
test-lambda-python$ sam logs -n HelloWorldFunction --stack-name test-lambda-python --tail
```

You can find more information and examples about filtering Lambda function logs in the [SAM CLI Documentation](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-logging.html).

## Unit tests

Tests are defined in the `tests` folder in this project. Use PIP to install the [pytest](https://docs.pytest.org/en/latest/) and run unit tests.

```bash
test-lambda-python$ pip install pytest pytest-mock --user
test-lambda-python$ python -m pytest tests/ -v
```

## Cleanup

To delete the sample application that you created, use the AWS CLI. Assuming you used your project name for the stack name, you can run the following:

```bash
aws cloudformation delete-stack --stack-name test-lambda-python
```

## Resources

See the [AWS SAM developer guide](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html) for an introduction to SAM specification, the SAM CLI, and serverless application concepts.

Next, you can use AWS Serverless Application Repository to deploy ready to use Apps that go beyond hello world samples and learn how authors developed their applications: [AWS Serverless Application Repository main page](https://aws.amazon.com/serverless/serverlessrepo/)



File: 331_okta-hanif_workshop-python.txt
Full Name: okta-hanif/workshop-python
Description: None
created_at: 2021-02-09T02:07:43Z
updated_at: 2021-06-14T10:11:48Z
pushed_at: 2021-06-14T10:11:43Z
Language: Python
URL: https://github.com/okta-hanif/workshop-python
Forks: 0
Stars: 0
Topics: 
README:



File: 338_Isaac-Malin_Python-Story.txt
Full Name: Isaac-Malin/Python-Story
Description: None
created_at: 2022-09-09T18:55:34Z
updated_at: 2022-09-09T18:56:10Z
pushed_at: 2022-09-09T18:56:06Z
Language: Python
URL: https://github.com/Isaac-Malin/Python-Story
Forks: 0
Stars: 0
Topics: 
README:
﻿# Python-Story




File: 339_LAKSHYNAGORI_Constructors_in_python.txt
Full Name: LAKSHYNAGORI/Constructors_in_python
Description: None
created_at: 2022-11-25T08:24:46Z
updated_at: 2022-11-25T08:27:15Z
pushed_at: 2022-11-25T13:56:52Z
Language: Jupyter Notebook
URL: https://github.com/LAKSHYNAGORI/Constructors_in_python
Forks: 0
Stars: 0
Topics: 
README:
# Constructors



File: 345_shuty-dev_docker-python-http-server.txt
Full Name: shuty-dev/docker-python-http-server
Description: None
created_at: 2020-11-04T02:14:54Z
updated_at: 2020-11-04T02:23:52Z
pushed_at: 2020-11-04T02:23:50Z
Language: HTML
URL: https://github.com/shuty-dev/docker-python-http-server
Forks: 0
Stars: 0
Topics: 
README:
# docker-python-http-server

## start
```
$ docker-compose build
$ docker-compose up -d
$ docker exec -it CONTAINER_ID /bin/bash
# python3 -m http.server
```

## stop
```
$ docker-compose stop
```


File: 346_devanghingu_exercism_io_and_other_python_practice.txt
Full Name: devanghingu/exercism_io_and_other_python_practice
Description: None
created_at: 2019-12-31T11:52:28Z
updated_at: 2020-04-09T14:00:39Z
pushed_at: 2020-04-09T14:00:37Z
Language: Python
URL: https://github.com/devanghingu/exercism_io_and_other_python_practice
Forks: 0
Stars: 1
Topics: 
README:



File: 347_HARIKABANDARU_ToFetchGraphAPI-Python.txt
Full Name: HARIKABANDARU/ToFetchGraphAPI-Python
Description: None
created_at: 2017-12-07T21:44:13Z
updated_at: 2017-12-07T21:44:13Z
pushed_at: 2017-12-07T21:44:14Z
Language: None
URL: https://github.com/HARIKABANDARU/ToFetchGraphAPI-Python
Forks: 0
Stars: 0
Topics: 
README:



File: 348_mengyan123_Python.txt
Full Name: mengyan123/Python
Description: None
created_at: 2017-11-07T05:46:24Z
updated_at: 2017-11-07T05:46:24Z
pushed_at: 2017-11-07T05:46:25Z
Language: None
URL: https://github.com/mengyan123/Python
Forks: 0
Stars: 0
Topics: 
README:



File: 34_Pravin-Selvaranjan_python_api.txt
Full Name: Pravin-Selvaranjan/python_api
Description: None
created_at: 2022-08-09T08:59:16Z
updated_at: 2022-08-09T09:27:45Z
pushed_at: 2022-08-10T09:58:35Z
Language: Python
URL: https://github.com/Pravin-Selvaranjan/python_api
Forks: 0
Stars: 0
Topics: 
README:
# Python API

![Blankdiagram](https://user-images.githubusercontent.com/110179866/183619804-af74bf6b-ab0d-4ef4-828f-8b4bc9b7b70c.jpeg)



## What is an API
### Benefits of API
#### Install requests

- Pip install package_name "pip install requests"
pip install requests
```
import requests

r = requests.get("https://www.bbc.co.uk/")
print(r.status_code)
```



import requests

r = requests.get("https://www.bbc.co.uk/iplayer/live/bbws")
print(r.status_code)


- if the web page is live welcome the user with the status code

- r print a message OOPs something went wrong


- if r.status_code == 200:   # if true execute the next line - if false execute the next block
```
print(f"The status code is {r.status_code} the website is live")
#     print(type(r.content)) # get the content from the web-app/endpoint
#     # find a way to change this type to json or dict or list or any type which we could
#     # iterate through with loops
#
# elif r.status_code == 404:
#     print(f"The site is unavailable until further notice the status code is {r.status_code}")
#
# else:
#     print(f"OOPs something went wrong the status code is {r} please try later")
#
#
# # should give us the status code only - numbers 200 -404 - 501 etc
```

## Second iteration

```
if r:
    print("success")  # what is it checking
elif r.status_code == 404:         # what is it checking
    print("unsuccessful")
else:                             # what is it checking
    print (f"OOPS something went wrong please try later the status code is {r.status_code}")
```

## Third iteration

```
# Third iteration
# Create a function that returns the status code with appropriate message
# use control flow to make the right decision
# USE RETURN not print inside your function

def api_function():
    if r:
        return "success"
    elif r.status_code == 404:
        return "unsuccessful"
    else:
        return f"OOPS something went wrong please try later the status code is {r.status_code}"



bbc_test = api_function()


print (bbc_test)
```


# Postcode API 
```
# import the required package
import requests
# valid postcode or invalid - url of the API address
url = "http://api.postcodes.io/postcodes/"
# store the data


postcode = input("Insert your postcode here: ")

# display the outcome
url_Arg = url + postcode # ("http://api.postcodes.io/postcodes/kt13rs"
r = requests.get(url_Arg)
# print(r.status_code)
r_dict = r.json()
result_dict = r_dict["result"]

print(r_dict)
for key in result_dict.keys():
    if key == "postcode":
        print(f"Please confirm this is your postcode {result_dict[key]}")# enter values/key that would print the postcode


print(r_dict)
for key in result_dict.keys():
    if key == "longitude":
        print(f"This is your longitude {result_dict[key]}")

    elif key == "latitude":
        print(f"This is you latitude {result_dict[key]}")
        
        
```     
- display url together with given postcode


- check the type of data scraped from the web - responses

- convert data type if needed to iterate through the data and print required information


- display longitude and latitude - postcode etc.
- once completed - create a function to do return the required value - 1 function ust only return 1 value
- create a function that checks if the post code is valid - prompt the user to input the postcode
- create a class with all of these functions
- create a file called postcode_checker.py
- import this file and class
- call these functions in postcode_checker.py
- def postcode_validity():


File: 350_tkruh_python_behave_test_task.txt
Full Name: tkruh/python_behave_test_task
Description: None
created_at: 2020-08-24T19:24:06Z
updated_at: 2022-08-28T13:20:41Z
pushed_at: 2022-10-18T12:13:45Z
Language: Python
URL: https://github.com/tkruh/python_behave_test_task
Forks: 0
Stars: 0
Topics: 
README:
# python_behave_test_task
<p>The main goal of this repository is to provide automated tests using BDD framework Behave for
<a href="http://automationpractice.com/"></a> e-commerce platform.</p>
<h2>Usage of automated tests</h2>
<p>Please use Python version <code>3.6</code> or greater for the test execution.</p>
<p>Before running any command, please install required Python's dependencies with</p>
<div><pre>pip install -r requirements.txt</pre></div>
<p>Use command below to run all tests.</p>
<div><pre>behave</pre></div>



File: 353_zhenyang9261_data-homework-python.txt
Full Name: zhenyang9261/data-homework-python
Description: None
created_at: 2018-12-09T02:49:30Z
updated_at: 2019-03-21T02:21:50Z
pushed_at: 2018-12-14T03:27:20Z
Language: Python
URL: https://github.com/zhenyang9261/data-homework-python
Forks: 0
Stars: 0
Topics: 
README:
# python-challenge


File: 359_jnt9000_Python_Grad.txt
Full Name: jnt9000/Python_Grad
Description: None
created_at: 2021-10-08T02:16:16Z
updated_at: 2021-12-10T04:16:43Z
pushed_at: 2021-12-10T04:16:40Z
Language: Python
URL: https://github.com/jnt9000/Python_Grad
Forks: 0
Stars: 0
Topics: 
README:



File: 362_izzyevermore_sending-emails-using-python.txt
Full Name: izzyevermore/sending-emails-using-python
Description: None
created_at: 2020-11-11T14:42:16Z
updated_at: 2020-11-13T07:32:47Z
pushed_at: 2020-11-13T07:32:45Z
Language: Python
URL: https://github.com/izzyevermore/sending-emails-using-python
Forks: 0
Stars: 0
Topics: 
README:



File: 364_rupneilsaharoy_Python_Bootcamp_Codes.txt
Full Name: rupneilsaharoy/Python_Bootcamp_Codes
Description: None
created_at: 2020-11-08T15:49:14Z
updated_at: 2020-11-08T16:41:27Z
pushed_at: 2020-11-08T16:41:25Z
Language: Jupyter Notebook
URL: https://github.com/rupneilsaharoy/Python_Bootcamp_Codes
Forks: 0
Stars: 0
Topics: 
README:
This is a list of examples in jupyter notebooks which I have compiled when I was doing the python bootcamp course "Complete Python Bootcamp- Go from zero to hero in Python 3" from Udemy.



File: 366_Margaret-booklover_python.txt
Full Name: Margaret-booklover/python
Description: None
created_at: 2022-08-30T19:42:48Z
updated_at: 2022-08-30T19:46:02Z
pushed_at: 2022-08-30T19:45:59Z
Language: Python
URL: https://github.com/Margaret-booklover/python
Forks: 0
Stars: 0
Topics: 
README:



File: 367_amrawni33_python-project.txt
Full Name: amrawni33/python-project
Description: None
created_at: 2022-08-11T13:21:14Z
updated_at: 2022-08-11T13:24:10Z
pushed_at: 2022-08-12T12:45:24Z
Language: Python
URL: https://github.com/amrawni33/python-project
Forks: 0
Stars: 0
Topics: 
README:



File: 369_jonatan52_Python_Sesion_5_Ejercicios_1_2_3.txt
Full Name: jonatan52/Python_Sesion_5_Ejercicios_1_2_3
Description: None
created_at: 2022-05-05T21:55:25Z
updated_at: 2022-05-05T21:57:59Z
pushed_at: 2022-05-05T21:57:56Z
Language: Python
URL: https://github.com/jonatan52/Python_Sesion_5_Ejercicios_1_2_3
Forks: 0
Stars: 0
Topics: 
README:



File: 36_onionmccabbage_python_Feb-Mar_2022.txt
Full Name: onionmccabbage/python_Feb-Mar_2022
Description: None
created_at: 2022-02-25T11:05:11Z
updated_at: 2022-02-28T13:33:07Z
pushed_at: 2022-03-02T16:07:40Z
Language: Python
URL: https://github.com/onionmccabbage/python_Feb-Mar_2022
Forks: 0
Stars: 0
Topics: 
README:



File: 374_Ahsan5313_Drawing-Flowers-in-Python.txt
Full Name: Ahsan5313/Drawing-Flowers-in-Python
Description: None
created_at: 2021-08-01T15:31:58Z
updated_at: 2021-08-01T15:32:17Z
pushed_at: 2021-08-01T15:32:15Z
Language: Python
URL: https://github.com/Ahsan5313/Drawing-Flowers-in-Python
Forks: 0
Stars: 0
Topics: 
README:



File: 375_GameCap_python.txt
Full Name: GameCap/python
Description: None
created_at: 2020-09-24T16:36:43Z
updated_at: 2020-12-23T16:31:42Z
pushed_at: 2020-12-23T16:31:40Z
Language: Python
URL: https://github.com/GameCap/python
Forks: 1
Stars: 0
Topics: 
README:



File: 378_ACubero_pythonUdemy.txt
Full Name: ACubero/pythonUdemy
Description: None
created_at: 2020-10-31T17:58:50Z
updated_at: 2024-02-10T08:57:12Z
pushed_at: 2024-02-10T09:01:05Z
Language: Python
URL: https://github.com/ACubero/pythonUdemy
Forks: 0
Stars: 0
Topics: 
README:
# pythonUdemy


File: 379_shaikh-vasim_Data-Science-Advanced-Python-internship-assignment-.txt
Full Name: shaikh-vasim/Data-Science-Advanced-Python-internship-assignment-
Description: None
created_at: 2021-01-06T09:58:54Z
updated_at: 2021-01-06T11:32:49Z
pushed_at: 2021-01-06T11:32:46Z
Language: Jupyter Notebook
URL: https://github.com/shaikh-vasim/Data-Science-Advanced-Python-internship-assignment-
Forks: 0
Stars: 0
Topics: 
README:



File: 37_vilemsonsdavis_Snake-Game-python.txt
Full Name: vilemsonsdavis/Snake-Game-python
Description: None
created_at: 2019-08-03T12:26:23Z
updated_at: 2019-08-12T16:10:32Z
pushed_at: 2019-08-12T16:10:30Z
Language: Python
URL: https://github.com/vilemsonsdavis/Snake-Game-python
Forks: 0
Stars: 0
Topics: 
README:



File: 380_taweechoke_PythonThai.txt
Full Name: taweechoke/PythonThai
Description: None
created_at: 2017-05-25T06:29:10Z
updated_at: 2017-05-25T06:29:10Z
pushed_at: 2017-05-25T06:29:23Z
Language: None
URL: https://github.com/taweechoke/PythonThai
Forks: 0
Stars: 0
Topics: 
README:
# แหล่งเรียนรู้ด้านคอมพิวเตอร์ ฟรี (เน้นภาษาไทย)

เรียนอย่างนี้นะครับว่า ตั้งแต่ผมทำเพจ facebook มา ก็ได้แชร์ลิงค์ต่างๆ ที่เป็นความรู้ไว้เยอะมาก จึงรู้ว่าความรู้ที่คนไทยเผยแพร่มีเยอะ แต่ปัญหาใหญ่เวลาโพสต์บนเพจ มันไล่หายาก สะเปะสะปะ ไม่เป็นระเบียบ ผมเลยถือโอกาสจัดรวบรวมเท่าที่ทำได้ เพื่อให้ค้นหาได้ง่ายหน่อย __ต่อไปก็จะมีเพิ่มขึ้นเรื่อยๆ ไม่ได้หยุดเท่านี้ ถ้าหาเจอนะ__ 

> ใครมีอะไรแนะนำก็แตก Branch แล้ว commit มาได้เลยครับ ถ้าเห็นมีประโยชน์เดี่ยว merge ให้ หรือใครไม่สะดวกก็ทัก inbox มาที่เพจ [แฟนเพจ](https://www.facebook.com/programmerthai/)

แหล่งเรียนรู้ส่วนใหญ่ ก็จะเป็น e-book, วีดีโอ, เน้นไปที่ __ภาษาไทย__ เป็นหลัก เหมาะกับผู้ศึกษาศาสตร์ทางคอมพิวเตอร์เริ่มต้น ที่ภาษาอังกฤษอาจยังไม่แข็งแรงมากนัก โดยเน้นไปทางการเขียนโปรแกรมเป็นหลัก แต่ก็มีภาษาอังกฤษด้วย เผื่อคนสนใจ

# สารบัญ

* [หนังสือ Ebooks ฟรี ภาษาไทย](#หนังสือ-ebooks-ฟรี-ภาษาไทย)
* [รวมลิงค์ Text book ฟรี](#รวมลิงค์-text-book-ฟรี)
* [วีดีโอสอนเป็นภาษาไทย](#วีดีโอสอนฟรีเป์นภาษาไทย)
* [บทความเจ๋งๆ เห็นแล้วร้องว้าว](#บทความเจ๋งๆ-เห็นแล้วร้องว้าว)
* [วีดีโอสอนเป็นภาษาอังกฤษ](#วีดีโอสอนเป็นภาษาอังกฤษ)
* [คอร์สเรียนฟรีจากทั่วโลก](##คอร์สเรียนฟรีจากทั่วโลก)
* [แหล่งความรู้อื่นๆ](#แหล่งความรู้อื่นๆ)
* [แนะนำกลุ่ม facebook](#แนะนำกลุ่ม-facebook)

## หนังสือ Ebooks ฟรี ภาษาไทย

** **หนังสือบางเล่มต้องสมัครเป็นสมาชิก www.ebooks.in.th ก่อนถึงจะโหลดได้**

### JavaScript

* [รีวีวจาวาสคริปต์ (JavaScript) ECMAScript 2016 (ES7) กับ ECMAScript 2017 (ES8) ซึ่งต่อยอดมาจาก ECMAScript 2015 (ES6)](http://www.ebooks.in.th/ebook/40184/รีวีวฟรีเจอร์ใหม่ในจาวาสคริปต์_(JavaScript)_มาตรฐาน_ES7__ES8__(ECMAScript_2016_กับ_ECMAScript_2017)/)
* [วิธีติดตั้ง_Node.js_และ_npm_เบื้องต้น (Node.js เวอร์ชั่น 6)](http://ebooks.in.th/ebook/37385/วิธีติดตั้ง_Node.js_และ_npm_เบื้องต้น/)
* [Node.js เล่ม 1](http://www.ebooks.in.th/ebook/37714/เสียดายไม่ได้อ่าน_จาวาสคริปต์ฝั่งเซิร์ฟเวอร์_Node.js_(ฉบับย่อ)/)
* [Node.js กับ 2](http://www.ebooks.in.th/ebook/37836/เสียดายไม่ได้อ่าน_จาวาสคริปต์ฝั่งเซิร์ฟเวอร์_Node.js_ฉบับย่อ_เล่ม2)
* [JavaScript เขียนโดยคุณ กฤษณวัฒน์ แก้วแสนเมือง](https://www.dropbox.com/s/tb0ydw695pw2ppx/javscript%20the%20complete%20referrence.pdf?dl=0)
* [แปลคู่มือ meteor ซึ่งมันเป็นแพทลฟอร์มเอาไว้ใช้สร้างเว็บแอพแบบเรียลไทม์พร้อมทั้ง build เป็นโมบายแอพได้ด้วย โดยใช้ภาษาจาวาสคริปต์เป็นหลักในการพัฒนา](http://th.discovermeteor.com/pdf)
* [เกมง่ายๆแบบ HTA ด้วย JavaScript เขียนโดย ธรรมรัตน์ พรหมพิงค์](http://www.ebooks.in.th/ebook/34499/เกมง่ายๆแบบ_HTA_ด้วย_JavaScript/)
* [Angular 1 เวอร์ชั่นเก่าหน่อย เพราะปัจจุบันเป็น Angular 2 เขียนโดย ถาวร ศรีเสนพิลา](http://www.javathailand.com/downloads/AngularJS-Basic-to-Professional-Full.pdf)
* [คู่มือการใช้งาน javascript เบื้องต้น javascript the complete reference เขียนโดย กฤษณวัฒน์ แก้วแสน](http://ebooks.in.th/ebook/42309/คู่มือการใช้งาน_javascript_เบื้องต้น_javascript_the_complete_reference/)

### HTML and CSS

* [คู่มือการใช้งาน Css The Complete Reference ฉบับสมบูรณ์ เวอร์ชัน beta เขียนโดยคุณ กฤษณวัฒน์ แก้วแสนเมือง](http://ebooks.in.th/ebook/42293/คู่มือการใช้งาน_Css_The_Complete_Reference__ฉบับสมบูรณ์_เวอร์ชัน_beta/)
* [คู่มือการใช้งาน HTML ฉบับสมบูรณ์ เวอร์ชัน beta เขียนโดยคุณ กฤษณวัฒน์ แก้วแสน](http://ebooks.in.th/ebook/41953/คู่มือการใช้งาน_HTML_ฉบับสมบูรณ์_เวอร์ชัน_beta/)

### PHP

* [PHP The Right Way (เป็นเว็บ)](https://apzentral.github.io/php-the-right-way/)
* [คู่มือการใช้งาน php ฟังก์ชันพื้นฐานกว่า 400+ คำสั่ง PHP เขียนโดยคุณ กฤษณวัฒน์ แก้วแสน](http://ebooks.in.th/ebook/41630/คู่มือการใช้งาน_php_ฟังก์ชันพื้นฐานกว่า_400__คำสั่ง/)
* [Laravel 4 เฟรมเวิร์คฝั่ง php (ฉบับแปล) ปัจจุบันเวอร์ชั่น 5 แล้ว  เขียนโดย กฤษณวัฒน์ แก้วแสน](https://leanpub.com/thailaraveldoc/read)
* [ตัวอย่าง คู่มือการใช้งาน Yii 2 พื้นฐาน ฉบับอ้างอิงจาก document หลัก เขียนโดย กฤษณวัฒน์ แก้วแสน](http://ebooks.in.th/ebook/43090/%5Bตัวอย่าง%5D_คู่มือการใช้งาน_Yii_2_พื้นฐาน_ฉบับอ้างอิงจาก_document_หลัก/)
* [เขียนเว็บให้เด็ดดวงด้วย_PHP ของคุณ สุทัศน์ คำลือ](http://www.ebooks.in.th/ebook/280/เขียนเว็บให้เด็ดดวงด้วย_PHP)


### Java and Android

* [หนังสือ Java ผู้เขียนเป็นใครไม่รู้ (รู้ว่าเป็นของลาดกระบัง) เนื้อหาค่อนข้างเก่าหน่อยนะครับ เพราะตอนนี้มัน Java 8 ปีหน้าก็เป็น Java 9 แล้ว](http://drucs.com/index.php?action=dlattach;topic=344.0;attach=95)
* [คู่มืออบรมการพัฒนาโปรแกรมแอนดรอยด์ ขั้นพื้นฐาน เขียนโดย มาสเตอร์ อึ่ง](http://www.ebooks.in.th/ebook/4188/คู่มืออบรมการพัฒนาโปรแกรมแอนดรอยด์_ขั้นพื้นฐาน/)
* [Advance android on mySQL&SQLite เขียนโดย มาสเตอร์อึ่ง](http://banbanbook.com/banbanbook/cart/get_detail_book/1266)
* [Advance Android on Database เขียนโดย มาสเตอร์อึ่ง](https://drive.google.com/file/d/0BxPdSFnhyBbINTJXRXRvTEhhYWM/view) หรือใช้ลิงค์ http://banbanbook.com/banbanbook/cart/get_detail_book/1452
* [Android SQLite Basics โดยอาจารย์ พร้อมเลิศ หล่อวิจิตร](https://drive.google.com/file/d/0B5Jeui5joR5TdjQ2TEstTWVMSnM/view?pref=2&pli=1)
* [รวยด้วยเกมส์ Android เขียนโดย บุญนาท สุวรรณศรี](http://banbanbook.com/banbanbook/cart/get_detail_book/1437)
* [Work Shop Android TV Online เขียนโดย ไอ้มั่ว แห่ง BanbanSoft](http://banbanbook.com/banbanbook/cart/get_detail_book/1455)

### C and C++

* [สอน C และ C++ เนื้อหาเก่าหน่อย เพราะเดี่ยวมาตรฐานตัวใหม่ก็ออกมา C++ 17](http://lovelywal.exteen.com/20080517/e-book-c-c)
* [การเขียนโปรแกรมภาษาซี (เก่าหน่อยตั้งแต่ปี 2545) เขียนโดย วิจักษณ์ ศรีสัจจะเลิศวาจา และดุษฎี ประเสริฐธิติพงษ์](http://61.7.241.229/CProgrammingV2.pdf)

### Swift and IOS

* [Thai Swift เขียนโดย Tanasak Tantitarntong (เนื้อหาเก่าหน่อย เพราะอนาคตก็ Swift 3 แหละ)](https://leanpub.com/ThaiSwift)
* [คู่มืออบรม เขียนโปรแกรมบน IOS ด้วยภาษา Swift เขียนโดย มาสเตอร์ อึ่ง](https://docs.google.com/file/d/0BxPdSFnhyBbIaHJ3NHFrNS1IV0E/edit?pref=2&pli=1)

### Python

* [หนังสือเชียวชาญการเขียนโปรแกรมด้วยไพธอน (Python) ของอาจารย์ ผศ. สุชาติ คุ้มมะณี - ขอแนะนำเล่มนี้เลย](https://isan.msu.ac.th/suchart/ProgrammingExpertwithPython.pdf)

### ภาษาโปรแกรมอื่นๆ 

* [ภาษาโกวเล้ง Go เขียนโดย http://golang.in.th/](http://www.patanasongsivilai.com/blog/golang/)

### UNIX

* [หนังสือ Fundamentals of UNIX ฟรี ของอาจารย์ ผศ. สุชาติ คุ้มมะณี](https://isan.msu.ac.th/suchart/Unix/FundaOfUnix.pdf)

### Server and Network

* [หนังสือ Network How to ของอาจารย์ ผศ. สุชาติ คุ้มมะณี](https://isan.msu.ac.th/suchart/NetworkHowTo/NetworkHowTo.pdf)
* [วิดีโอ work shop ของอาจารย์ ผศ. สุชาติ คุ้มมะณี](https://isan.msu.ac.th/suchart/NetworkHowTo/Workshop/)
* [ตัวอย่าง LAB ของอาจารย์ ผศ. สุชาติ คุ้มมะณี](https://isan.msu.ac.th/suchart/NetworkHowTo/LAB/)
* [คู่มือฝึกอบรมปฏิบัติการ Linux Server Security เขียนโดย บุญลือ อยู่คงคง](http://ebooks.in.th/ebook/584/คู่มือฝึกอบรมปฏิบัติการ_Linux_Server_Security/)
* [คู่มือพลเมืองเน็ต: เข้าใจเน็ต และใช้เน็ตให้ปลอดภัย เขียนโดย วสันต์ ลิ่วลมไพศาล และ สฤณี อาชวานันทกุล](https://thainetizen.org/wp-content/uploads/2013/05/netizen-handbook-201304.pdf)
* [คู่มือการใช้งาน WiNginx เขียนโดย Suparat triamchanchai](http://www.ebooks.in.th/ebook/28367/คู่มือการใช้งาน_WiNginx/)
* [E-Book เกี่ยวกับ Introduction To MS. Azure สำหรับท่านที่สนใจเรื่อง Cloud โดยเฉพาะ Microsoft Azure 
เขียนโดย ITGeist 5 (By Wisit) | itgeist5blog.blogspot.com](
https://1drv.ms/f/s!An_wkWqol3F3kLhKSF1wl62SOIo8aA)


### Database

* [การใช้งาน_MongoDB_เบื้องต้น](http://www.ebooks.in.th/ebook/37861/การใช้งาน_MongoDB_เบื้องต้น/)

### IoT (internet of things)  and Embedded system

* [Introduction to Wireless Sensor Networks-แนะนำเครือข่ายเซนเซอร์ไร้สาย เขียนโดย คุณ วรรณรัช สันติอมรทัต และ สกุณา เจริญปัญญาศักดิ์](http://www.nectec.or.th/news/news-public-document/introwsn.html)
* [Embedded Android Development สู่เส้นทางนักพัฒนา เขียนโดย วิรุฬห์ ศรีบริรักษ์ (อ.จอม)](https://docs.google.com/forms/d/14GNLWBJIkD2QmoJtpG7nbBHdLT7KBLsFHRn-plfzxtE/viewform)

### Software Engineer

* [แอจไจล์ซามูไร โดย www.agile66.com](https://www.dropbox.com/s/8vdift5avp6wa1d/AgileSamurai1.0.pdf?dl=0)

### AI, Data Mining และ Data science 

* [คู่มือการใช้งาน Weka Explorer (เอาไว้ใช้ทำ ( Data Mining ) เบื้องต้น เขียนโดย ดร. เอกสิทธิ์ พัชรวงศ์ศักดา]( http://dataminingtrend.com/2014/free-weka-book/)

### หนังสืออื่นๆ เกี่ยวกับคอม

* [แชร์ประสบการณ์เป็น Outsource](http://www.ebooks.in.th/ebook/33998/รวยด้วยอาชีพ_Outsource_(สายดำ)_ด้านซอฟแวร์)
* [คู่มือคอมพิวเตอร์ครอบจักรวาล ต้องใช้รหัสผ่าน PALMPALM -> ขอบคุณคณบดีคณะไอทม.นอร์ที ดร.เพชราวลัย ถิระวณัฐพงศ์](https://onedrive.live.com/?authkey=%21APypHxyKeJvHbyc&cid=5871AF3CC81C6493&id=5871AF3CC81C6493%217030&parId=root&action=locate)
* [หัดใช้ Command-line Interface เถอะ  เขียนโดย Korakot Rakhuang](https://leanpub.com/lets_learn_cli_right_now/read)
* [กว่าจะเป็นวิศวกรคอมพิวเตอร์ (Full version) เขียนโดย อนุภาค มาตรมูล](http://bit.ly/1q5giW0)
* [คู่มือการใช้_Git_บน_androidStudio.pdf  เขียนโดย มาสเตอร์อึ่ง](https://drive.google.com/file/d/0BxPdSFnhyBbIYVYtYnpsdDZzcjA/view)
* [หนังสือแปล : Startup Playbook โดย Sam Altman แปลโดย : กฤษฎา เฉลิมสุข](http://startupcto.net/หนังสือ-startup-playbook-แปลไทย/)
* [สร้างเว็บบล็อกด้วย Joomla 3 เขียนโดย มานิตย์ กริ่งรัมย์](http://ebooks.in.th/ebook/24083/สร้างเว็บบล็อกด้วย_Joomla_3/)
* [สนุกกับการเขียนโปรแกรมด้วย Scratch2 เขียนโดย ธรรมรัตน์ พรหมพิงค์](http://www.ebooks.in.th/ebook/34623/สนุกกับการเขียนโปรแกรมด้วย_Scratch2/)
* [คู่มือพื้นฐานใช้งาน Adobe Photoshop CS3 เขียนโดย มานิตย์ กริ่งรัมย์](http://ebooks.in.th/ebook/32514/คู่มือพื้นฐานใช้งาน_Adobe_Photoshop_CS3/)
* [Web Security - ความปลอดภัยของเว็บ ของ อาจารย์ Thawatchai Chomsiri](https://www.researchgate.net/publication/315943371_Web_Security_-_khwamplxdphaykhxngweb)
* [คู่มือ Cyber Security สำหรับประชาชน โดย กสทช.](http://www.muit.mahidol.ac.th/announcement/CyberSecurityPeople.pdf)

## รวมลิงค์ Text book ฟรี

* [คู่มือเตรียมสอบ Microsoft 70-410 เขียนโดย Brian Svidergol](https://start.netwrix.com/download/Guides/PDFdownload.php?pdf=study_guide_70-410_exam.pdf&h=ZAQH8pl1A)
* http://ebook-dl.com/computer
* [เว็บนี้จะมี ebook มาหมุนเวียนแจกฟรี ทั้งนี้เราต้องกดดาวน์โหลดให้ทันภาย 24 ชั่วโมง](https://www.packtpub.com/packt/offers/free-learning)
* [openstax.org เป็นแนวเลข วิทยาศาสตร์](https://openstax.org/)
* [Big Data, Data Science, Data Mining, Machine Learning, Python, R และอื่นๆ มากว่า 60 เล่ม](http://www.kdnuggets.com/2015/09/free-data-science-books.html)
* รายชื่อตำราฟรีของเว็บ packtpub.com อันนี้เป็นสาย Machine learning ตลอดรวมทั้ง  Data scientist
    * [สอนเขียน Neural Network ด้วยภาษา Java](https://www.packtpub.com/packt/free-ebook/neural-networks-java)
    * [สอนสร้างระบบ Machine learning ด้วยภาษา Python (เนื้อหาจะใช้ไลบรารี่พื้นฐาน เช่น Numpy, ScipY, scikit-learn และ Matplotlib )](https://www.packtpub.com/packt/free-ebook/python-machine-learning-algorithms)
    * [แนะนำ machine learning ออกไปแนวปฏิบัติ ใช้ Python (Anaconda) ในการอธิบายเนื้อหา](https://www.packtpub.com/packt/free-ebook/what-you-need-know-about-machine-learning)
    * [นำ machine learning ไปใช้ในงาน data-analysis](https://www.packtpub.com/packt/free-ebook/practical-data-analysis)

## วีดีโอสอนฟรีเป์นภาษาไทย

*** **บางลิงค์ต้องติดตั้ง iTune U ก่อนนะครัช ถึงจะดูได้ ให้โหลดโปรแกรมก่อนได้ที่**  
https://www.apple.com/th/support/itunes-u/using/ 

### PHP

* [Laravel  โดย SIPA](https://www.youtube.com/watch?v=C3vmNI5Whus&index=1&list=PLtM3znnbMbVUCSplQZ4Wl5KwOj6Inz__n)

### ภาษา C

* [ภาษา C โดย SIPA](https://www.youtube.com/watch?v=5HoW47BB9ME&list=PLpuOOb1LNswPrfGbihe4umjfmtAX8Ccwc)

### ภาษา C# 

* [โดย Kong Ruksiam](https://www.youtube.com/channel/UCB6eDEzpqpiaZnDMzoje57Q/playlists?sort=dd&view=50&shelf_id=1)

### Python

* [ภาษา Python โดย SIPA](https://www.youtube.com/watch?v=KcAX613khH4&list=PLtM3znnbMbVWZ1ICKEi7Gr9dxdJc_ppel)
*  [บทเรียนวิชาการเขียนโปรแกรมสำหรับนิสิต ปี 1 คณะวิศวกรรมศาสตร์ ภาคปลาย ปีการศึกษา 2558 (ใช้ Python เป็นพื้นฐาน) รหัสวิชา 2110101 Computer Programming (2558-2)  สอนโดยดร. สมชาย ประสิทธิ์จูตระกูล](https://www.youtube.com/playlist?list=PL0ROnaCzUGB4ieaQndKybT9xyoq2n9NGq)
* [Python โดย Clique Club - ชมรมคลิก ของจุฬา](https://www.youtube.com/playlist?list=PLVcky7_Sy_7ltVaI1WVIWDvit_DtgUYBw)
* [Python เบื้องต้นแบบรวบรัด 30 นาที](https://www.youtube.com/watch?v=UXJ_iogbivw)

### HTML5

* [สอน HTML เบื้องต้น ของคุณ Kong Ruksiam](https://www.youtube.com/watch?v=OU_bwaht7kM&list=PLEE74DyIkwElVMA4srMkyGn8ekDcQ8h2K)

### JavaScript

* [MEAN stack โดย SIPA](https://www.youtube.com/watch?v=bw6P10BKQ9M&list=PLtM3znnbMbVXD0fygCTsblC2sLZvSPY8g)
* [JavaScript เบื้องต้น ของคุณ Kong Ruksiam ](https://www.youtube.com/playlist?list=PLEE74DyIkwEkkj5Rizo01MUgFRfsi2hiV)
* [การใช้งาน JQuery (JavaScript Library) ของคุณ Kong Ruksiam](https://www.youtube.com/playlist?list=PLEE74DyIkwEnD_OUSB1MZxL3R0PgE94Fs)

### CSS

* [การใช้งาน Bootstrap (CSS FrameWork) ของคุณ Kong Ruksiam](https://www.youtube.com/playlist?list=PLEE74DyIkwEkdDtOOxRcPTDhiBvI7w5cg)

### Java

* [Java สอนโดย รศ.ดร.ประเสริฐ คณาวัฒนไชย](https://www.youtube.com/watch?v=xFvWZQdkLRM&list=PLoTScYm9O0GF26yW0zVc2rzjkygafsILN)
* การใช้ JPA ของภาษา Java  - เอาไว้ติดต่อฐานข้อมูลแบบ Object-Relational Mapping (ORM)
  - https://www.youtube.com/watch?v=MIXk5s0gg18 
  - https://www.youtube.com/watch?v=_DDsFVMs6mQ
* [การเขียนโปรแกรมด้วยภาษาจาวา โดย รศ.ดร.สมชาย ประสิทธิ์จูตระกูล](https://www.cp.eng.chula.ac.th/~somchai/ULearn/Programming/index.htm) สอนดีมาก พยายามใช้คำภาษาไทยเยอะสุดเพื่อไม่ให้คนที่รู้ภาษาอังกฤษน้อยงง และมีเนื้อหาที่ครอบคลุมกระทัดรัด

### ภาษา R

* สอนภาษา R สอนโดย รศ.ดร.ประเสริฐ คณาวัฒนไชย
  - https://www.youtube.com/watch?v=UaEtZ5XzVeE&list=PLoTScYm9O0GGSiUGzdWbjxIkZqEO-O6qZ
  - https://www.youtube.com/watch?v=Y-u1aTq6B0Q&list=PLoTScYm9O0GEvw9bN_Q8nRdDUPyaSymqM
  - https://www.youtube.com/watch?v=RVfULyntsxY&list=PLoTScYm9O0GFEu7flht1Fv_gsT2mizgP

### iOS and Swift

* [สอนเขียนโปรแกรมบนระบบ iOS ด้วยภาษา Swift สำหรับผู้เริ่มต้น (Beginner)](https://www.youtube.com/watch?v=awIkuWxsvhU&list=PLqjILcSzXkgdmFaAGZz0f48i8nuKyYDVf)
* [สอน iOS (เก่าไปหน่อย) โดย รศ.ดร.ประเสริฐ คณาวัฒนไชย](https://www.youtube.com/watch?v=MKCCt3S2yw8&list=PLoTScYm9O0GEvMbeONJ-9C5Euv_mUeXW0)

### Database

* [สอน SQL โดย รศ.ดร.ประเสริฐ คณาวัฒนไชย](https://www.youtube.com/watch?v=D5243hqy2BM&list=PLoTScYm9O0GH8gYuxpp-jqu5Blc7KbQVn)
* [สอน PHP โดย รศ.ดร.ประเสริฐ คณาวัฒนไชย](https://www.youtube.com/watch?v=5F1rldiGcAo&list=PLoTScYm9O0GGolOrNAKCVAFrP64961c37)
* [สอน SQL เบื้องต้น  ของคุณ Kong Ruksiam](https://www.youtube.com/watch?v=aDvRyO0RC_Y&list=PLEE74DyIkwEnmch_sru7oxEAJ96TBZbvD)

### Data structure และ algorithm

* [การออกแบบอัลกอริทึม ของรศ. ดร. สมชาย ประสิทธิ์จูตระกูล จากจุฬ](https://www.cp.eng.chula.ac.th/~somchai/ULearn/Algorithms/index.htm)
* [โครงสร้างข้อมูล (ฉบับจาวา) ของรศ. ดร. สมชาย ประสิทธิ์จูตระกูล จากจุฬา](https://www.cp.eng.chula.ac.th/~somchai/ULearn/DataStructures/index.htm)

### Network

* [สอน CISCO Network พื้นฐาน ของคุณ  Chaiwat Amornhirunwong](https://www.youtube.com/channel/UCEQgv8reNP_X94R2tMw842Q/videos)

### Data science กับ Machine Learning

* [สอนเรื่อง “Big Data” สำหรับงาน Data Science (วิทยาศาสตร์ด้านข้อมูล) .สอนโดย คณาจารย์คณะวิศวกรรมศาสตร์ จุฬาลงกรณ์มหาวิทยาลัย เช่น ศ.ดร. ประภาส จงสถิตย์วัฒนา และ รศ.ดร. อติวงศ์ สุชาโต เป็นต้น ดูผ่าน iTune](https://itunes.apple.com/th/itunes-u/big-data/id1109952360?l=th&mt=10)
* Machine Learning  ผู้สอนโดย Dr. Warasinee Chaisangmongkon
   - [Machine Learning Workshop (part 1)](https://www.facebook.com/bigdataexperience/videos/1569784483324081/)
   - [Machine Learning Workshop (Part 2)](https://www.facebook.com/bigdataexperience/videos/1569800019989194/)
   - [Machine Learning Workshop (Part 3)](https://www.facebook.com/bigdataexperience/videos/1569814079987788/)
   - [Machine Learning Workshop (Part 4)](https://www.facebook.com/bigdataexperience/videos/1569818656653997/)
   - [ไสลด์ประกอบการบรรยายเป็น PDF](https://drive.google.com/drive/folders/0B_K_-nCSCP1Dcjlua19VUlFRNG8)
* [อธิบาย Machine Learning สำหรับผู้เริ่มต้น](http://ta.virot.me/fb-ai-explainer/) 
* [Machine Learning Curriculum](https://off99555.github.io/machine-learning-curriculum/)
  List รวมลิงค์ขนาดใหญ่เกี่ยวกับ Machine Learning (ภาษาอังกฤษเป็นหลัก) Machine Learning เป็นสาขาย่อยของ AI ว่าด้วยการทำให้เครื่องคอมพิวเตอร์เรียนรู้ได้ จากการวิเคราะห์ data จำนวนมาก
  เรียกง่ายๆคือวิชาสถิติสมัยใหม่ เทคนิคที่มีบทบาทที่สุดในโลกปัจจุบันคือการนำเรื่องอนุพันธ์ในแคลคูลัส (Differential Calculus)
  และ Matrix Transformation ทางคณิตศาสตร์มาใช้ประโยชน์อย่างหนัก ซึ่งมีชื่อว่า Deep Learning

### Agile 

* [Playlist  8 คลิป สอน Agile โดยคุณ Chokchai Phatharamalai (Juacompe)  เป็นโครงการที่ม. เกษตรศาสตร์ ร่วมมือกับ SIPA](https://www.youtube.com/watch?v=HBSjj1LFDZY&list=PL3opfZU99soltwbe-9CV6DUeVTWd-TCiT&index=1)

### อื่นๆ ที่น่าสนใจ

* 10 เทคนิคยอดนิยม สำหรับ Secure Web App (OWASP Top Proactive Control & Case Study) บรรยายที่ตึกวิศวะจุฬาฯ 100 ปี วิทยากรโดยคุณ Pichaya Morimoto (IT Security Consultant, SEC Consuit (Thailand) Co.,Ltd 
    - https://www.youtube.com/playlist?list=PLmB7S3pD-s_yjstDZZZAYGhNi7kw2EFv1

* Google Engine โดย SIPA
   - https://www.youtube.com/watch?v=fidqISUDVQ8
   - https://www.youtube.com/watch?v=Gc7hiDtDcRg
   - https://www.youtube.com/watch?v=oc3kgVyrCrc
   - https://www.youtube.com/watch?v=MuhOC3KjOcs
* [วีดีโออื่นของ SIPA ](https://www.youtube.com/channel/UCgWqtSlHS0hCFlV4OfcAmAQ)
* [ส่วนคอร์สเรียนอื่น ๆ ที่น่าสนใจของจุฬาฯ ผ่านทาง itunes](https://itunes.apple.com/th/institution/chulalongkorn-university/id920032112?uo=8&at=10l6dJ)
* [วิชาต่างๆ ของอ.ประเสริฐ](https://www.youtube.com/user/prasertcbs/playlists?view=1&sort=dd)
* [สอนวิชาอื่นๆ ของคุณ Kong Ruksiam](https://www.youtube.com/channel/UCB6eDEzpqpiaZnDMzoje57Q/playlists)
* [Playlist 5 คลิป เกี่ยวกับลิขสิทธิ์ซอฟต์แวร์โดย SIPA](https://www.youtube.com/watch?v=4LLYNceiTDE&list=PLabfEkX-lWDWrndXS-m8MTQ1nc-AqUdQ-)
* [วีดีโอสอนวิชา Algebra แปลโดย ผศ.ดร.มนตรี มาลีวงศ์ และ วรเศรษฐ สุวรรณิก ได้รับอนุญาตจาก Khan Academy]( https://th.khanacademy.org/)

## บทความเจ๋งๆ เห็นแล้วร้องว้าว

__ค้างไว้ก่อน มีเเดี่ยวมาใส่ให้__

* [JavaSctipt มาตรฐาน ES5,ES6,ES8](https://github.com/adminho/javascript/)
* [ภาษา python ไล่ตั้งแต่ปูพื้นฐาน ไปยังถึง Machine learning -สาขาหนึ่งที่นิยมมากในตอนนี้ของ AI](http://phyblas.blog.jp/31.html)

## วีดีโอสอนเป็นภาษาอังกฤษ

* [Computer Science (lectures) ฟรีจากทั่วโลกครับ - แนะนำลิงค์นี้เลย](https://github.com/Developer-Y/cs-video-courses) ไม่ว่าจะเป็น MIT, Harvard, Stanford, UCBerkeley, University of Washington ฯลฯ ของธรรมศาสตร์ก็มีด้วยนะ และมหาวิทยาลัยอื่นๆ อีกเยอะแยะมากมาย มันจะคละๆ กันไปหลายวิชาหน่อย

* [edX.org เปิดคอร์สฟรีด้านการเขียนโปรแกรมฟรีๆ หลายตัวด้วยกัน](https://www.edx.org/computer-science-education-week)
* [คอร์สสอนฟรีจากไมโครซอฟต์ เยอะมากขอบอก](https://mva.microsoft.com/) ถ้าเข้าไปดูตามลิงค์นี้ 
https://mva.microsoft.com/search/SearchResults.aspx#!jobf=Developer&lang=1033
จะเห็นหลายชื่อ คอร์สของไมโครซอฟต์ ที่เหมาะกับโปรแกรมเมอร์หลายตัวที่เดียวเชียว มากกว่า 200 กว่าคอร์ส เช่น C#, Xamarin,Basic,Angular, React, powershell,ASP.NET,Node.js, Big Data, สร้างเกมโดย Construct 2 และหลายตัว ฯลฯ เลือกดูเอานะ

## คอร์สเรียนฟรีจากทั่วโลก
 
รายชื่อเว็บไซต์ที่เปิดคอร์สสอนการโค้ดดิ่ง (ภาษาอังกฤษ) น่าจะเป็นประโยชน์ มีทั้งฟรี และเสียเงิน คละกันไป

* [Codecademy](http://www.codecademy.com/)
* [KhanAcademy](https://www.khanacademy.org/)
* [Coursera](https://www.coursera.org/)
* [Udacity](https://www.udacity.com/)
* [Sololearn](https://www.sololearn.com/)
* [EdX](https://www.edx.org/) 
* [MIT OpenCourseWare](http://ocw.mit.edu/index.htm)
* [Harvard](http://online-learning.harvard.edu/)
* กลุ่ม Ivry League 8 แห่ง ประกอบด้วย Brown, Harvard, Cornell, Princeton, Dartmouth, Yale, Columbia universities, the University of Pennsylvania เปิดคอร์สเรียน 250 วิชา เยอะมาก แน่นอนรวมทั้งสายคอมด้วย [ตามลิงคนี้เลย](https://medium.freecodecamp.com/ivy-league-free-online-courses-a0d7ae675869#.nlto1ewre)
* [คอร์สเรียนฟรีออนไลน์ มากกว่า 438+ สอนเขียนโปรแกรม และ Computer Science จัดหมวดหมู่แบ่งเป็น 3 ระดับ ได้แก่ เริ่มต้น, ปานกลาง, ระดับสูง](https://medium.freecodecamp.com/438-free-online-programming-computer-science-courses-you-can-start-in-may-aa316e4195fc)
* [รวมคอร์สเรียน Machine learning](https://medium.freecodecamp.com/every-single-machine-learning-course-on-the-internet-ranked-by-your-reviews-3c4a7b8026c0)
* [รวม 13 คอร์สเรียน Deep learning](https://medium.freecodecamp.com/dive-into-deep-learning-with-these-23-online-courses-bf247d289cc0?source=user_profile---------1)
* [สอบ CCNA ของ Cisco โดย David Bombal วิชาที่สอน CCNA Exam 200-125, 100-105 and 200-105](https://www.youtube.com/playlist?list=PLhfrWIlLOoKN-QsGKGaWwmJDOaiJJSyYX)

## แหล่งความรู้อื่นๆ

* [awesome](https://github.com/sindresorhus/awesome)
* [Machine learning กับ Deep learning มีทั้งติวเตอร์ บทความ และแหล่งความรู้อื่นๆ อีกเพียบ](https://github.com/ujjwalkarn/Machine-Learning-Tutorials)

## อันนี้ไม่เกี่ยวกับคอมพิวเตอร์เท่าไร แต่อยากแชร์

เอาใจคนที่เรียนอยู่สายวิทย์คณิต หรือจะเข้าเรียนต่อมหาลัย แปลเป็นไทยมาจากคอร์สออนไลน์ระดับโลก Khan Academy ซึ่งได้รับการสนับสนุนจาก ["มูลนิธิศักดิ์พรทรัพย์"](http://www.kusol.org/khanacademythailand/)  แปลนี้ไม่ใช่เป็นซับสไคร้นะครัช __แต่สอนบรรยายภาษาไทยเลยแหละ__ (ดีตรงนี้แหละ) เนื้อหาดีมากเลย

* [คณิตศาสตร์ ม. ต้น](http://www.kusol.org/khan-mathjunior/)
* [คณิตศาสตร์ ม. ปลาย](http://www.kusol.org/khan-mathsenior/)
* [คณิตศาสตร์ พิชคณิตเบื้องต้น](http://www.kusol.org/khan-math-prealgebra/)
* [คณิตศาสตร์ พีชคณิต](http://www.kusol.org/khan-math-algebra/)
* [ฟิสิกส์ ม. ปลาย](http://www.kusol.org/khan-physics/)
* [เคมี](http://www.kusol.org/khan-chemistry/)
* [ชีวะ](http://www.kusol.org/khan-biology/)

คอร์สเรียนฟรี จากม. ชั้นระดับโลก จะมีเนื้อหาหลายวิชารวมกัน ต้องแยกแยะเลือกเรียนดู (ถ้าจะเลือกเรียนแต่คอม)
* [Harvard Open Courses](http://online-learning.harvard.edu/)
* [UC BerkeleyX](https://www.edx.org/school/uc-berkeleyx)
* [MIT OpenCourseWare](https://ocw.mit.edu/index.htm)
* [Stadford Free Courses](http://online.stanford.edu/courses)
* [Open Yale Courses (คอร์สด้านเกี่ยวกับคอมยังไม่มี)](http://oyc.yale.edu/)

## แนะนำกลุ่ม facebook 

กลุ่มรวมคนไอทีสำคัญๆ เอาไว้ปรึกษาปัญหาด้านไอที 

* [สมาคมโปรแกรมเมอร์ไทย - กลุ่มรวมวงการโปรแกรมเมอร์ใหญ่ที่สุดในไทย](https://www.facebook.com/groups/ThaiPGAssociateSociety/)
* [Programmer Thai Blood - กลุ่มรวมโปรแกรมเมอร์ที่ใหญ่แห่งหนึ่ง](https://www.facebook.com/groups/programmerthai/)
* [thaiadmin.org - รวม IT support, Network, System Admin ที่ใหญ่แห่งหนึ่งในไทย](https://www.facebook.com/groups/thaiadmin/)
* [Thailand Android Developer - กลุ่มผู้สนใจพัฒนาซอฟต์แวร์บน Android ที่ใหญ่ที่สุด](https://www.facebook.com/groups/thaidroiddev/)
* [รายชื่อกลุ่มต่างๆ อืน](https://www.algorithmtut.com/รายชื่อกลุ่มบน-facebook-ไอทีไทย/)


## ภาพรวมการพัฒนาเว็บทั้งฝั่ง Front-end และ Back-end

![web_development](https://coggle-downloads.s3.amazonaws.com/b72d9295469532d1bf565e9884e03a8fba9a14698c8d7e9197e5574ea3cddd93/Web_Development.png)

[สามารถดาวน์โหลดภาพเป็น PDF ได้ที่นี้](https://coggle-downloads.s3.amazonaws.com/91f9efcf43c8459cf124b46bad86c19b259fa41b33e3169c39c6057ef0ac8946/Web_Development.pdf)

## ภาพรวมการใช้ภาษาโปรแกรมมิ่ง แยกย่อยตามสายงานที่สำคัญ

[สามารถโหลดภาพเป็น pdf ได้ที่นี้](https://coggle-downloads.s3.amazonaws.com/ca2a9ea41d00956ce58b599497b5434711ffdcb4aab32765b5762ba74a622e5b/3_Basic_Programming_languages.pdf)

![programming Languages](https://coggle-downloads.s3.amazonaws.com/ca2a9ea41d00956ce58b599497b5434711ffdcb4aab32765b5762ba74a622e5b/3_Basic_Programming_languages.png)




File: 386_piscisflores088_CURSO_PYTHON_3.8.txt
Full Name: piscisflores088/CURSO_PYTHON_3.8
Description: None
created_at: 2022-06-23T23:22:21Z
updated_at: 2022-06-23T23:22:21Z
pushed_at: 2022-06-23T23:22:22Z
Language: None
URL: https://github.com/piscisflores088/CURSO_PYTHON_3.8
Forks: 0
Stars: 0
Topics: 
README:
# CURSO_PYTHON_3.8


File: 390_SaiAshish9_pythonAnywhereTest.txt
Full Name: SaiAshish9/pythonAnywhereTest
Description: None
created_at: 2020-10-05T07:38:09Z
updated_at: 2024-03-12T13:40:07Z
pushed_at: 2020-10-05T07:39:14Z
Language: Python
URL: https://github.com/SaiAshish9/pythonAnywhereTest
Forks: 0
Stars: 1
Topics: 
README:



File: 391_sitimaimunah565_belajar-python-2021.txt
Full Name: sitimaimunah565/belajar-python-2021
Description: None
created_at: 2021-01-22T00:19:32Z
updated_at: 2021-01-30T01:41:18Z
pushed_at: 2021-01-30T01:41:16Z
Language: Python
URL: https://github.com/sitimaimunah565/belajar-python-2021
Forks: 0
Stars: 0
Topics: 
README:
# belajar-python-2021


File: 392_afridha25_Python_Individual.txt
Full Name: afridha25/Python_Individual
Description: None
created_at: 2022-12-10T12:06:10Z
updated_at: 2022-12-10T12:06:10Z
pushed_at: 2022-12-10T12:06:32Z
Language: None
URL: https://github.com/afridha25/Python_Individual
Forks: 0
Stars: 0
Topics: 
README:



File: 394_Tobias-ilicic_PythonProjects.txt
Full Name: Tobias-ilicic/PythonProjects
Description: None
created_at: 2020-03-01T15:46:49Z
updated_at: 2020-03-01T15:50:44Z
pushed_at: 2020-03-01T15:50:42Z
Language: Python
URL: https://github.com/Tobias-ilicic/PythonProjects
Forks: 0
Stars: 0
Topics: 
README:



File: 406_Imanolasolo_holbertonschool-backend-python.txt
Full Name: Imanolasolo/holbertonschool-backend-python
Description: None
created_at: 2022-08-04T14:50:35Z
updated_at: 2022-08-04T17:24:22Z
pushed_at: 2022-08-27T21:31:04Z
Language: Python
URL: https://github.com/Imanolasolo/holbertonschool-backend-python
Forks: 0
Stars: 0
Topics: 
README:



File: 407_Igorlytko_python31.03.2021.txt
Full Name: Igorlytko/python31.03.2021
Description: None
created_at: 2021-04-08T09:23:15Z
updated_at: 2021-04-18T18:21:28Z
pushed_at: 2021-04-18T18:21:26Z
Language: Python
URL: https://github.com/Igorlytko/python31.03.2021
Forks: 0
Stars: 0
Topics: 
README:
# python31.03.2021


File: 411_AMXR-code_python-stack.txt
Full Name: AMXR-code/python-stack
Description: None
created_at: 2022-07-27T03:23:31Z
updated_at: 2022-07-27T03:23:31Z
pushed_at: 2022-07-27T03:23:31Z
Language: None
URL: https://github.com/AMXR-code/python-stack
Forks: 0
Stars: 0
Topics: 
README:



File: 417_Omprakash5694_Ineuron-python-basic-Assignment.txt
Full Name: Omprakash5694/Ineuron-python-basic-Assignment
Description: None
created_at: 2022-12-07T15:11:10Z
updated_at: 2022-12-09T06:33:59Z
pushed_at: 2022-12-13T09:53:08Z
Language: Jupyter Notebook
URL: https://github.com/Omprakash5694/Ineuron-python-basic-Assignment
Forks: 0
Stars: 0
Topics: 
README:



File: 419_BW1990_Udemy-ML-Python.txt
Full Name: BW1990/Udemy-ML-Python
Description: None
created_at: 2017-08-25T20:56:43Z
updated_at: 2017-08-25T20:56:43Z
pushed_at: 2017-08-25T20:56:44Z
Language: None
URL: https://github.com/BW1990/Udemy-ML-Python
Forks: 0
Stars: 0
Topics: 
README:



File: 420_Sunil-1921_Automate-LVM-using-Python.txt
Full Name: Sunil-1921/Automate-LVM-using-Python
Description: None
created_at: 2021-09-26T17:47:50Z
updated_at: 2021-09-26T17:48:33Z
pushed_at: 2021-09-26T17:48:30Z
Language: Python
URL: https://github.com/Sunil-1921/Automate-LVM-using-Python
Forks: 0
Stars: 0
Topics: 
README:
# Automate-LVM-using-Python


File: 422_vikashtiwary118_python-date-time-related-code.txt
Full Name: vikashtiwary118/python-date-time-related-code
Description: None
created_at: 2019-01-30T04:43:38Z
updated_at: 2019-05-06T05:30:18Z
pushed_at: 2019-05-06T05:30:16Z
Language: Python
URL: https://github.com/vikashtiwary118/python-date-time-related-code
Forks: 0
Stars: 0
Topics: 
README:



File: 424_Vandana123456gouda_Python-code-to-reading-an-image-using-OpenCV-.txt
Full Name: Vandana123456gouda/Python-code-to-reading-an-image-using-OpenCV-
Description: None
created_at: 2020-07-14T14:29:12Z
updated_at: 2020-07-15T13:03:40Z
pushed_at: 2020-07-14T14:29:53Z
Language: Jupyter Notebook
URL: https://github.com/Vandana123456gouda/Python-code-to-reading-an-image-using-OpenCV-
Forks: 0
Stars: 1
Topics: 
README:
# Python-code-to-reading-an-image-using-OpenCV-


File: 426_Reinaldo-Tanaka_Python-4-everybody.txt
Full Name: Reinaldo-Tanaka/Python-4-everybody
Description: None
created_at: 2021-04-10T21:35:35Z
updated_at: 2021-06-23T21:58:29Z
pushed_at: 2021-06-23T21:58:27Z
Language: None
URL: https://github.com/Reinaldo-Tanaka/Python-4-everybody
Forks: 0
Stars: 0
Topics: 
README:



File: 429_labd_python-mocksftp.txt
Full Name: labd/python-mocksftp
Description: None
created_at: 2017-06-17T20:29:06Z
updated_at: 2019-04-03T09:34:00Z
pushed_at: 2018-03-21T16:04:54Z
Language: Python
URL: https://github.com/labd/python-mocksftp
Forks: 4
Stars: 2
Topics: 
README:
.. start-no-pypi

.. image:: https://travis-ci.org/LabD/python-mocksftp.svg?branch=master
    :target: https://travis-ci.org/LabD/python-mocksftp

.. image:: http://codecov.io/github/LabD/python-mocksftp/coverage.svg?branch=master
    :target: http://codecov.io/github/LabD/python-mocksftp?branch=master

.. image:: https://img.shields.io/pypi/v/mocksftp.svg
    :target: https://pypi.python.org/pypi/mocksftp/

.. end-no-pypi

mocksftp - Easily test your sftp client code 
============================================

In-process SFTP server for testing your SFTP related client code.


Usage example
=============

For pytest, use the ``sftp_server`` and ``sftp_client`` fixtures:

.. code-block:: python

    from contextlib import closing
    import py.path


    def test_open_file(sftp_server, sftp_client):
        # Write directly in the server root.
        root_path = py.path.local(sftp_server.root)
        root_path.join('file.txt').write('content')

        # Access the folder via the client
        sftp = sftp_client.open_sftp()
        assert sftp.listdir('.') == ['file.txt']

        with closing(sftp.open('file.txt', 'r')) as data:
            assert data.read() == b'content'


History
=======

This project was started as a fork of https://github.com/carletes/mock-ssh-server
created by Carlos Valiente.

The SSH related code was removed to focus solely on the SFTP protocol.


Alternatives
============

* https://github.com/ulope/pytest-sftpserver
* https://github.com/rspivak/sftpserver



File: 42_MaxIsCool07_python.txt
Full Name: MaxIsCool07/python
Description: None
created_at: 2021-07-21T03:26:16Z
updated_at: 2021-07-21T04:08:44Z
pushed_at: 2021-07-21T04:08:42Z
Language: Python
URL: https://github.com/MaxIsCool07/python
Forks: 0
Stars: 0
Topics: 
README:



File: 430_ajaytidke28297_turtle-crossing-python.txt
Full Name: ajaytidke28297/turtle-crossing-python
Description: None
created_at: 2021-11-23T14:10:36Z
updated_at: 2021-11-23T14:10:52Z
pushed_at: 2021-11-23T14:10:49Z
Language: Python
URL: https://github.com/ajaytidke28297/turtle-crossing-python
Forks: 0
Stars: 0
Topics: 
README:



File: 435_ReverendCasy_Python_De_Brujin_Hw4.txt
Full Name: ReverendCasy/Python_De_Brujin_Hw4
Description: None
created_at: 2018-04-27T19:40:05Z
updated_at: 2018-04-27T21:10:52Z
pushed_at: 2018-04-27T21:10:51Z
Language: Python
URL: https://github.com/ReverendCasy/Python_De_Brujin_Hw4
Forks: 0
Stars: 0
Topics: 
README:
# Python_De_Bruijin_Hw4

## Description
De Bruijin graph assembler operates via prefix sequence to assemble nucleotide strings over a linear (or at least neraly linear) time. Here we implement custom De Bruijin assembler that can be executed from command line.

## Code structure
Basically, code comprises of two parts:
+ code body: object-oriented code comprising of three class objects for graph assembly
+ *argparse* part: integration into command line and code execution

### Code body
The body holds three classes essential for graph assembly
+ *Class **Vertex***: a class for graph vertices which stand for individual k-mers. It contains information about coincindent edges and k-mer coverage
+ *Class **Edge***: a class for graph edges representing existing reads. This class contains information about edge coverage calculated as mean between two interlinked k-mers.
+ *Class **Graph***: the largest classes representing the graph itself. It contains three functions: one for read addition (*add_read*), one for vertex coverage calculation (*calc_init_coverage*) and one for graph visualization (*visualize*) producing a pdf object either with full text (if **t=full**) or only with numeric stats (in any other case).

### Argparse
Arguments for command line go as following:
+ **-i**: a path to fasta file containing reads for further assembly;
+ **-k**: a desired k (k-mer length); default is 3;
+ **-t**: if followed by 'full', draws a full graph with k-mers on vertices and read sequences on edges; if followed by any other random text, produces a stat graph with node and edge coverage
+ **-f** and **-r**: two alternative flags for assembly mode. If **-f** is stated, graph is assembled fron raw read sequences; if **-r** is chosen, graph is assemble from read reverse complements;
+ **function**: a none-flag variable for **t**/**r** alteration handling.

## Launch example
The following command executes graph assembly from forward reads with k equal to 3:
```{bash}
python De_Brujin_Malovichko.py -f -t full -i hw3_dataset.fasta
```
Alternatively, this one will create a stat graph (by random text after **-t**) from reverse reads with k=10:
 ```{bash}
python De_Brujin_Malovichko.py -r -t pop -k 10 -i hw3_dataset.fasta
```

## Output example
Three graphs are stored in this repository as examples for graph assembly: one for forward read assembly in full mode, one for forward read assembly in stat graph mode and the last for full graph assembled from reverse reads. All three were built with default k from reads stored in attached *fasta* file.

## Acknowledgements
Eugene Bakin from Bioinformatics Institute for code backbone and testing material
Pre-existing assemblers for graph visualization function logic



File: 437_xuedayuer_https-github.com-TwoWater-Python.txt
Full Name: xuedayuer/https-github.com-TwoWater-Python
Description: None
created_at: 2019-01-31T05:47:44Z
updated_at: 2019-11-22T16:20:09Z
pushed_at: 2019-01-31T05:48:02Z
Language: Python
URL: https://github.com/xuedayuer/https-github.com-TwoWater-Python
Forks: 0
Stars: 1
Topics: 
README:
IT 行业相对于一般传统行业，发展更新速度更快，一旦停止了学习，很快就会被行业所淘汰，但是，我们要清楚：淘汰的永远只是那些初级水平的从业者，过硬技术的从业者永远都是稀缺的。因此对于学习，我们还是要踏踏实实的。


自学 Python ，也是一样，不要一开始因为头脑发热就不停地收藏各种资料网站，购买各种书籍，下载了大量的教学视频，过了几天，学习的热情开始褪去，再过几个星期，终于完成了学习课程 —— 《从入门到放弃》。所以，学习 Python 需要一步一个脚印，踏踏实实地学。


# FQ

在讲 Python 如何入门之前，个人建议最好每个人都有自己的 FQ 工具，多使用 Google 搜索，多去看一下墙外的世界，多看 Github 上的开源项目。

至于如何 FQ ，这里提供一下我用过的工具：[FQ工具集](/Res/FQ.md)


# Python 学习资源集

相信很多人学习某门编程语言的时候，都会找各种学习资料。说句实话，资料太多，反而没用，根据自己的学习习惯，个人能力选择一门资源坚持学就好了。

因为每个人的需求不同，这里整理了一批 Python 比较好的学习资料：

* [Python 博客网站资源](/Res/Python博客网站资源.md)
* [Python 视频教程资源](/Res/Python视频教程资源.md)

# Python 入门

对于入门，主要是掌握基本的语法和熟悉编程规范，因此大部分的教程基本一致的，所以还是建议选好适合自己的一个教程，坚持学下去。

在 Python 入门中，本人自己编写了一系列的 《 草根学 Python 》 博客， 是基于 Python 3.6 写的 Python 入门系列教程，为了更好的阅读，把它整理在 [GitBook](https://www.readwithu.com/) 上；如果 [GitBook](https://www.readwithu.com/)  访问慢，也可以到个人博客查阅：[草根学 Python](http://twowater.com.cn/categories/Python/%E8%8D%89%E6%A0%B9%E5%AD%A6-Python/)，希望对各位入门 Python 有所帮助。

**主要目录如下：**

* [Python代码规范](/Article/codeSpecification/codeSpecification_Preface.md)
  - [简明概述](/Article/codeSpecification/codeSpecification_first.md)
  - [注释](/Article/codeSpecification/codeSpecification_second.md)
  - [命名规范](/Article/codeSpecification/codeSpecification_third.md)
* [第一个Python程序](/Article/python1/Preface.md)
  - [Python 简介](/Article/python1/Introduction.md)
  - [Python 的安装](/Article/python1/Installation.md)
  - [第一个 Python 程序](/Article/python1/The_first_procedure.md)
  - [集成开发环境（IDE）: PyCharm](/Article/python1/IDE.md)
* [基本数据类型和变量](/Article/python2/Preface.md)
  - [Python 语法的简要说明](/Article/python2/Grammar.md)
  - [Python 的基本数据类型](/Article/python2/Type_of_data.md)
  - [基本数据类型转换](/Article/python2/Type_conversion.md)
  - [Python 中的变量](/Article/python2/Variable.md)
* [List 和 Tuple](/Article/python3/Preface.md)
  - [List（列表）](/Article/python3/List.md)
  - [tuple（元组）](/Article/python3/tuple.md)
* [ Dict 和 Set](/Article/python4/Preface.md)
  - [字典(Dictionary)](/Article/python4/Dict.md)
  - [set](/Article/python4/Set.md)
* [条件语句和循环语句](/Article/python5/Preface.md)
  - [条件语句](/Article/python5/If.md)
  - [循环语句](/Article/python5/Cycle.md)
  - [条件语句和循环语句综合实例](/Article/python5/Example.md)
* [函数](/Article/python6/Preface.md)
  - [Python 自定义函数的基本步骤](/Article/python6/1.md)
  - [函数传值问题](/Article/python6/2.md)
  - [函数返回值](/Article/python6/3.md)
  - [函数的参数](/Article/python6/4.md)
  - [匿名函数](/Article/python6/5.md)
* [迭代器和生成器](/Article/python7/Preface.md)
  - [迭代](/Article/python7/1.md)
  - [Python 迭代器](/Article/python7/2.md)
  - [lsit 生成式（列表生成式）](/Article/python7/3.md)
  - [生成器](/Article/python7/4.md)
  - [迭代器和生成器综合例子](/Article/python7/5.md)
* [模块与包](/Article/python8/Preface.md)
  - [Python 模块简介](/Article/python8/1.md)
  - [模块的使用](/Article/python8/2.md)
  - [主模块和非主模块](/Article/python8/3.md)
  - [包](/Article/python8/4.md)
  - [作用域](/Article/python8/5.md)
* [面向对象](/Article/python9/Preface.md)
  - [面向对象的概念](/Article/python9/1.md)
  - [类](/Article/python9/2.md)
  - [类的属性](/Article/python9/3.md)
  - [类的方法](/Article/python9/4.md)
  - [类的继承](/Article/python9/5.md)
  - [类的多态](/Article/python9/6.md)
* [Python 的 Magic Method](/Article/python10/Preface.md)
  - [Python 的 Magic Method](/Article/python10/1.md)
  - [构造(`__new__`)和初始化(`__init__`)](/Article/python10/2.md)
  - [属性的访问控制](/Article/python10/3.md)
  - [对象的描述器](/Article/python10/4.md)
  - [自定义容器（Container）](/Article/python10/5.md)
  - [运算符相关的魔术方法](/Article/python10/6.md)
* [枚举类](/Article/python11/Preface.md)
  - [枚举类的使用](/Article/python11/1.md)
  - [Enum 的源码](/Article/python11/2.md)
  - [自定义类型的枚举](/Article/python11/3.md)
  - [枚举的比较](/Article/python11/4.md)
* [元类](/Article/python12/Preface.md)
  - [Python 中类也是对象](/Article/python12/1.md)
  - [使用 `type()` 动态创建类](/Article/python12/2.md)
  - [什么是元类](/Article/python12/3.md)
  - [自定义元类](/Article/python12/4.md)
  - [使用元类](/Article/python12/5.md)
* [线程与进程](/Article/python13/Preface.md)
  - [线程与进程](/Article/python13/1.md)
  - [多线程编程](/Article/python13/2.md)
  - [进程](/Article/python13/3.md)
* [一步一步了解正则表达式](/Article/python14/Preface.md)
    - [初识 Python 正则表达式](/Article/python14/1.md)
    - [字符集](/Article/python14/2.md)
    - [数量词](/Article/python14/3.md)
    - [边界匹配符和组](/Article/python14/4.md)
    - [re.sub](/Article/python14/5.md)
    - [re.match 和 re.search](/Article/python14/6.md)
* [闭包](/Article/python15/1.md)
* [装饰器](/Article/python16/1.md)


# 知识点补漏
* [Python 关键字 yield](/Article/supplement/Python关键字yield.md)


# Python 进阶

* [使用Python虚拟环境](/Article/advanced/使用Python虚拟环境.md)
* [Mac中使用virtualenv和virtualenvwrapper](/Article/advanced/Mac中使用virtualenv和virtualenvwrapper.md)


# Django

Python 下有许多款不同的 Web 框架。Django 是重量级选手中最有代表性的一位。许多成功的网站和 APP 都基于 Django。

如果对自己的基础有点信息的童鞋，可以尝试通过国外的 ![Django 博客从搭建到部署系列教程](https://simpleisbetterthancomplex.com/series/2017/09/04/a-complete-beginners-guide-to-django-part-1.html) 进行入门，这个教程讲的非常的详细，而且还有很多有趣的配图。不过可能因为墙的原因，很多人会访问不到，就算访问到了，也因为是英语的，不会进行耐心的阅读学习。因此我打算翻译这个教程。

* [一个完整的初学者指南Django-part1](/Article/django/一个完整的初学者指南Django-part1.md)
* [一个完整的初学者指南Django-part2](/Article/django/一个完整的初学者指南Django-part2.md)

后面经一个朋友说，这个教程已经有人在翻译了，因此我也不翻译了，不过感觉我的翻译还是挺好的，因为不是直译的，是通过了解后，用自己的语言再次表达出来。

这里有上面这个教程翻译计划的 [Github](https://github.com/wzhbingo/django-beginners-guide) 以及 [博客](https://www.cloudcrossing.xyz/post/20/)，觉得哪个看得舒服，就选哪个进行学习。



持续更新....



File: 438_UrielMaceri_Python-Principiante.txt
Full Name: UrielMaceri/Python-Principiante
Description: None
created_at: 2022-09-05T18:25:56Z
updated_at: 2022-09-05T18:33:35Z
pushed_at: 2022-11-17T15:44:53Z
Language: Python
URL: https://github.com/UrielMaceri/Python-Principiante
Forks: 0
Stars: 0
Topics: 
README:
# Ejercitacion de python dada en la materia "Paradigmas de Programacion" en la universidad UMET



File: 440_13750013724_iInterface_python.txt
Full Name: 13750013724/iInterface_python
Description: None
created_at: 2021-02-14T09:43:20Z
updated_at: 2021-02-14T10:02:28Z
pushed_at: 2021-02-14T10:02:26Z
Language: Python
URL: https://github.com/13750013724/iInterface_python
Forks: 0
Stars: 0
Topics: 
README:
**接口功能自动化测试程序（Python版）**
运行环境：
- python3
- pytest
- allure report
- git

依赖准备：
pip install allure-pytest

运行命令：
pytest -sv test/weather_test.py --alluredir ./allure-results


File: 441_techandthrottle_python-scrape-trial.txt
Full Name: techandthrottle/python-scrape-trial
Description: None
created_at: 2022-03-03T05:38:13Z
updated_at: 2022-03-03T05:39:24Z
pushed_at: 2022-03-03T05:39:21Z
Language: Python
URL: https://github.com/techandthrottle/python-scrape-trial
Forks: 0
Stars: 0
Topics: 
README:
This Python script aims gather specific data from Yahoo Finance.

Using the link on the link.txt, it will get all the components and list the following data:
    
    * Ticker
    * Company Name
    * Previous Close
    * PE ratio (TTM)
    * 52 Week High
    * Total Revenue
    * Net Income
    * Total Assets
    * Total Liabilities
    * Total Stockholder's Equity
    * Net tangible assets
    * Debt to equity ratio
    * Market Cap
    * PEG ratio
    * Price/Sales (ttm)
    * Price/Book (mrg)
    * Return on Assets (ttm)


File: 444_Mohammad2527_python_bootcamp_day_3.txt
Full Name: Mohammad2527/python_bootcamp_day_3
Description: None
created_at: 2020-11-30T05:05:31Z
updated_at: 2020-11-30T05:13:22Z
pushed_at: 2020-11-30T05:13:20Z
Language: Python
URL: https://github.com/Mohammad2527/python_bootcamp_day_3
Forks: 0
Stars: 0
Topics: 
README:
# python_bootcamp_day_3

In day three of coding challeneg I have developed following projects:
01) BMI calculator: This is body mass index calculator. It gives a feedback to user based on their input about height and weight.
02) Leap year check: This is a simple project to findout, if a year is leap year. 
03) Love calculator: This program calculates love score of two people. It takes user input for their names.
04) odd even check: this program check if a number is odd or even.
05)pizza order: This progra calculates the price of pizza based on there size and topping choice from user.
06)roller coaster: This program is about a roller coaster ticket counter. It calculates the price of ticket based on severl user input like height, age, if they wan to take photos etc.
07) Treasure island: It is a minigame about treasure hunting. The game taske suser input and based on the input game continues in different direction.



File: 445_LegendaryDarkKnight_pythonProject.txt
Full Name: LegendaryDarkKnight/pythonProject
Description: None
created_at: 2023-01-02T08:27:36Z
updated_at: 2023-01-02T08:27:36Z
pushed_at: 2023-01-02T08:27:36Z
Language: None
URL: https://github.com/LegendaryDarkKnight/pythonProject
Forks: 0
Stars: 0
Topics: 
README:



File: 446_amandladev_Ransomware-python.txt
Full Name: amandladev/Ransomware-python
Description: None
created_at: 2021-07-01T04:24:23Z
updated_at: 2021-07-01T04:33:06Z
pushed_at: 2021-07-01T04:33:03Z
Language: Python
URL: https://github.com/amandladev/Ransomware-python
Forks: 0
Stars: 0
Topics: 
README:
# Ransomware con python

Se puede crear un virus Ransomware de manera muy sencilla a través del uso de la libreria Fernet para la encriptación y OS para acceder a archivos del equipo. 
En el proyecto se incluye el file encriptador y tambien el desencriptador. 



File: 447_IkraamSage_email_python.txt
Full Name: IkraamSage/email_python
Description: None
created_at: 2021-05-28T13:29:58Z
updated_at: 2021-05-28T13:31:25Z
pushed_at: 2021-05-28T13:31:22Z
Language: Python
URL: https://github.com/IkraamSage/email_python
Forks: 0
Stars: 0
Topics: 
README:
# email_python



File: 448_wanders_data-dependency-example-python.txt
Full Name: wanders/data-dependency-example-python
Description: None
created_at: 2022-03-08T22:10:28Z
updated_at: 2022-03-08T22:10:50Z
pushed_at: 2022-03-08T22:13:36Z
Language: Python
URL: https://github.com/wanders/data-dependency-example-python
Forks: 1
Stars: 0
Topics: 
README:



File: 449_rongkezan_leetcode-python.txt
Full Name: rongkezan/leetcode-python
Description: None
created_at: 2022-07-11T15:40:52Z
updated_at: 2022-07-11T15:43:29Z
pushed_at: 2022-07-11T15:43:26Z
Language: Python
URL: https://github.com/rongkezan/leetcode-python
Forks: 0
Stars: 0
Topics: 
README:



File: 450_ladyusa_mock-python.txt
Full Name: ladyusa/mock-python
Description: None
created_at: 2022-03-11T09:42:59Z
updated_at: 2022-03-11T09:43:09Z
pushed_at: 2024-02-01T06:25:26Z
Language: Python
URL: https://github.com/ladyusa/mock-python
Forks: 0
Stars: 0
Topics: 
README:



File: 461_yuanyuan1998921_python.txt
Full Name: yuanyuan1998921/python
Description: None
created_at: 2018-06-10T00:03:44Z
updated_at: 2018-06-10T00:03:46Z
pushed_at: 2018-06-10T00:03:45Z
Language: None
URL: https://github.com/yuanyuan1998921/python
Forks: 0
Stars: 0
Topics: 
README:
# python


File: 465_Ahamed-T_ml-python.txt
Full Name: Ahamed-T/ml-python
Description: None
created_at: 2019-04-20T14:23:46Z
updated_at: 2019-04-20T14:23:46Z
pushed_at: 2019-04-20T14:23:46Z
Language: None
URL: https://github.com/Ahamed-T/ml-python
Forks: 0
Stars: 0
Topics: 
README:



File: 467_paulnicholsen27_python-koans.txt
Full Name: paulnicholsen27/python-koans
Description: None
created_at: 2014-10-16T17:53:44Z
updated_at: 2014-10-16T17:55:15Z
pushed_at: 2014-10-17T11:55:09Z
Language: Python
URL: https://github.com/paulnicholsen27/python-koans
Forks: 0
Stars: 0
Topics: 
README:
============
Python Koans
============

.. image:: https://travis-ci.org/gregmalcolm/python_koans.png?branch=master
   :target: http://travis-ci.org/gregmalcolm/python_koans

Python Koans is a port of Edgecase's "Ruby Koans" which can be found
at http://rubykoans.com/.

.. image:: http://i442.photobucket.com/albums/qq150/gregmalcolm/PythonKoansScreenshot.png

Python Koans is an interactive tutorial for learning the Python programming
language by making tests pass.

Most tests are *fixed* by filling the missing parts of assert functions. Eg:

    self.assertEqual(__, 1+2)

which can be fixed by replacing the __ part with the appropriate code:

    self.assertEqual(3, 1+2)

Occasionally you will encounter some failing tests that are already filled out.
In these cases you will need to finish implementing some code to progress. For
example, there is an exercise for writing some code that will tell you if a
triangle is equilateral, isosceles or scalene.

As well as being a great way to learn some Python, it is also a good way to get
a taste of Test Driven Development (TDD).


Downloading Python Koans
------------------------

Python Koans is available through git on Github:

    http://github.com/gregmalcolm/python_koans

It is also mirrored on bitbucket for Mercurial users:

    http://bitbucket.org/gregmalcolm/python_koans

Either site will allow you to download the source as a zip/gz/bz2.


Installing Python Koans
-----------------------

Aside from downloading or checking out the latest version of Python Koans, you
need to install the Python interpreter.

At this time of writing, there are two versions of the Python Koans:

* one for use with Python 2.7 (earlier versions are no longer supported)
* one for Python 3.1+

You should be able to work with newer Python versions, but older ones will
likely give you problems.

You can download Python from here:

    http://www.python.org/download

After installing Python make sure the folder containing the python executable
is in the system path. In other words, you need to be able to be able to run
Python from a command console. With Python 2 it will be called `python`
or `python.exe` depending on the operating system. For Python 3 it will either
be `python3` or for windows it will be `python.exe`.

If you have problems, this may help:

    http://www.python.org/about/gettingstarted

Windows users may also want to update the line in the batch file `run.bat` to
set the python path::

    SET PYTHON_PATH=C:\Python27


Getting Started
---------------

Jake Hebbert has created a couple of screencasts available here:

http://www.youtube.com/watch?v=e2WXgXEjbHY&list=PL5Up_u-XkWgNcunP_UrTJG_3EXgbK2BQJ&index=1

Or if you prefer to read:

From a \*nix terminal or windows command prompt go to the python
koans\\python_VERSION folder and run::

    python contemplate_koans.py

or::

    python3 contemplate_koans.py

In my case I'm using Python 3 with windows, so I fire up my command
shell (cmd.exe) and run this:

.. image:: http://i442.photobucket.com/albums/qq150/gregmalcolm/GettingStarted.png

Apparently a test failed::

    AssertionError: False is not True

It also tells me exactly where the problem in, its an assert on line 12
of .\\koans\\about_asserts.py. This one is easy, just change False to True to
make the test pass.

Sooner or later you will likely encounter tests where you are not sure what the
expected value should be. For example::

    class Dog:
        pass

    def test_objects_are_objects(self):
        fido = self.Dog()
        self.assertEqual(__, isinstance(fido, object))

This is where the Python Command Line can come in handy. In this case I can
fire up the command line, recreate the scenario and run queries:

.. image:: http://i442.photobucket.com/albums/qq150/gregmalcolm/DebuggingPython.png


Getting the Most From the Koans
-------------------------------

Quoting the Ruby Koans instructions::

	"In test-driven development the mantra has always been, red, green,
	refactor. Write a failing test and run it (red), make the test pass
	(green), then refactor it (that is look at the code and see if you
	can make it any better). In this case you will need to run the koan
	and see it fail (red), make the test pass (green), then take a
	moment and reflect upon the test to see what it is teaching you
	and improve the code to better communicate its intent (refactor)."


Content
-------

The Python Koans is a made up of about 2/3 Ruby Koans ported material and 1/3
Python specific tests. The content ported from Ruby Koans includes all the
assignment projects.

Content for Python 3 is a little different to the Python 2 flavor due to big
changes between the two different versions of the language.  For example, in
the Python 2 variant the differences between old and new style classes are
covered. This loses relevance in in the Python 3 version, but there are some
extra tests covering new functionality.


Finding More Koan Projects
--------------------------

There are number of other great Koan projects out there for various languages
and frameworks. Most of them can be found in github. Also there is a little
koans activity on bitbucket.

* Github koan projects:
    https://github.com/search?q=koans&ref=cmdform

* Bitbucket koan projects:
    https://bitbucket.org/repo/all?name=koans

Acknowledgments
---------------

Thanks go to Jim Weirich and Joe O'Brien for the original Ruby Koans that the
Python Koans is based on! Also the Ruby Koans in turn borrows from Metakoans
so thanks also go to Ara Howard for that!

Also thanks to everyone who has contributed to Python Koans! I got a great
headstart by taking over a code base initiated by the combined Mikes of
FPIP. So here's a little plug for their very cool Python podcast:

  http://frompythonimportpodcast.com/



File: 470_496202719_python.txt
Full Name: 496202719/python
Description: None
created_at: 2021-06-22T14:27:08Z
updated_at: 2024-03-10T13:12:47Z
pushed_at: 2021-06-22T14:41:09Z
Language: Python
URL: https://github.com/496202719/python
Forks: 0
Stars: 1
Topics: 
README:



File: 473_miniministar_pythonlearn.txt
Full Name: miniministar/pythonlearn
Description: None
created_at: 2021-05-05T13:05:14Z
updated_at: 2021-06-09T03:24:40Z
pushed_at: 2021-06-09T03:24:37Z
Language: Python
URL: https://github.com/miniministar/pythonlearn
Forks: 0
Stars: 0
Topics: 
README:
#python练习

- [ ] Python操作kafka文档
- [ ] HDFS学习
- [ ] Python操作hdfs文档

| 目标                   | 模块       | 完成 |
| ---------------------- | ---------- | ---- |
| 基本数据类型，基本语法 | learn01    | done |
| 类，继承，方法重写     | test_class | done |
| io操作                 | test_file  | done |
| MySQL数据库读写        | test_mysql | done |
| kafka发布订阅          | test_kafka | done |
| hdfs                   |            |      |
|                        |            |      |



File: 475_carat-jhcha_kafka-keda-python.txt
Full Name: carat-jhcha/kafka-keda-python
Description: None
created_at: 2022-05-13T00:34:18Z
updated_at: 2022-05-17T05:19:53Z
pushed_at: 2022-05-18T03:27:22Z
Language: Python
URL: https://github.com/carat-jhcha/kafka-keda-python
Forks: 0
Stars: 0
Topics: 
README:
# Kafka - KEDA - python

## Local Environment

### generate configs

### Install Python dependencies in mac M1

install `librdkafka`

```bash
$ cd ~ && mkdir tmp && cd tmp
$ git clone https://github.com/edenhill/librdkafka.git
$ cd librdkafka
$ ./configure --install-deps
$ brew install  openssl zstd pkg-config
$ ./configure
$ make
$ sudo make install
```

install python package using pipenv

```bash
$ PIPENV_VENV_IN_PROJECT=true pipenv install --python 3.7.12
```

### Install Python dependencies in mac intell

install `librdkafka`

```bash
$ brew install librdkafka
```

install python package using pipenv

```bash
$ PIPENV_VENV_IN_PROJECT=true pipenv install --python 3.7.12
```

### setup infra

```bash
$ ./minikube/setup.sh
```

### Activate virtual environment

```bash
$ pipenv shell
```

### test kafka producer & consumer work

```bash
# python src/python_kafka_test_client.py <IP:PORT>
$ python src/python_kafka_test_client.py localhost:9092
```

### delete infra

```bash
$ minikube delete -p shiba
```



File: 477_Sharan-bir_Python-projects.txt
Full Name: Sharan-bir/Python-projects
Description: None
created_at: 2023-09-14T17:40:18Z
updated_at: 2023-09-14T17:48:51Z
pushed_at: 2023-09-14T17:48:48Z
Language: Python
URL: https://github.com/Sharan-bir/Python-projects
Forks: 0
Stars: 0
Topics: 
README:



File: 479_YirenShi_note-Python.txt
Full Name: YirenShi/note-Python
Description: None
created_at: 2018-10-29T15:41:14Z
updated_at: 2018-10-29T16:16:51Z
pushed_at: 2018-10-29T16:16:50Z
Language: Python
URL: https://github.com/YirenShi/note-Python
Forks: 0
Stars: 0
Topics: 
README:



File: 480_mmoshtaqi_Python-Parking-Detection.txt
Full Name: mmoshtaqi/Python-Parking-Detection
Description: None
created_at: 2021-11-09T16:11:48Z
updated_at: 2021-11-09T16:13:37Z
pushed_at: 2021-11-09T16:11:51Z
Language: Python
URL: https://github.com/mmoshtaqi/Python-Parking-Detection
Forks: 0
Stars: 0
Topics: 
README:
# ImageProcessing
 



File: 484_Anfabei_Midterm_Python_Vaverka.txt
Full Name: Anfabei/Midterm_Python_Vaverka
Description: None
created_at: 2022-04-05T15:20:47Z
updated_at: 2022-04-05T15:30:15Z
pushed_at: 2022-04-05T17:46:07Z
Language: Jupyter Notebook
URL: https://github.com/Anfabei/Midterm_Python_Vaverka
Forks: 0
Stars: 0
Topics: 
README:



File: 488_mukesh619_Python-Code.txt
Full Name: mukesh619/Python-Code
Description: None
created_at: 2019-09-09T13:40:53Z
updated_at: 2021-09-19T15:10:08Z
pushed_at: 2021-09-19T15:10:05Z
Language: Jupyter Notebook
URL: https://github.com/mukesh619/Python-Code
Forks: 0
Stars: 0
Topics: 
README:
# Fitness-Data



File: 489_N180152_ShapeAI_Python_Machine_Learning.txt
Full Name: N180152/ShapeAI_Python_Machine_Learning
Description: None
created_at: 2022-10-03T15:59:31Z
updated_at: 2022-10-03T16:00:40Z
pushed_at: 2022-10-03T16:03:26Z
Language: Jupyter Notebook
URL: https://github.com/N180152/ShapeAI_Python_Machine_Learning
Forks: 0
Stars: 0
Topics: 
README:
# DevTown PYTHON AND MACHINE LEARNING BOOTCAMP
Hi I made this project during the 7 Days Free Bootcamp, conducted by <b> DevTown
</b>.
The instructor during the session was Mr. Shaurya Sinha (Co-Founder at DevTown). I got to
learn a lot during these 7 days and it was an amazing experience learning with DevTown.
<br><br>Here's the link for you to watch the sessions as well<br>
<a href="https://www.youtube.com/playlist?list=PL7zl8TDRnbulNEA-59W7wWgCWE8LEOD6h"> <img src="https://github.com/ShapeAI/PYTHON-AND-DATA-ANALYTICS/blob/main/machine%20learning.png"> </a>
<br>I got to have hands on experience on:
<li>Python
<li>Machine Learning
<li>Tensorflow
<br>during these 7 days, and everything was explained from the very basics so that
anyone with zero experience on programming can learn.
I enjoyed these 7 days, you can as well. To register for next free 7 days bootcamp, visit:
<a href="https://www.Devtown.in"> www.Devtown.in</a>
or follow DevTown on:
<li><a href=
"https://www.linkedin.com/company/devtown-in/">LinkedIn</a>
<li><a href=
"https://www.instagram.com/devtown.in/">Instagram</a>
<li><a
href=
"https://www.youtube.com/c/DevTownIndia">YouTu
be</a>
<li><a href=
"https://github.com/shapeai">GitHub</a>




File: 48_NEEDHAKHAN_shapeai_python_machine_learning.txt
Full Name: NEEDHAKHAN/shapeai_python_machine_learning
Description: None
created_at: 2022-10-03T09:12:47Z
updated_at: 2022-10-03T09:14:18Z
pushed_at: 2022-10-03T09:19:51Z
Language: Jupyter Notebook
URL: https://github.com/NEEDHAKHAN/shapeai_python_machine_learning
Forks: 0
Stars: 0
Topics: 
README:
# DevTown PYTHON AND MACHINE LEARNING BOOTCAMP
Hi I made this project during the 7 Days Free Bootcamp, conducted by <b> DevTown
</b>.
The instructor during the session was Mr. Shaurya Sinha (Co-Founder at DevTown). I got to
learn a lot during these 7 days and it was an amazing experience learning with DevTown.
<br><br>Here's the link for you to watch the sessions as well<br>
<a href="https://www.youtube.com/playlist?list=PL7zl8TDRnbulNEA-59W7wWgCWE8LEOD6h"> <img src="https://github.com/ShapeAI/PYTHON-AND-DATA-ANALYTICS/blob/main/machine%20learning.png"> </a>
<br>I got to have hands on experience on:
<li>Python
<li>Machine Learning
<li>Tensorflow
<br>during these 7 days, and everything was explained from the very basics so that
anyone with zero experience on programming can learn.
I enjoyed these 7 days, you can as well. To register for next free 7 days bootcamp, visit:
<a href="https://www.Devtown.in"> www.Devtown.in</a>
or follow DevTown on:
<li><a href=
"https://www.linkedin.com/company/devtown-in/">LinkedIn</a>
<li><a href=
"https://www.instagram.com/devtown.in/">Instagram</a>
<li><a
href=
"https://www.youtube.com/c/DevTownIndia">YouTu
be</a>
<li><a href=
"https://github.com/shapeai">GitHub</a>



File: 490_hlwqds_my_python_env.txt
Full Name: hlwqds/my_python_env
Description: None
created_at: 2019-12-16T12:21:14Z
updated_at: 2019-12-16T12:21:18Z
pushed_at: 2019-12-16T12:21:16Z
Language: None
URL: https://github.com/hlwqds/my_python_env
Forks: 0
Stars: 0
Topics: 
README:
# my_python_env


File: 491_anmol2806_Python_practice.txt
Full Name: anmol2806/Python_practice
Description: None
created_at: 2021-03-27T10:47:32Z
updated_at: 2021-03-27T10:54:57Z
pushed_at: 2021-03-27T10:47:39Z
Language: Jupyter Notebook
URL: https://github.com/anmol2806/Python_practice
Forks: 0
Stars: 0
Topics: 
README:



File: 493_JoeBusLife_python-syntax-exer.txt
Full Name: JoeBusLife/python-syntax-exer
Description: None
created_at: 2021-05-12T05:38:43Z
updated_at: 2021-05-12T06:03:22Z
pushed_at: 2021-05-12T06:03:20Z
Language: Python
URL: https://github.com/JoeBusLife/python-syntax-exer
Forks: 0
Stars: 0
Topics: 
README:
# python-syntax-exer



File: 494_Alexei13213_pythonProjectalx1.txt
Full Name: Alexei13213/pythonProjectalx1
Description: None
created_at: 2022-01-22T16:46:06Z
updated_at: 2022-02-20T12:16:42Z
pushed_at: 2022-01-25T15:32:00Z
Language: Python
URL: https://github.com/Alexei13213/pythonProjectalx1
Forks: 0
Stars: 1
Topics: 
README:



File: 495_wonohe_python_100_knock.txt
Full Name: wonohe/python_100_knock
Description: None
created_at: 2020-10-15T13:18:36Z
updated_at: 2020-10-15T13:18:40Z
pushed_at: 2020-10-15T13:18:38Z
Language: None
URL: https://github.com/wonohe/python_100_knock
Forks: 0
Stars: 0
Topics: 
README:
# python_100_knock


File: 496_NikitaRasskazkin_Python-9.2.txt
Full Name: NikitaRasskazkin/Python-9.2
Description: None
created_at: 2020-07-28T20:45:18Z
updated_at: 2020-07-28T22:58:27Z
pushed_at: 2020-07-28T22:58:25Z
Language: Python
URL: https://github.com/NikitaRasskazkin/Python-9.2
Forks: 0
Stars: 0
Topics: 
README:



File: 498_PrashanthVangipurapu_Python-Programs.txt
Full Name: PrashanthVangipurapu/Python-Programs
Description: None
created_at: 2017-07-26T08:42:23Z
updated_at: 2017-07-26T09:01:50Z
pushed_at: 2017-07-26T09:04:36Z
Language: Python
URL: https://github.com/PrashanthVangipurapu/Python-Programs
Forks: 0
Stars: 0
Topics: 
README:
# Python-Programs


File: 499_Friday6661-Dev_Function_Python.txt
Full Name: Friday6661-Dev/Function_Python
Description: None
created_at: 2021-09-07T09:38:47Z
updated_at: 2021-09-07T09:38:51Z
pushed_at: 2021-09-07T09:38:48Z
Language: None
URL: https://github.com/Friday6661-Dev/Function_Python
Forks: 0
Stars: 0
Topics: 
README:
# Function_Python


File: 49_chanhyuklee_python_codingdojang.txt
Full Name: chanhyuklee/python_codingdojang
Description: None
created_at: 2021-01-25T06:39:11Z
updated_at: 2021-02-16T10:25:42Z
pushed_at: 2021-02-16T10:25:39Z
Language: Python
URL: https://github.com/chanhyuklee/python_codingdojang
Forks: 0
Stars: 0
Topics: 
README:
# python_codingdojang



File: 4_Artipel_PythonFlask.txt
Full Name: Artipel/PythonFlask
Description: None
created_at: 2018-09-25T15:16:36Z
updated_at: 2018-09-25T15:17:20Z
pushed_at: 2018-09-25T15:17:18Z
Language: Python
URL: https://github.com/Artipel/PythonFlask
Forks: 0
Stars: 0
Topics: 
README:
# PythonFlask



File: 505_DanteArcuri_pythonSensor.txt
Full Name: DanteArcuri/pythonSensor
Description: None
created_at: 2019-09-18T19:37:13Z
updated_at: 2019-09-19T19:17:06Z
pushed_at: 2019-09-19T19:17:04Z
Language: None
URL: https://github.com/DanteArcuri/pythonSensor
Forks: 0
Stars: 0
Topics: 
README:



File: 508_kader78877_python_quickbook_project.txt
Full Name: kader78877/python_quickbook_project
Description: None
created_at: 2022-02-10T17:27:29Z
updated_at: 2022-02-10T17:27:29Z
pushed_at: 2022-02-10T17:27:29Z
Language: None
URL: https://github.com/kader78877/python_quickbook_project
Forks: 0
Stars: 0
Topics: 
README:
# python_quickbook_project


File: 50_gauravagrwal_speech-recognition-with-python-and-flask.txt
Full Name: gauravagrwal/speech-recognition-with-python-and-flask
Description: None
created_at: 2024-05-31T22:17:57Z
updated_at: 2024-06-22T19:28:17Z
pushed_at: 2024-06-22T19:28:15Z
Language: HTML
URL: https://github.com/gauravagrwal/speech-recognition-with-python-and-flask
Forks: 0
Stars: 0
Topics: 
README:
[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fexamples%2Ftree%2Fmain%2Fpython%2Fflask3&demo-title=Flask%203%20%2B%20Vercel&demo-description=Use%20Flask%203%20on%20Vercel%20with%20Serverless%20Functions%20using%20the%20Python%20Runtime.&demo-url=https%3A%2F%2Fflask3-python-template.vercel.app%2F&demo-image=https://assets.vercel.com/image/upload/v1669994156/random/flask.png)

# Flask + Vercel

This example shows how to use Flask 3 on Vercel with Serverless Functions using the [Python Runtime](https://vercel.com/docs/concepts/functions/serverless-functions/runtimes/python).

## Demo

https://flask-python-template.vercel.app/

## How it Works

This example uses the Web Server Gateway Interface (WSGI) with Flask to enable handling requests on Vercel with Serverless Functions.

## Running Locally

```bash
npm i -g vercel
vercel dev
```

Your Flask application is now available at `http://localhost:3000`.

## One-Click Deploy

Deploy the example using [Vercel](https://vercel.com?utm_source=github&utm_medium=readme&utm_campaign=vercel-examples):

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fexamples%2Ftree%2Fmain%2Fpython%2Fflask3&demo-title=Flask%203%20%2B%20Vercel&demo-description=Use%20Flask%203%20on%20Vercel%20with%20Serverless%20Functions%20using%20the%20Python%20Runtime.&demo-url=https%3A%2F%2Fflask3-python-template.vercel.app%2F&demo-image=https://assets.vercel.com/image/upload/v1669994156/random/flask.png)



File: 511_druhalenko_python-ds.txt
Full Name: druhalenko/python-ds
Description: None
created_at: 2022-06-09T13:45:45Z
updated_at: 2022-06-09T13:54:28Z
pushed_at: 2022-06-09T13:54:23Z
Language: Python
URL: https://github.com/druhalenko/python-ds
Forks: 0
Stars: 0
Topics: 
README:



File: 516_JtDz_ejemplo_python.txt
Full Name: JtDz/ejemplo_python
Description: None
created_at: 2021-03-21T04:32:45Z
updated_at: 2021-03-30T06:53:03Z
pushed_at: 2021-03-30T06:53:01Z
Language: Python
URL: https://github.com/JtDz/ejemplo_python
Forks: 0
Stars: 0
Topics: 
README:
NOMBRE  : Judith Soledad
APELLIDO: Diaz Troncoso
NºLEGAJO: 15602-6




File: 518_BigbigMLGU_Python_dir1.txt
Full Name: BigbigMLGU/Python_dir1
Description: None
created_at: 2019-10-25T08:01:34Z
updated_at: 2019-10-25T08:01:34Z
pushed_at: 2019-10-25T08:01:35Z
Language: None
URL: https://github.com/BigbigMLGU/Python_dir1
Forks: 0
Stars: 0
Topics: 
README:



File: 51_vsoodles_Python.txt
Full Name: vsoodles/Python
Description: None
created_at: 2019-05-22T04:18:22Z
updated_at: 2019-06-15T08:35:43Z
pushed_at: 2019-06-15T08:35:42Z
Language: Python
URL: https://github.com/vsoodles/Python
Forks: 0
Stars: 0
Topics: 
README:
#i
#Python







#old readme# Python



File: 520_RamananRavichandran_python.txt
Full Name: RamananRavichandran/python
Description: None
created_at: 2019-11-05T20:45:24Z
updated_at: 2024-08-12T20:44:36Z
pushed_at: 2024-08-12T20:44:33Z
Language: Python
URL: https://github.com/RamananRavichandran/python
Forks: 0
Stars: 0
Topics: 
README:



File: 525_matej990_Python.txt
Full Name: matej990/Python
Description: None
created_at: 2018-03-18T11:09:56Z
updated_at: 2018-03-18T11:09:56Z
pushed_at: 2018-03-18T11:09:56Z
Language: None
URL: https://github.com/matej990/Python
Forks: 0
Stars: 0
Topics: 
README:



File: 528_wilkneMaia_construindo-apis-rest-python.txt
Full Name: wilkneMaia/construindo-apis-rest-python
Description: None
created_at: 2022-03-29T11:54:09Z
updated_at: 2022-03-29T13:04:32Z
pushed_at: 2022-03-29T20:16:01Z
Language: Python
URL: https://github.com/wilkneMaia/construindo-apis-rest-python
Forks: 0
Stars: 0
Topics: 
README:
# construindo-apis-rest-python

<https://github.com/cassiobotaro/construindo-apis-robustas>



File: 529_ajeetkbhardwaj_Data-Science-using-Python.txt
Full Name: ajeetkbhardwaj/Data-Science-using-Python
Description: None
created_at: 2021-10-06T03:33:08Z
updated_at: 2021-10-06T07:34:13Z
pushed_at: 2021-10-06T07:34:11Z
Language: Jupyter Notebook
URL: https://github.com/ajeetkbhardwaj/Data-Science-using-Python
Forks: 0
Stars: 0
Topics: 
README:
# Data-Science-using-Python
Using different datasets to analyse them using different 
tools of python such as pandas , numpy ,scipy django ,sympy etc.



File: 530_caioraveli_Python_Geek_Univeristy.txt
Full Name: caioraveli/Python_Geek_Univeristy
Description: None
created_at: 2020-09-26T01:23:08Z
updated_at: 2020-09-26T01:24:46Z
pushed_at: 2020-09-26T01:24:40Z
Language: Python
URL: https://github.com/caioraveli/Python_Geek_Univeristy
Forks: 0
Stars: 0
Topics: 
README:



File: 533_alekseibragin_Python.txt
Full Name: alekseibragin/Python
Description: None
created_at: 2020-10-20T16:31:47Z
updated_at: 2021-01-17T15:32:19Z
pushed_at: 2021-01-17T15:32:17Z
Language: Jupyter Notebook
URL: https://github.com/alekseibragin/Python
Forks: 0
Stars: 1
Topics: 
README:
Python



File: 534_krish11031998-pythonwhisperer_WeatherApp.txt
Full Name: krish11031998-pythonwhisperer/WeatherApp
Description: None
created_at: 2022-07-16T08:37:20Z
updated_at: 2022-07-16T08:43:26Z
pushed_at: 2022-07-23T09:57:51Z
Language: Swift
URL: https://github.com/krish11031998-pythonwhisperer/WeatherApp
Forks: 0
Stars: 0
Topics: 
README:



File: 535_Tahmid12Khan_Python.txt
Full Name: Tahmid12Khan/Python
Description: None
created_at: 2018-03-27T17:41:36Z
updated_at: 2018-03-27T17:47:32Z
pushed_at: 2018-03-27T17:47:31Z
Language: Python
URL: https://github.com/Tahmid12Khan/Python
Forks: 0
Stars: 0
Topics: 
README:



File: 536_s529296_python_and_flax.txt
Full Name: s529296/python_and_flax
Description: None
created_at: 2020-01-29T17:21:14Z
updated_at: 2020-05-05T18:33:21Z
pushed_at: 2020-05-05T18:33:19Z
Language: Python
URL: https://github.com/s529296/python_and_flax
Forks: 0
Stars: 1
Topics: 
README:
# Python and Flax
## Group Members: 
* Sneha Ojha [github](https://github.com/osneha)
* Noah Chase [github](https://github.com/s529296)
* Enid Maharjan [github](https://github.com/strygwyr555)
* Susan Maharjan [github](https://github.com/susanmaharjan)





File: 537_mdj2812_awesome-python3-webapp.txt
Full Name: mdj2812/awesome-python3-webapp
Description: None
created_at: 2020-02-08T07:33:13Z
updated_at: 2020-03-15T18:51:15Z
pushed_at: 2020-03-15T18:51:13Z
Language: Python
URL: https://github.com/mdj2812/awesome-python3-webapp
Forks: 0
Stars: 0
Topics: 
README:
awesome-python3-webapp
=====

A python webapp tutorial.


File: 538_rajusunagar_Face-detection-using-python.txt
Full Name: rajusunagar/Face-detection-using-python
Description: None
created_at: 2021-06-29T07:41:14Z
updated_at: 2021-06-29T07:42:49Z
pushed_at: 2021-06-29T07:42:45Z
Language: Python
URL: https://github.com/rajusunagar/Face-detection-using-python
Forks: 0
Stars: 0
Topics: 
README:



File: 539_Readrive_211016---BAEKJUN-4-2-with-Python.txt
Full Name: Readrive/211016---BAEKJUN-4-2-with-Python
Description: None
created_at: 2021-10-16T12:05:53Z
updated_at: 2021-10-16T12:06:26Z
pushed_at: 2021-10-16T12:06:23Z
Language: Python
URL: https://github.com/Readrive/211016---BAEKJUN-4-2-with-Python
Forks: 0
Stars: 0
Topics: 
README:



File: 541_pneumok_python.txt
Full Name: pneumok/python
Description: None
created_at: 2018-08-12T18:23:21Z
updated_at: 2018-08-12T18:34:22Z
pushed_at: 2022-12-08T02:21:53Z
Language: Python
URL: https://github.com/pneumok/python
Forks: 0
Stars: 0
Topics: 
README:
"#python" 



File: 542_tunino91_Learn-Python.txt
Full Name: tunino91/Learn-Python
Description: None
created_at: 2017-01-18T21:47:20Z
updated_at: 2020-02-22T16:23:39Z
pushed_at: 2020-02-22T16:23:37Z
Language: Python
URL: https://github.com/tunino91/Learn-Python
Forks: 0
Stars: 0
Topics: 
README:
# Learn-Python

First thing first, Python is hands down one of the most popular script languages out there. The reason being it is widely used in todays hot fields such as Data Science, Machine Learning and Deep Learning. I have prepared a single script full of comments that you will be able to see both in the command line as well as in the script itself. If you can follow every line as you run the script, you will be able to understand inner workings of Python. Enjoy!



File: 543_Tomboyzzz_python.txt
Full Name: Tomboyzzz/python
Description: None
created_at: 2018-06-20T01:36:52Z
updated_at: 2018-06-20T02:42:07Z
pushed_at: 2018-06-20T02:42:06Z
Language: Jupyter Notebook
URL: https://github.com/Tomboyzzz/python
Forks: 0
Stars: 0
Topics: 
README:
# python1


File: 551_AnjaliGummuluri-050_PythonNew.txt
Full Name: AnjaliGummuluri-050/PythonNew
Description: None
created_at: 2022-06-29T05:26:13Z
updated_at: 2022-06-29T05:26:13Z
pushed_at: 2022-06-29T05:26:13Z
Language: None
URL: https://github.com/AnjaliGummuluri-050/PythonNew
Forks: 0
Stars: 0
Topics: 
README:



File: 553_SajjadBrohi_snake-game-python.txt
Full Name: SajjadBrohi/snake-game-python
Description: None
created_at: 2019-11-26T14:00:27Z
updated_at: 2020-08-27T11:35:56Z
pushed_at: 2020-08-27T11:35:54Z
Language: Python
URL: https://github.com/SajjadBrohi/snake-game-python
Forks: 0
Stars: 0
Topics: 
README:
# Snake Game

Everyone's favorite Snake Xenzia game created in Python as a fun challenge. 

![Picture of game](https://i.imgur.com/oTnITfx.png)

## How to play

**Using an IDE**

The recommended way to run the game. Run the 'game.py' file inside PyCharm or any IDE that supports Python.

**Using the terminal**

Before using the source code, you will need to install tkinter using the following code:

```
sudo apt-get install python3-tk 
```

Download the source code and run the game through the terminal by opening game.py on python3 as follows:

```
python3 game.py
```

## Uses

1. tkinter (GUI)

2. Object Oriented Programming (MVC Pattern)



File: 554_jiayunyan_python_scrapy.txt
Full Name: jiayunyan/python_scrapy
Description: None
created_at: 2018-08-06T11:50:29Z
updated_at: 2018-08-06T12:36:40Z
pushed_at: 2018-08-06T12:36:39Z
Language: Python
URL: https://github.com/jiayunyan/python_scrapy
Forks: 0
Stars: 0
Topics: 
README:
# python_scrapy


File: 555_daniel-enriquez_python-website.txt
Full Name: daniel-enriquez/python-website
Description: None
created_at: 2021-03-06T05:17:15Z
updated_at: 2021-03-06T05:26:43Z
pushed_at: 2021-03-06T05:26:42Z
Language: Python
URL: https://github.com/daniel-enriquez/python-website
Forks: 0
Stars: 0
Topics: 
README:



File: 563_shubhamprasad26_python.txt
Full Name: shubhamprasad26/python
Description: None
created_at: 2020-03-19T15:23:05Z
updated_at: 2020-03-19T15:23:05Z
pushed_at: 2020-03-19T15:23:06Z
Language: None
URL: https://github.com/shubhamprasad26/python
Forks: 0
Stars: 0
Topics: 
README:



File: 564_athikrishnarao_Python_Anaconda_code.txt
Full Name: athikrishnarao/Python_Anaconda_code
Description: None
created_at: 2021-03-15T11:05:07Z
updated_at: 2021-03-15T11:05:10Z
pushed_at: 2021-03-15T11:30:55Z
Language: None
URL: https://github.com/athikrishnarao/Python_Anaconda_code
Forks: 0
Stars: 0
Topics: 
README:
# Python_Anaconda_code


File: 565_Ankitawani_Python-1.txt
Full Name: Ankitawani/Python-1
Description: None
created_at: 2017-02-17T11:07:37Z
updated_at: 2017-02-17T11:09:49Z
pushed_at: 2017-02-17T11:09:48Z
Language: Python
URL: https://github.com/Ankitawani/Python-1
Forks: 0
Stars: 0
Topics: 
README:
# Python-1


File: 567_chfolsjte_Python-.txt
Full Name: chfolsjte/Python-
Description: None
created_at: 2021-03-23T07:16:16Z
updated_at: 2021-03-23T07:16:24Z
pushed_at: 2021-03-23T07:16:22Z
Language: Python
URL: https://github.com/chfolsjte/Python-
Forks: 0
Stars: 0
Topics: 
README:



File: 569_daliasumona99_python_cf.txt
Full Name: daliasumona99/python_cf
Description: None
created_at: 2021-04-04T06:58:36Z
updated_at: 2021-04-04T07:01:17Z
pushed_at: 2021-04-04T07:01:15Z
Language: Python
URL: https://github.com/daliasumona99/python_cf
Forks: 0
Stars: 0
Topics: 
README:



File: 572_juansierra1182_python-api-challenge.txt
Full Name: juansierra1182/python-api-challenge
Description: None
created_at: 2023-01-26T14:06:16Z
updated_at: 2023-01-26T14:53:06Z
pushed_at: 2023-01-31T00:19:15Z
Language: Jupyter Notebook
URL: https://github.com/juansierra1182/python-api-challenge
Forks: 0
Stars: 0
Topics: 
README:



File: 573_MeteorVE_aws-lambda-api-gateway-python-tutorial.txt
Full Name: MeteorVE/aws-lambda-api-gateway-python-tutorial
Description: None
created_at: 2020-10-22T16:25:54Z
updated_at: 2021-03-17T21:25:15Z
pushed_at: 2021-03-17T21:25:13Z
Language: Python
URL: https://github.com/MeteorVE/aws-lambda-api-gateway-python-tutorial
Forks: 1
Stars: 1
Topics: 
README:
註 : 此原為預計放在部落格之文章，故記錄方式以主題式陳述。

[DEMO請點我 (更新: 爬取 PTT 是使用 pylib 套件，若該服務down，此網頁也無法得到正確 respone)](https://meteorve.github.io/aws-lambda-api-gateway-python-tutorial/)

<!-- more -->



# 究極的懶人包

這篇算是記錄一點冤枉路，但官方在某篇 tutorial 其實介紹的很不錯
(我做完全部才看到該教學)

雖然自己解還是比較扎實一點，但如果想在短時間搭建出該服務
可以直接造訪，跟著做。

[建立基本 Web 應用程式](https://aws.amazon.com/tw/getting-started/hands-on/build-web-app-s3-lambda-api-gateway-dynamodb/?e=gs2020&p=fullstack)


如果想要了解自己做會遇到什麼問題，或是客製化更多細項
也歡迎查閱下方其他 title 介紹的項目。


# 認識 Lambda


首先我們要知道 ... 你可以想像你正要利用 Lambda 實作 RESTful API。
外部(可能是前端)通過某個方式，傳送一個 json 檔案給 Lambda
然後 Lambda 經過某些處理，也回傳一個 json 檔案回去。

Lambda 做的就是幫忙中介處理的角色
你不需要額外建一個 Server，你不需要開 port 或是處理接口相關
這邊就是一個處理點，若你想連 DB，你可以透過 Lambda 再另外做連接
(但畢竟是 AWS 相關產品，可以連的 ... 就會是 AWS 相關其他服務 ex:EC2 ...)

了解了 Lambda 所在的角色之後，我很建議先看過這篇。
https://aws.amazon.com/tw/getting-started/hands-on/run-serverless-code/

跟著做一次(不過 python 選 3.7 沒關係)，然後我們可以瞭解到他大概的運作


這邊多解釋一些東西 : 

- 設定測試事件 : 我們可以把這個當成是前端，寫一個 json 傳出去
    例如 : ``{'location':'Taipei'}`` (這邊先不用改)
- 預設的 python code，功用只是讀了你傳的 json (包在 event 裡面)，然後回傳第一個給你
    以下是預設的範例 code。
```python
def lambda_handler(event, context):
    #print("Received event: " + json.dumps(event, indent=2))
    print("value1 = " + event['key1'])
    print("value2 = " + event['key2'])
    print("value3 ? = " + event['key3'])
    return event['key1']  # Echo back the first key value
    #raise Exception('Something went wrong')

```


為了更好的了解誰傳入、誰處理、怎麼讀傳入的東西 ... 等等，這邊另外做一個例子解釋。

首先，新增一個測試事件

![](https://i.imgur.com/fG1C0R8.png)

事件範本並不重要，我們簡單就好。

![](https://i.imgur.com/HBMUrOW.png)

建立好之後，我把 lambda_function.py 裡面的內容改成 : 

```python lambda_function.py
import json

def lambda_handler(event, context):
    print("您查詢的城市:" + event['location'])
    # Do some backend process, 
    # we get the information: Taipei is raining.
    return {"Taipei":"Raining"}
```

按下測試按鈕，沒意外的話你會得到以下 : 

```
Response:
{
  "Taipei": "Raining"
}
```

我想，做到這邊你應該更瞭解 Lambda 的用途是什麼，以及該怎麼使用他了。


# 如何引入自己的函式庫


然而，Lambda 那個環境並不能使用第三方的 python libaray
你必須自己上傳該函式庫上去。

這邊提供一個我比較喜歡的方式 : 建 virtualenv，再拿該 Lib 上傳。

之前聽聞可以上傳 virtualenv 上去什麼的，不是很懂，自己亂試+關鍵字才查到這篇文
[“errorMessage”: “Unable to import module 'lambda_function'”](https://stackoverflow.com/questions/48984720/errormessage-unable-to-import-module-lambda-function)

這邊簡介一下 : 
1. 先找一個你習慣工作的目錄，也許他叫 ``project``。``cd project``
    或是你在 ``project`` 啟動你的 terminal。
2. ``virtualenv venv --python=python3.6``，這邊的 python 3.6 可以換成你 local 的版本。
    - 如果你是 Windows，請參考你環境變數內的 python 程式命名。
    - 例如我這邊是 ``virtualenv venv --python=python3.exe
``
3. 如果你在 Linux，請使用 ``source venv/bin/activate`` 來做虛擬環境啟動。
    如果是在 Windows，請使用 ``source venv/Scripts/activate``
4. ``pip install some_lib``，例如我想要裝 numpy，就 ``pip install numpy``
  - 通常 pip 都需要先 upgrade 才能使用，如果出現相關訊息，可以先按照他寫的方式升級。 
5. 如果你在 windows，你會發現創建了一個 venv 的資料夾，進到
    ``venv/lib/python3.6/site-packages`` 裡面，你會看到很多資料夾
    這些都是不同套件，請找你需要的，把他複製出去，假設放在 ``project`` 資料夾吧。
    (Linux 請使用 cp 去複製
    例如 ``cp -r venv/lib/python3.6/site-packages/* .``)
6. 選取那些套件資料夾，以及你的 python 檔案。壓縮起來，上傳上去即可。
  - python 檔案讓他命名 ``lambda_function.py``，也就是跟範例檔案一樣，這樣就能抓到


以下是檔案結構舉例

```txt 檔案結構舉例
project.zip
└ numpy/底下很多套件本身的東西
└ cv2/底下很多套件本身的東西
└ request/底下很多套件本身的東西
└ lambda_function.py
```


其實，也不一定要命名成 ``lambda_function.py``
不過因為當初我們新建 Lambda 函數時，是走自動 example 幫我們建好的
所以如這張圖片顯示，處理常式是 ``lambda_function.lambda_handler``
( lambda_function 檔案裡面的 lambda_handler() 函式。)
所以也能改成自己的，像是 main.py 搭配 lambda_handler()  這樣。

![](https://i.imgur.com/UXgr0Zq.png)

順帶一提，如果你的程式需要跑比較久，記得把 timeout 時間設定久一點 (有個 "逾時" 的欄位)
像是我的從 3 秒改成 10 秒，彈性比較大。



# API Gateway

有了這個 api gateway，我們才能將我們的 Lambda 和前端做一個資訊交換。

## 建立

1. AWS -> Service 選擇 API Gateway -> 建立 API -> 找到 RESTful API 選建置
  然後將資訊填一下，設定名字就好 
  ![](https://i.imgur.com/NRv3c3E.png)

2. 建立方法，我這邊是建 GET，然後把名字等等填一下
  有遇到問連接 Lambda 的函數的話，那邊填你在 Lambda 的 project 名字。
  他會問你是否確定要連接。
  ![](https://i.imgur.com/I9SdzKT.png)

3. 進到 **整合請求**，點最下面映射範本，設定如圖。
  要自己按新增映射範本，輸入 ``application/json``
  下方的映射範本，則是看你的 Field 有哪些，
  例如我傳入的參數就兩個 : board、num，可以按照自己的改相對應字串。
  記得按下面的儲存。
    - **注意 : 冒號後面的全部都要用雙引號刮起來。**
  ![](https://i.imgur.com/0ooZjTS.png)

```
    #set($inputRoot = $input.path('$'))
    {
        "board": "$input.params('board')",
        "num": "$input.params('num')"
    }
```
4. Deploy，也就是部署 API，點了之後會問你階段名稱，你可以打 dev、或是 test 之類的。
  成功部署之後，他會給你一個網址，你就可以用那個網址做測試了。
  ![](https://i.imgur.com/WwtIYSA.png)
5. 測試方式 : 瀏覽器直接輸入該網址，並且加上參數。
  舉例 : ``https://7jpojemvw7.execute-api.us-east-2.amazonaws.com/test/?board=Taipei&num=3``
  可以將其拆解為 ``他提供給你複製的網址/?key1=value1&key2=value2``
  以上請自行替換，我的兩個 key 分別是 board 和 num，我想應該舉例的算清楚。
  

## 開啟 CORS

1. 從 "操作" 去點選 **啟用 CORS**
  ![](https://i.imgur.com/fMc1jlx.png)
2. 然後其實預設的就差不多了，儲存
  ![](https://i.imgur.com/6ujK4pP.png)
3. 部署 API，忘記的可以參考上面的第四步驟。


- 一些官方教學
  - [官方文件: how-to-cors](https://docs.aws.amazon.com/zh_tw/apigateway/latest/developerguide/how-to-cors.html)
  - [官方文件: 測試 CORS](https://docs.aws.amazon.com/zh_tw/apigateway/latest/developerguide/apigateway-test-cors.html)
    - 在做這個的時候，記得指令是 ``curl -v -X OPTIONS https://your_api_url_and_parameter`` 
      - -v 代表列出溝通過程，-X OPTIONS 是會再從中選某些設定。
      - OPTIONS 記得要打 ! 
      - 然後就能看到 ``Access-Control-Allow-Origin: *`` 和 ``Access-Control-Allow-Headers``



## 此階段可能遇到的問題 : 

### 參數傳不進去，明明 Lambda 那邊跑測試沒問題。

如果拿去測試，卻發現參數傳不進去 (這點你可以從回傳的資訊發現，他會告訴你卡在後端哪行。)
因為後端你從 event 去提取參數，若你沒成功傳入，他則會讀到 None
後面如果有用到計算，可能就會直接造成 Lambda 端崩潰。

這部分請檢查上面第三點的 **整合請求** 有沒有遇到問題
我的**映射範本**是改了很多次，查了很多地方最後才確認是那樣寫的
那邊寫錯就會直接卡住。

另外提一下，其實後來看了一下官方在整合請求這部分的說明   
其實如果我們不去新增映射範本，
即使遇到 Content-Type 未指定的情況 (送 request 的 header 沒有含 Content-Type)
他也會自己把它判為 application/json。

![](https://i.imgur.com/9WjwQTP.png)

- [官方對整合傳遞行為的解釋](https://docs.aws.amazon.com/zh_tw/apigateway/latest/developerguide/integration-passthrough-behaviors.html)


### CORS 問題還是無法解決

這邊我卡了很久。
主要是前端 fetch 那邊，我不知道 header 該放哪些參數
又看了有些討論以及官方文檔說要在 Lambda 的 return 裡面加上 header
感覺都做了卻還是一直出現 CORS 問題。

最後，我發現反而是我給太多 Header 了，然後伺服器拒收。
(感謝大神朋友幫忙找問題 ...)

這邊放一下最終我前端寫的資訊 

```JS index.js
const response = await fetch(url,{
    method: 'GET',
    headers: {
           'Content-Type': 'application/json'
    }
  }).then(res => res.json()) // 要轉成 json 才能在 console 看懂
    .catch(error => console.error('Error:', error))
    .then(response => { console.log('Success:', response); return response});
    // 如果沒有寫 return response，你的 const response 仍然是 null。
```

相見恨晚，我解決的隔天同學貼了個這個給我看 
([官方文檔: 新增互動性至您的 Web 應用程式](https://aws.amazon.com/tw/getting-started/hands-on/build-web-app-s3-lambda-api-gateway-dynamodb/module-five/))
雖然因為他的範例和我自己做得有些許不一樣，但主要參考 header 部分就好。

```JS
var callAPI = (firstName,lastName)=>{
            var myHeaders = new Headers();
            myHeaders.append("Content-Type", "application/json");
            var raw = JSON.stringify({"firstName":firstName,"lastName":lastName});
            var requestOptions = {
                method: 'POST',
                headers: myHeaders,
                body: raw,
                redirect: 'follow'
            };
            fetch("YOUR-API-INVOKE-URL", requestOptions)
            .then(response => response.text())
            .then(result => alert(JSON.parse(result).body))
            .catch(error => console.log('error', error));
        }
```



以及後端在做 return 會回傳的東西。
(參考 : [官方文件: how-to-cors](https://docs.aws.amazon.com/zh_tw/apigateway/latest/developerguide/how-to-cors.html) )

```python 
def lambda_handler(event, context):
  # some code
  # ...
  
  return {
        'statusCode': 200,
        'headers': {
            'Access-Control-Allow-Origin': "*",
            "Access-Control-Allow-Credentials" : "true",
            'Access-Control-Allow-Methods': 'OPTIONS,POST,GET',
            'Access-Control-Allow-Headers': 'Content-Type'
        },
        'body': my_json_file # 換成你要 return 的資訊，type: dictionary
    };
```

跑測試的時候，得到的 response 大概會長這樣 : 
![](https://i.imgur.com/XRPs3C4.png)



# 串前端



其實在前面，把 Lambda、API Gateway、CORS 部分都處理好之後，
串前端的部分就是看你要做得好還是做的爛了 (x)

可以不套 CSS 就完成練習，也能默默地美化好 (?)

個人因為搭配前一個作業，利用 Docker 去跑一個 apache，所以就把我的前端檔案佈署過去，就沒什麼問題了。
而且因為 CORS 處理好了，所以其實用 Local file 也能做 fetch 的動作，
Local 運作沒問題，上傳上去也不會有太大問題。

如果懶得也不想自己弄一個 Server 環境，可以參考 AWS 的 Amplify 平台
你只要把 index.html 等等壓縮成 zip 然後上傳就可以跑了，超無腦。 



# 成果展示



Lambda 那邊做了爬蟲，爬蟲結果回傳前端，差不多是這次做的東西。
其實處理時間大概要 4~5 秒 (因為不是純爬 html)，只是用 GIF 呈現所以把那些 frame 剪掉了 XD



![](https://i.imgur.com/kw3zZha.gif)





# Note

For 迴圈在 JS 該 in 還是 of : 

- [Src](https://kanboo.github.io/2018/01/30/JS-for-of-forin/)

1. 建議：在迭代物件屬性時，使用 `for...in`；在迭代陣列時，使用 `for...of`。
2. `for...in` 輸出的是屬性名稱(key)，`for...of` 輸出的是值(value)
3. `for...of` 是 ES6 的新語法。修復了ES5 for…in 的不足
4. `for...of` 不能迭代物件，需要透過和 Object.keys() 搭配使用



- table 如果想要一格有三格寬可以使用 ``<td colspan='3'>``
- table 如果想要平均分配列寬可以使用 ``table-layout: fixed;``
- 如果套了 bootstrap 4 有一些強制 width 100%，可以在 class 加 `` w-auto ``
  - [ref](https://stackoverflow.com/questions/10687306/why-do-twitter-bootstrap-tables-always-have-100-width)



# Other Ref

[Using_Fetch](https://developer.mozilla.org/zh-TW/docs/Web/API/Fetch_API/Using_Fetch)

[CORS 介紹 by mozilla](https://developer.mozilla.org/zh-TW/docs/Web/HTTP/CORS)

[一些 form 傳遞範例](https://gist.github.com/justsml/529d0b1ddc5249095ff4b890aad5e801)

[onclick 複習](https://www.w3schools.com/jsref/event_onclick.asp)

[愷開也有紀錄關於 CORS](https://medium.com/d-d-mag/%E5%92%8C-cors-%E8%B7%9F-cookie-%E6%89%93%E4%BA%A4%E9%81%93-dd420ccc7399)

[Bootstrap 常用 Layout](https://andy6804tw.github.io/2018/01/06/bootstrap-tutorial(1)/)



<div style="text-align: center">End</div>
-----------------------------------

![](https://i.imgur.com/888jFLr.gif)

<div style="text-align: right">2020.10.22</div>



File: 574_syedkamaluddin_codemind-python.txt
Full Name: syedkamaluddin/codemind-python
Description: None
created_at: 2022-10-14T11:47:35Z
updated_at: 2022-10-14T11:47:43Z
pushed_at: 2022-10-31T11:24:59Z
Language: Python
URL: https://github.com/syedkamaluddin/codemind-python
Forks: 0
Stars: 0
Topics: 
README:



File: 577_PratikshaChaudhari26_Python-code.txt
Full Name: PratikshaChaudhari26/Python-code
Description: None
created_at: 2023-01-04T18:07:51Z
updated_at: 2023-01-04T18:09:58Z
pushed_at: 2023-01-04T18:11:11Z
Language: Python
URL: https://github.com/PratikshaChaudhari26/Python-code
Forks: 0
Stars: 0
Topics: 
README:



File: 580_AZANIR_100day_Python.txt
Full Name: AZANIR/100day_Python
Description: None
created_at: 2022-11-06T20:59:45Z
updated_at: 2022-11-06T20:59:45Z
pushed_at: 2022-11-06T20:59:46Z
Language: None
URL: https://github.com/AZANIR/100day_Python
Forks: 0
Stars: 0
Topics: 
README:
# 100day_Python


File: 581_atock_Python.txt
Full Name: atock/Python
Description: None
created_at: 2017-11-02T23:33:51Z
updated_at: 2017-11-02T23:33:51Z
pushed_at: 2017-11-02T23:33:51Z
Language: None
URL: https://github.com/atock/Python
Forks: 0
Stars: 0
Topics: 
README:



File: 582_ma980113_python.txt
Full Name: ma980113/python
Description: None
created_at: 2019-09-09T13:33:49Z
updated_at: 2019-09-09T13:33:49Z
pushed_at: 2019-09-09T13:33:49Z
Language: None
URL: https://github.com/ma980113/python
Forks: 0
Stars: 0
Topics: 
README:



File: 583_SSgolds_Python-.txt
Full Name: SSgolds/Python-
Description: None
created_at: 2016-12-18T17:59:14Z
updated_at: 2016-12-18T17:59:14Z
pushed_at: 2016-12-18T17:59:15Z
Language: None
URL: https://github.com/SSgolds/Python-
Forks: 0
Stars: 0
Topics: 
README:
# Python-


File: 584_nikhilbhat920_elctronic_python-MC-interface.txt
Full Name: nikhilbhat920/elctronic_python-MC-interface
Description: None
created_at: 2020-03-30T12:45:18Z
updated_at: 2020-03-30T12:46:17Z
pushed_at: 2020-03-30T12:46:15Z
Language: Python
URL: https://github.com/nikhilbhat920/elctronic_python-MC-interface
Forks: 0
Stars: 0
Topics: 
README:



File: 585_matrikashukla_Python-Functions-on-DataQuest.txt
Full Name: matrikashukla/Python-Functions-on-DataQuest
Description: None
created_at: 2020-09-23T12:52:57Z
updated_at: 2020-09-23T14:27:25Z
pushed_at: 2020-09-23T14:27:23Z
Language: None
URL: https://github.com/matrikashukla/Python-Functions-on-DataQuest
Forks: 0
Stars: 0
Topics: 
README:
# Python-Functions-on-DataQuest

# EXTRACT FUNCTION AND FREQUENCY FUNCTION

1 .Write a function named extract() that can extract any column you want from the apps_data data set.
   The function should take in the index number of a column as input (name the parameter as you want).
   Inside the function's definition:
   Create an empty list.
   Loop through the apps_data data set (excluding the header). Extract only the value you want by using the parameter (which is expected to be an index number).
   Append that value to the empty list.
   Return the list containing the values of the column.
   Use the extract() function to extract the values in the prime_genre column. Store them in a variable named genres. The index number of this column is 11.
 
 2.Write a function named freq_table() that generates a frequency table for any list.
   The function should take in a list as input.
   Inside the function's body, write code that generates a frequency table for that list and stores the table in a dictionary.
   Return the frequency table as a dictionary.
   Use the freq_table() function on the genres list (already defined from the previous screen) to generate the frequency table for the prime_genre column. Store the frequency        table to a variable named genres_ft.
   Feel free to experiment with the extract() and freq_table() functions to easily create frequency tables for any column you want.
   
# FREQUENCY TABLE   

 3.Write a function named freq_table() that generates a frequency table for any column in our iOS apps data set.
   The function should take the index number of a column in as an input (name the parameter as you want).
   Inside the function's body:
   Loop through the apps_data data set (don't include the header row) and extract the value you want by using the parameter (which is expected to be an index number).
   Build the frequency table as a dictionary.
   The function should return the frequency table as a dictionary.
   Use the freq_table() function to generate a frequency table for the user_rating column (the index number of this column is 7). Store the table in a variable named ratings_ft.  

# MEAN FUNCTION
 
 4.Write a function named mean() that computes the mean for any column we want from a data set.
   The function should take in two inputs: a data set and an index value.
   Inside the body of the mean() function, use the extract() function to extract the values of a column into a separate list, and then compute the mean of the values in that        list using find_sum() and find_length().
   The function should return the mean of the column.
   Use the mean() function to compute the mean of the price column (index number 4). Assign the result to a variable named avg_price.



File: 586_Lalitha307_python.txt
Full Name: Lalitha307/python
Description: None
created_at: 2022-05-16T00:36:59Z
updated_at: 2022-06-06T01:34:19Z
pushed_at: 2022-05-16T00:37:00Z
Language: None
URL: https://github.com/Lalitha307/python
Forks: 0
Stars: 0
Topics: 
README:



File: 587_aur-archive_python-docopt.txt
Full Name: aur-archive/python-docopt
Description: None
created_at: 2015-08-17T09:28:09Z
updated_at: 2015-08-17T09:28:12Z
pushed_at: 2015-08-17T09:28:11Z
Language: Shell
URL: https://github.com/aur-archive/python-docopt
Forks: 0
Stars: 0
Topics: 
README:



File: 589_ThinkGuy_PythonLearning.txt
Full Name: ThinkGuy/PythonLearning
Description: None
created_at: 2017-10-04T13:31:58Z
updated_at: 2017-10-04T13:31:58Z
pushed_at: 2017-10-04T13:31:58Z
Language: None
URL: https://github.com/ThinkGuy/PythonLearning
Forks: 0
Stars: 0
Topics: 
README:



File: 590_reddress_python32-scripts.txt
Full Name: reddress/python32-scripts
Description: None
created_at: 2014-10-22T19:50:56Z
updated_at: 2014-10-22T19:52:47Z
pushed_at: 2014-05-26T17:00:57Z
Language: None
URL: https://github.com/reddress/python32-scripts
Forks: 0
Stars: 0
Topics: 
README:



File: 591_Artemii181_python.txt
Full Name: Artemii181/python
Description: None
created_at: 2020-07-14T19:19:48Z
updated_at: 2020-08-10T09:34:41Z
pushed_at: 2020-08-10T09:34:39Z
Language: Python
URL: https://github.com/Artemii181/python
Forks: 0
Stars: 0
Topics: 
README:



File: 593_alexandreab_python-sudoku.txt
Full Name: alexandreab/python-sudoku
Description: None
created_at: 2019-01-29T02:47:28Z
updated_at: 2019-02-10T19:41:54Z
pushed_at: 2019-02-10T19:41:52Z
Language: Python
URL: https://github.com/alexandreab/python-sudoku
Forks: 0
Stars: 1
Topics: 
README:
# python-sudoku

[![Build Status](https://travis-ci.com/alexandreab/python-sudoku.svg?branch=master)](https://travis-ci.com/alexandreab/python-sudoku)

[![codecov](https://codecov.io/gh/alexandreab/python-sudoku/branch/master/graph/badge.svg)](https://codecov.io/gh/alexandreab/python-sudoku)



File: 595_xinghuang-gao_statistics.python.txt
Full Name: xinghuang-gao/statistics.python
Description: None
created_at: 2020-05-26T14:17:52Z
updated_at: 2020-06-13T03:56:47Z
pushed_at: 2020-06-13T03:56:45Z
Language: Jupyter Notebook
URL: https://github.com/xinghuang-gao/statistics.python
Forks: 0
Stars: 0
Topics: 
README:



File: 596_Dominik12345_Python.txt
Full Name: Dominik12345/Python
Description: None
created_at: 2017-11-08T16:10:58Z
updated_at: 2017-11-08T16:11:36Z
pushed_at: 2017-12-15T16:22:39Z
Language: Python
URL: https://github.com/Dominik12345/Python
Forks: 0
Stars: 0
Topics: 
README:



File: 5_MohamadBahgat_Python_Elaboration.txt
Full Name: MohamadBahgat/Python_Elaboration
Description: None
created_at: 2022-10-11T05:45:26Z
updated_at: 2022-10-11T05:48:27Z
pushed_at: 2022-10-11T06:35:14Z
Language: None
URL: https://github.com/MohamadBahgat/Python_Elaboration
Forks: 0
Stars: 0
Topics: 
README:



File: 600_tlat1979_python-games.txt
Full Name: tlat1979/python-games
Description: None
created_at: 2020-01-28T15:34:13Z
updated_at: 2020-01-28T17:01:09Z
pushed_at: 2022-12-08T07:03:34Z
Language: HTML
URL: https://github.com/tlat1979/python-games
Forks: 0
Stars: 0
Topics: 
README:
# python-games


File: 601_jtloong_udemy-python-for-data-science.txt
Full Name: jtloong/udemy-python-for-data-science
Description: None
created_at: 2017-08-04T00:57:41Z
updated_at: 2017-12-15T20:33:13Z
pushed_at: 2017-12-17T00:31:12Z
Language: Jupyter Notebook
URL: https://github.com/jtloong/udemy-python-for-data-science
Forks: 0
Stars: 0
Topics: python
README:
# udemy-python-for-data-science



File: 602_dnrsm_Introduction-to-Computation-and-Programming-Using-Python.txt
Full Name: dnrsm/Introduction-to-Computation-and-Programming-Using-Python
Description: None
created_at: 2018-05-13T10:37:20Z
updated_at: 2018-05-13T13:51:55Z
pushed_at: 2018-05-13T13:51:54Z
Language: Python
URL: https://github.com/dnrsm/Introduction-to-Computation-and-Programming-Using-Python
Forks: 0
Stars: 0
Topics: 
README:



File: 603_ama0322_Algorithms-in-Python.txt
Full Name: ama0322/Algorithms-in-Python
Description: None
created_at: 2017-12-13T22:14:12Z
updated_at: 2018-07-15T22:01:27Z
pushed_at: 2018-02-19T00:19:52Z
Language: Python
URL: https://github.com/ama0322/Algorithms-in-Python
Forks: 0
Stars: 0
Topics: 
README:
# Algorithms written in Python



File: 605_gregcompton_dymo-python-test.txt
Full Name: gregcompton/dymo-python-test
Description: None
created_at: 2021-11-30T22:51:37Z
updated_at: 2021-11-30T22:52:00Z
pushed_at: 2021-11-30T22:51:58Z
Language: Python
URL: https://github.com/gregcompton/dymo-python-test
Forks: 0
Stars: 0
Topics: 
README:
using this tutorial
https://www.youtube.com/watch?v=trKAtdVjAus


dependencies: 

- pip install pywin32



File: 606_brunomoellerr_python-calculator.txt
Full Name: brunomoellerr/python-calculator
Description: None
created_at: 2022-03-19T19:44:43Z
updated_at: 2022-03-19T19:44:49Z
pushed_at: 2022-03-19T19:44:46Z
Language: Python
URL: https://github.com/brunomoellerr/python-calculator
Forks: 0
Stars: 0
Topics: 
README:
## Python Calculator

not all the buttons work. This calculator only has basic functions and it was made for PyQT studies purposes.


File: 607_AmbreBA_projet_python2.txt
Full Name: AmbreBA/projet_python2
Description: None
created_at: 2020-11-03T12:11:02Z
updated_at: 2020-11-03T12:11:07Z
pushed_at: 2020-11-03T12:11:04Z
Language: None
URL: https://github.com/AmbreBA/projet_python2
Forks: 0
Stars: 0
Topics: 
README:
# projet_python2


File: 608_DayanLesly_Python-Calculator.txt
Full Name: DayanLesly/Python-Calculator
Description: None
created_at: 2020-02-08T14:14:29Z
updated_at: 2020-02-08T14:17:37Z
pushed_at: 2020-02-08T14:17:35Z
Language: None
URL: https://github.com/DayanLesly/Python-Calculator
Forks: 0
Stars: 0
Topics: 
README:



File: 609_fryyang_pythonProject-.txt
Full Name: fryyang/pythonProject-
Description: None
created_at: 2022-04-29T08:58:27Z
updated_at: 2022-04-29T08:58:27Z
pushed_at: 2022-04-29T08:58:27Z
Language: None
URL: https://github.com/fryyang/pythonProject-
Forks: 0
Stars: 0
Topics: 
README:



File: 612_limitx_python_test.txt
Full Name: limitx/python_test
Description: None
created_at: 2018-03-22T06:03:47Z
updated_at: 2018-03-22T06:40:26Z
pushed_at: 2018-03-22T06:40:24Z
Language: Python
URL: https://github.com/limitx/python_test
Forks: 0
Stars: 0
Topics: 
README:



File: 613_shivahadi_5099-Python.txt
Full Name: shivahadi/5099-Python
Description: None
created_at: 2020-02-03T15:26:16Z
updated_at: 2020-02-03T15:26:16Z
pushed_at: 2020-02-03T15:26:17Z
Language: None
URL: https://github.com/shivahadi/5099-Python
Forks: 0
Stars: 0
Topics: 
README:



File: 618_kelvanince1_python-blackjack.txt
Full Name: kelvanince1/python-blackjack
Description: None
created_at: 2017-01-04T17:28:52Z
updated_at: 2017-01-04T17:29:39Z
pushed_at: 2018-02-20T22:42:06Z
Language: Python
URL: https://github.com/kelvanince1/python-blackjack
Forks: 0
Stars: 0
Topics: 
README:
Blackjack created using Python3. 
Play it in your terminal. 

1) Copy my code into your text editor.
2) In your terminal or command line, type 'python filename.py' (where filename is whatever name you save my code as.
3) Play the game.

You may need to install Python3 if you don't have it on your computer. 



File: 619_merc1er_binary-tree-python.txt
Full Name: merc1er/binary-tree-python
Description: None
created_at: 2017-07-10T10:55:14Z
updated_at: 2017-07-10T10:59:09Z
pushed_at: 2020-01-18T06:46:25Z
Language: Python
URL: https://github.com/merc1er/binary-tree-python
Forks: 0
Stars: 0
Topics: 
README:



File: 620_ArchanaRajan29_Pycaret_Python.txt
Full Name: ArchanaRajan29/Pycaret_Python
Description: None
created_at: 2021-01-05T05:34:05Z
updated_at: 2021-01-05T05:34:41Z
pushed_at: 2021-01-05T05:34:39Z
Language: Jupyter Notebook
URL: https://github.com/ArchanaRajan29/Pycaret_Python
Forks: 0
Stars: 0
Topics: 
README:
# Pycaret_Python


File: 623_Tbone-grady_Basic-python-webcrawler.txt
Full Name: Tbone-grady/Basic-python-webcrawler
Description: None
created_at: 2017-03-18T23:51:03Z
updated_at: 2017-03-18T23:53:02Z
pushed_at: 2017-03-18T23:53:01Z
Language: Python
URL: https://github.com/Tbone-grady/Basic-python-webcrawler
Forks: 0
Stars: 0
Topics: 
README:



File: 624_cakin24_python_auto_maintain.txt
Full Name: cakin24/python_auto_maintain
Description: None
created_at: 2019-02-16T04:06:08Z
updated_at: 2019-02-16T04:06:33Z
pushed_at: 2019-02-16T04:06:32Z
Language: Python
URL: https://github.com/cakin24/python_auto_maintain
Forks: 0
Stars: 0
Topics: 
README:



File: 625_darya-lap_python_practice.txt
Full Name: darya-lap/python_practice
Description: None
created_at: 2017-10-07T08:21:25Z
updated_at: 2017-10-07T08:21:25Z
pushed_at: 2017-10-07T08:21:25Z
Language: None
URL: https://github.com/darya-lap/python_practice
Forks: 0
Stars: 0
Topics: 
README:



File: 626_khaaat_Python-Web-Game.txt
Full Name: khaaat/Python-Web-Game
Description: None
created_at: 2023-11-10T00:49:20Z
updated_at: 2024-03-25T01:51:53Z
pushed_at: 2023-11-17T05:06:55Z
Language: JavaScript
URL: https://github.com/khaaat/Python-Web-Game
Forks: 0
Stars: 0
Topics: 
README:
Guessing Game for Python Final Project



File: 627_Shravendra_Web_Scraping_Using_Python.txt
Full Name: Shravendra/Web_Scraping_Using_Python
Description: None
created_at: 2022-11-06T19:14:06Z
updated_at: 2022-11-07T06:07:33Z
pushed_at: 2022-11-07T06:07:29Z
Language: Jupyter Notebook
URL: https://github.com/Shravendra/Web_Scraping_Using_Python
Forks: 0
Stars: 0
Topics: 
README:



File: 629_stevexiaofei_python-.txt
Full Name: stevexiaofei/python-
Description: None
created_at: 2020-11-11T16:10:29Z
updated_at: 2020-11-14T09:18:43Z
pushed_at: 2020-11-29T12:24:34Z
Language: None
URL: https://github.com/stevexiaofei/python-
Forks: 0
Stars: 0
Topics: 
README:
# python note

## Getting Super Powers

Becoming a super hero is a fairly straight forward process:

```
$ give me super-powers
```

{% hint style="info" %}
 Super-powers are granted randomly so please submit an issue if you're not happy with yours.
{% endhint %}

Once you're strong enough, save the world:

```
// Ain't no code for that yet, sorry
echo 'You got to trust me on this, I saved the world'
```






File: 631_amn-mishra_Python_DSA_Practice.txt
Full Name: amn-mishra/Python_DSA_Practice
Description: None
created_at: 2022-11-20T18:20:28Z
updated_at: 2022-11-27T09:26:35Z
pushed_at: 2023-02-01T06:20:42Z
Language: Python
URL: https://github.com/amn-mishra/Python_DSA_Practice
Forks: 0
Stars: 0
Topics: 
README:
# Python_DSA_Practice


File: 633_G90SG_Python-Palindrome.txt
Full Name: G90SG/Python-Palindrome
Description: None
created_at: 2020-10-26T09:31:45Z
updated_at: 2021-02-21T17:40:18Z
pushed_at: 2021-02-21T17:40:16Z
Language: Python
URL: https://github.com/G90SG/Python-Palindrome
Forks: 0
Stars: 0
Topics: 
README:
# Python Palindrome
Create a Python Program to accept input of a word or string from a user, then advise whether it is a Palindrome



File: 634_zxcmider_PythonApplication8.txt
Full Name: zxcmider/PythonApplication8
Description: None
created_at: 2022-01-17T07:50:32Z
updated_at: 2022-01-17T07:50:37Z
pushed_at: 2022-02-28T08:41:52Z
Language: Python
URL: https://github.com/zxcmider/PythonApplication8
Forks: 0
Stars: 0
Topics: 
README:



File: 635_Maharshpatel1709_Cricket-alerts-in-Python.txt
Full Name: Maharshpatel1709/Cricket-alerts-in-Python
Description: None
created_at: 2021-01-26T11:38:55Z
updated_at: 2022-07-19T12:36:31Z
pushed_at: 2021-01-26T11:41:50Z
Language: Python
URL: https://github.com/Maharshpatel1709/Cricket-alerts-in-Python
Forks: 0
Stars: 1
Topics: 
README:



File: 638_sgowda_python-setup.txt
Full Name: sgowda/python-setup
Description: None
created_at: 2020-07-27T16:05:04Z
updated_at: 2020-07-27T16:05:26Z
pushed_at: 2020-07-27T16:05:24Z
Language: Python
URL: https://github.com/sgowda/python-setup
Forks: 0
Stars: 0
Topics: 
README:
# python-setup
A repo for how I like to use python, to help me port between machines more easily



File: 639_tyutzhangyukang_PythonTools.txt
Full Name: tyutzhangyukang/PythonTools
Description: None
created_at: 2019-08-08T15:48:50Z
updated_at: 2019-10-13T16:02:01Z
pushed_at: 2022-12-08T00:47:06Z
Language: Python
URL: https://github.com/tyutzhangyukang/PythonTools
Forks: 0
Stars: 0
Topics: 
README:



File: 63_Anisah-Omar_Allen-B-python.txt
Full Name: Anisah-Omar/Allen-B-python
Description: None
created_at: 2022-02-08T12:19:39Z
updated_at: 2022-04-02T18:03:48Z
pushed_at: 2022-04-02T18:17:05Z
Language: Python
URL: https://github.com/Anisah-Omar/Allen-B-python
Forks: 0
Stars: 0
Topics: 
README:
# Allen-B-python


File: 640_InternetAdvancedSolutions_Face-Recognotion-system-in-Python.txt
Full Name: InternetAdvancedSolutions/Face-Recognotion-system-in-Python
Description: None
created_at: 2019-04-11T09:53:32Z
updated_at: 2023-06-14T04:59:20Z
pushed_at: 2019-04-11T09:53:52Z
Language: Python
URL: https://github.com/InternetAdvancedSolutions/Face-Recognotion-system-in-Python
Forks: 0
Stars: 1
Topics: 
README:
# Face_Recognition-App-
Recognises the given sample image from given list of person(Open CV)


* This application recognises the image of any person from the given imagesof all.
* Here the data_folder_has has to included before execution of the script.
* This folder has should contain the folders caontaing the various images of all the person.
* For good training , the image folder should contain large set of images.
* Here using Open CV in python environment as working tool.
* Supervised machine learning model is uesd for predicting , to which label the image falls to.
* For recognition and training purpose , machine learning concepts has too been used.
* Instead fo haar cascasde, we are using lbp_cascade , although it's a bit slow but gives the better result.


_____________________________________________________________________________________________________

*Various steps taken are:

1) Training our model, from the images of various given set.
2) Detection of the face from the sample image.
3) extracting the various features from the sample detected image.
4) predicting the image to get the label from our data_folder i.e name of person.

______________________________________________________________________________________________________

* More the number of images better will be the training, hence better results..................



File: 642_CodingNannah_Real_Python.txt
Full Name: CodingNannah/Real_Python
Description: None
created_at: 2022-07-26T20:38:29Z
updated_at: 2022-07-26T20:40:29Z
pushed_at: 2022-07-26T20:40:26Z
Language: Python
URL: https://github.com/CodingNannah/Real_Python
Forks: 0
Stars: 0
Topics: 
README:



File: 643_Nozimbek_Python.txt
Full Name: Nozimbek/Python
Description: None
created_at: 2020-08-08T12:46:08Z
updated_at: 2020-08-18T12:23:38Z
pushed_at: 2020-08-18T12:23:36Z
Language: Python
URL: https://github.com/Nozimbek/Python
Forks: 0
Stars: 0
Topics: 
README:



File: 645_M-Bohram_python-session.txt
Full Name: M-Bohram/python-session
Description: None
created_at: 2020-06-20T02:34:38Z
updated_at: 2021-06-21T09:29:14Z
pushed_at: 2022-12-08T10:46:34Z
Language: Python
URL: https://github.com/M-Bohram/python-session
Forks: 0
Stars: 0
Topics: 
README:



File: 646_Vahe-Aleksanyan_Numerical-analysis-Optimization-Python.txt
Full Name: Vahe-Aleksanyan/Numerical-analysis-Optimization-Python
Description: None
created_at: 2023-09-24T11:54:59Z
updated_at: 2024-06-02T12:00:54Z
pushed_at: 2024-06-02T11:53:18Z
Language: Jupyter Notebook
URL: https://github.com/Vahe-Aleksanyan/Numerical-analysis-Optimization-Python
Forks: 0
Stars: 0
Topics: 
README:
# Numerical-Analysis-Python



File: 648_bongjour_effective_python.txt
Full Name: bongjour/effective_python
Description: None
created_at: 2018-06-13T02:11:20Z
updated_at: 2018-06-25T04:09:13Z
pushed_at: 2018-06-25T04:09:12Z
Language: Python
URL: https://github.com/bongjour/effective_python
Forks: 0
Stars: 0
Topics: 
README:



File: 651_mariorodolfo_Mario_Project-Python-Flask.txt
Full Name: mariorodolfo/Mario_Project-Python-Flask
Description: None
created_at: 2016-06-28T03:16:31Z
updated_at: 2016-06-28T03:21:23Z
pushed_at: 2016-06-28T03:21:14Z
Language: Python
URL: https://github.com/mariorodolfo/Mario_Project-Python-Flask
Forks: 0
Stars: 0
Topics: 
README:



File: 652_iryna-zhukava_python_test.txt
Full Name: iryna-zhukava/python_test
Description: None
created_at: 2022-07-27T10:19:40Z
updated_at: 2022-07-27T10:24:26Z
pushed_at: 2022-07-29T13:10:39Z
Language: Python
URL: https://github.com/iryna-zhukava/python_test
Forks: 0
Stars: 0
Topics: 
README:
# python_test


File: 653_NikaVoronina_Python.Homework_3.txt
Full Name: NikaVoronina/Python.Homework_3
Description: None
created_at: 2022-10-04T15:43:22Z
updated_at: 2022-10-04T15:44:15Z
pushed_at: 2022-10-04T15:44:12Z
Language: Python
URL: https://github.com/NikaVoronina/Python.Homework_3
Forks: 0
Stars: 0
Topics: 
README:



File: 654_truecode112_python-graph-editor-library.txt
Full Name: truecode112/python-graph-editor-library
Description: None
created_at: 2022-12-06T19:28:49Z
updated_at: 2022-12-06T19:30:48Z
pushed_at: 2022-12-06T19:30:43Z
Language: Python
URL: https://github.com/truecode112/python-graph-editor-library
Forks: 0
Stars: 0
Topics: 
README:
[![PyPI](https://img.shields.io/pypi/v/pyyed)](https://pypi.org/project/pyyed)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/pyyed)](https://pypi.org/project/pyyed)

# yEd Py

A simple Python library to export networks to [yEd](http://www.yworks.com/en/products_yed_about.html).

Is is [available from PyPI](https://pypi.org/project/pyyed/).

The [yEd Graph Editor](https://www.yworks.com/products/yed) supports the [GraphML](http://graphml.graphdrawing.org/) ([GraphML Primer](http://graphml.graphdrawing.org/primer/graphml-primer.html)) file format. 
This is an open standard based on XML, and is supported by Python libraries such as [NetworkX](https://networkx.github.io/).
However, the details of formatting (rather than network topology) are handled by yEd specific extensions to the standard, which are not supported by other libraries.
 
I therefore wrote this library to provide an easy interface that lets you specify how a graph should look, and generates corresponding graphML that can be opened in yEd.

## Usage
The interface is similar to that of NetworkX:

```python
import pyyed

g = pyyed.Graph()

g.add_node('foo', font_family="Zapfino")
g.add_node('foo2', shape="roundrectangle", font_style="bolditalic", underlined_text="true")

g.add_edge('foo1', 'foo2')
g.add_node('abc', font_size="72", height="100", shape_fill="#FFFFFF")

g.add_node('bar', label="Multi\nline\ntext")
g.add_node('foobar', label="""Multi
    Line
    Text!""")

g.add_edge('foo', 'foo1', label="EDGE!", width="3.0", color="#0000FF", 
               arrowhead="white_diamond", arrowfoot="standard", line_type="dotted")

print(g.get_graph())

# To write to file:
with open('test_graph.graphml', 'w') as fp:
    fp.write(g.get_graph())

# Or:
g.write_graph('example.graphml')

# Or, to pretty-print with whitespace:
g.write_graph('pretty_example.graphml', pretty_print=True)

```

Saving this to a file with a ``.graphml`` extension, opening in yEd, applying  ``Tools -> Fit Node to Label`` and ``Layout -> One-click layout`` produces something like the following:

![](example.png)

### UML
The file [``examples/demo-uml.py``](./examples/demo-uml.py), includes an example UML diagram:

![](example-UML.png)

The arrowheads used in UML class diagrams correspond to ``crows_foot_one_optional`` (association or dependency), ``white_delta`` (inheritance or implementation), ``white_diamond`` (aggregation), and ``diamond`` (composition).

 The ``line_type`` is either ``line`` or ``dashed``.




## Options

Valid ``node shapes`` are: "rectangle", "rectangle3d", "roundrectangle", "diamond", "ellipse", "fatarrow", "fatarrow2", "hexagon", "octagon", "parallelogram", "parallelogram2", "star5", "star6", "star6", "star8", "trapezoid", "trapezoid2", "triangle", "trapezoid2", "triangle"

Valid ``line_types`` are: "line", "dashed", "dotted", "dashed_dotted"

Valid ``font_styles`` are: "plain", "bold", "italic", "bolditalic"

Valid ``arrow_types`` are: "none", "standard", "white_delta", "diamond", "white_diamond", "short", "plain", "concave", "concave", "convex", "circle", "transparent_circle", "dash", "skewed_dash", "t_shape", "crows_foot_one_mandatory", "crows_foot_many_mandatory", "crows_foot_many_optional", "crows_foot_many_optional", "crows_foot_one", "crows_foot_many", "crows_foot_optional"

## Development

Requirements:

    $ pip install pytest

Run the tests:

    $ PYTHONPATH=. pytest tests



File: 655_gavinchong_python-pacer.txt
Full Name: gavinchong/python-pacer
Description: None
created_at: 2022-09-23T04:05:28Z
updated_at: 2022-09-23T04:26:39Z
pushed_at: 2022-09-26T06:57:27Z
Language: Python
URL: https://github.com/gavinchong/python-pacer
Forks: 0
Stars: 0
Topics: 
README:
## Task 1

### Endpoints
<code>GET</code> http://127.0.0.1:8000/api/get_score

The following is a Task 1 Simple JSON result:

**Header**

	Accept: application/json
	Content-Type: application/json
	Authorization: Token {token}

**Success**
```JSON
{
    "status": "success",
    "result": {
        "id": 2,
        "point": 100,
        "created_at": "2022-09-21T00:00:00Z",
        "user": 1
    }
}
```

**Failed**
```JSON
{
    "status": "success",
    "result": {},
    "message": "No record found"
}
```

### Testcase

Running testcase command
--------------------------

```
$ python manage.py test
```

## Task 2
http://127.0.0.1:8000/admin

![alt text](https://github.com/gavinchong/python-pacer/blob/main/Screenshot%202022-09-26%20at%202.49.42%20PM.png)

## Task 3


```python
class Score(models.Model):
    class Meta:
        db_table = 'score'
    
    point = models.IntegerField()
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
    )
    created_at = models.DateTimeField(
        auto_now_add=True
    )
    created_by = models.IntegerField(null=True) <-- add new field
```


Running command below to create migration file
--------------------------

```
$ python manage.py makemigrations
```

Running command below to run migration files
--------------------------

```
$ python manage.py migrate
```

## Additional Task

### Auth Token

Running command below to create token
--------------------------

```
$ python manage.py drf_create_token [username]
```



File: 65_aaronkyl_digitalcrafts-python-exercises-flex-02.txt
Full Name: aaronkyl/digitalcrafts-python-exercises-flex-02
Description: None
created_at: 2018-03-02T01:05:05Z
updated_at: 2018-03-05T16:29:01Z
pushed_at: 2018-03-12T19:10:34Z
Language: Python
URL: https://github.com/aaronkyl/digitalcrafts-python-exercises-flex-02
Forks: 0
Stars: 0
Topics: 
README:
# DigitalCrafts Flex Python Exercises


File: 668_zayedalbloushi_Python-Chess-Game.txt
Full Name: zayedalbloushi/Python-Chess-Game
Description: None
created_at: 2020-12-08T13:44:57Z
updated_at: 2021-12-28T23:58:31Z
pushed_at: 2021-12-28T23:58:28Z
Language: Python
URL: https://github.com/zayedalbloushi/Python-Chess-Game
Forks: 1
Stars: 0
Topics: 
README:



File: 66_NaimaMunir_Sorting_Lists_Python.txt
Full Name: NaimaMunir/Sorting_Lists_Python
Description: None
created_at: 2020-08-30T02:51:50Z
updated_at: 2021-04-10T04:39:53Z
pushed_at: 2020-08-30T02:52:42Z
Language: None
URL: https://github.com/NaimaMunir/Sorting_Lists_Python
Forks: 0
Stars: 0
Topics: 
README:



File: 671_leandroAmariles_Python.txt
Full Name: leandroAmariles/Python
Description: None
created_at: 2022-03-08T00:33:44Z
updated_at: 2022-03-08T00:41:07Z
pushed_at: 2022-03-08T00:33:45Z
Language: None
URL: https://github.com/leandroAmariles/Python
Forks: 0
Stars: 0
Topics: 
README:



File: 672_JeanerSilva_pythonaluraavancado.txt
Full Name: JeanerSilva/pythonaluraavancado
Description: None
created_at: 2019-01-07T12:44:52Z
updated_at: 2019-05-24T12:30:51Z
pushed_at: 2019-01-07T14:34:24Z
Language: Python
URL: https://github.com/JeanerSilva/pythonaluraavancado
Forks: 0
Stars: 0
Topics: 
README:



File: 674_trieu-0512_Python.txt
Full Name: trieu-0512/Python
Description: None
created_at: 2021-07-27T17:25:20Z
updated_at: 2024-08-17T07:25:49Z
pushed_at: 2024-08-17T07:25:46Z
Language: Python
URL: https://github.com/trieu-0512/Python
Forks: 0
Stars: 0
Topics: 
README:
# Python


File: 676_premganesh22_Python.txt
Full Name: premganesh22/Python
Description: None
created_at: 2019-11-13T17:49:01Z
updated_at: 2020-04-01T00:00:36Z
pushed_at: 2020-04-01T00:00:33Z
Language: Jupyter Notebook
URL: https://github.com/premganesh22/Python
Forks: 0
Stars: 0
Topics: 
README:
# Python-



File: 677_Amiga68_python.txt
Full Name: Amiga68/python
Description: None
created_at: 2019-04-17T10:00:21Z
updated_at: 2019-04-17T10:00:21Z
pushed_at: 2019-04-17T10:00:22Z
Language: None
URL: https://github.com/Amiga68/python
Forks: 0
Stars: 0
Topics: 
README:



File: 679_ganesh6988_week-01-python-chiperschools.txt
Full Name: ganesh6988/week-01-python-chiperschools
Description: None
created_at: 2022-12-01T13:45:20Z
updated_at: 2022-12-01T13:45:20Z
pushed_at: 2022-12-01T13:59:21Z
Language: None
URL: https://github.com/ganesh6988/week-01-python-chiperschools
Forks: 0
Stars: 0
Topics: 
README:



File: 680_zobrathemanish_face-detection-RT-python-JS.txt
Full Name: zobrathemanish/face-detection-RT-python-JS
Description: None
created_at: 2019-07-08T09:55:10Z
updated_at: 2019-10-07T07:31:21Z
pushed_at: 2022-06-21T22:18:10Z
Language: Python
URL: https://github.com/zobrathemanish/face-detection-RT-python-JS
Forks: 0
Stars: 0
Topics: 
README:
flask-video-streaming
=====================

Supporting code for my article [video streaming with Flask](http://blog.miguelgrinberg.com/post/video-streaming-with-flask) and its follow-up [Flask Video Streaming Revisited](http://blog.miguelgrinberg.com/post/flask-video-streaming-revisited).



File: 683_lovejatps_hbrc_python.txt
Full Name: lovejatps/hbrc_python
Description: None
created_at: 2016-09-18T06:13:04Z
updated_at: 2016-09-20T06:36:58Z
pushed_at: 2016-09-20T11:02:26Z
Language: Python
URL: https://github.com/lovejatps/hbrc_python
Forks: 0
Stars: 0
Topics: 
README:
# hbrc_python
采用Tornado框架，安装Tornado包
pip install tornado   

#进程监控程序  Supervisor   
满足的需求是：我现在有一个进程需要每时每刻不断的跑，但是这个进程又有可能由于各种原因有可能中断。   
当进程中断的时候我希望能自动重新启动它：Supervisor   
#安装很简单   
pip install supervisor   

#2. 配置
可以用以下命令生成配置文件：   
  echo_supervisord_conf > etc/supervisord.conf   
配置文件生成之后，在最末尾加上这几行东西：   


[program:hello]
command=python /root/nmapp2_venv/test.py --port=8888
directory=/root/nmapp2_venv/
autorestart=true
redirect_stderr=true
OK，完成配置。

#3. 启动 supervisor
启动 supervisor：
supervisord
如果报错，请检查报错信息，比如：
Error: No config file found at default paths (  
/root/nmapp2_venv/etc/supervisord.conf,  
/root/nmapp2_venv/supervisord.conf,   
supervisord.conf,   
etc/supervisord.conf,   
/etc/supervisord.conf); use the -c option to specify a config file at a different path   
For help, use /root/nmapp2_venv/bin/supervisord -h   
在上面的默认目录中，丢一个 supervisord.conf 即可。   

如果报 http://localhost:9001 refused connection 错误，那是因为 supervisord 没有启动的原因。只要放好 supervisord.conf    文件，即可解决问题。   

supervisorctl start all 开启全部服务。   

如果修改了配置文件，supervisorctl reload 重启。修改了 Supervisor 的配置，也可以用 supervisorctl reread 来重新载入，或用 supervisorctl reload 来载入新配置并重启所有子进程。直接运行 supervisorctl 的话，可以进入命令行模式操作。   



File: 684_Jios_slack_python_script.txt
Full Name: Jios/slack_python_script
Description: None
created_at: 2018-06-09T22:46:14Z
updated_at: 2018-06-09T22:47:31Z
pushed_at: 2018-06-09T22:47:30Z
Language: Python
URL: https://github.com/Jios/slack_python_script
Forks: 0
Stars: 0
Topics: 
README:
### Dependency
Python Slacker: https://github.com/os/slacker

### Slack Test Token 
URL: https://api.slack.com/docs/oauth-test-tokens

### Requirement
```
# required
success      : BOOL true or false
success_title: STRING title for successful message
title_link   : STRING URL_link
error_msg    : STRING text or empty string

# optional
key1: value1
key2: value2
...

### Run Commands
```shell
# on Jenkins
python slack/slack.py ${SLACK_PYTHON_TOKEN} ${SLACK_CHANNEL} 'json/file/path'
# or
python slack/slack.py ${SLACK_PYTHON_TOKEN} ${SLACK_CHANNEL} 'properties/file/path'

# on terminal
python slack/slack.py xoxp-... '#build' 'json/file/path'
# or
python slack/slack.py xoxp-... '#build' 'properties/file/path'
```

### .json File
```json
{
	"success": true,
	"success_title": "Release successful",
	"title_link": "https://...",
	"error_msg": "",
	"version": "3.151",
	"name": "NAME"
}
```

### .peroperties file
```properties
# required
success=true
success_title=Release successful
title_link=https://...
error_msg=

# optional
version=3.151
name=NAME
```


File: 685_gabxfo_Python-study.txt
Full Name: gabxfo/Python-study
Description: None
created_at: 2022-04-20T19:44:34Z
updated_at: 2022-04-20T19:44:34Z
pushed_at: 2022-06-01T19:22:28Z
Language: None
URL: https://github.com/gabxfo/Python-study
Forks: 0
Stars: 0
Topics: 
README:
# Python-study


File: 686_ikaranmali_leetcode-python.txt
Full Name: ikaranmali/leetcode-python
Description: None
created_at: 2021-09-27T12:12:37Z
updated_at: 2021-09-27T12:14:34Z
pushed_at: 2021-09-27T12:14:32Z
Language: Python
URL: https://github.com/ikaranmali/leetcode-python
Forks: 0
Stars: 0
Topics: 
README:



File: 687_mohammadazlan1234_python-fundamentals_.txt
Full Name: mohammadazlan1234/python-fundamentals_
Description: None
created_at: 2022-04-22T16:58:40Z
updated_at: 2022-04-22T16:58:40Z
pushed_at: 2022-09-13T09:34:43Z
Language: None
URL: https://github.com/mohammadazlan1234/python-fundamentals_
Forks: 0
Stars: 0
Topics: 
README:
# python-fundamentals_


File: 688_manavjain2712_Automating-spreadsheets-with-python.txt
Full Name: manavjain2712/Automating-spreadsheets-with-python
Description: None
created_at: 2022-08-04T13:28:16Z
updated_at: 2022-08-04T13:52:19Z
pushed_at: 2022-08-04T13:52:16Z
Language: HTML
URL: https://github.com/manavjain2712/Automating-spreadsheets-with-python
Forks: 0
Stars: 0
Topics: 
README:



File: 691_jacknaguib_automating-aws-with-python.txt
Full Name: jacknaguib/automating-aws-with-python
Description: None
created_at: 2018-09-01T08:34:59Z
updated_at: 2018-09-09T10:50:05Z
pushed_at: 2022-01-21T19:40:33Z
Language: Python
URL: https://github.com/jacknaguib/automating-aws-with-python
Forks: 0
Stars: 0
Topics: 
README:
# automating-aws-with-python

Repository for automating AWS with python

## 01-webotron

Webotron is a script that will sync a local directory to an s3 bucket, and optionally configure Route 53 and Cloudfront as well

### Features

Webotron currently has the following Features

- List buckets
- List contents of a bucket
- Create and setup web bucket
- Sync directory tree to bucket



File: 693_Sharon318_web-scraping-python.txt
Full Name: Sharon318/web-scraping-python
Description: None
created_at: 2020-03-31T16:22:41Z
updated_at: 2020-03-31T16:27:08Z
pushed_at: 2020-03-31T16:27:05Z
Language: None
URL: https://github.com/Sharon318/web-scraping-python
Forks: 0
Stars: 0
Topics: 
README:



File: 694_danguadarrama88_python-scripts.txt
Full Name: danguadarrama88/python-scripts
Description: None
created_at: 2020-10-14T22:48:07Z
updated_at: 2020-10-14T22:48:07Z
pushed_at: 2020-10-14T22:48:08Z
Language: None
URL: https://github.com/danguadarrama88/python-scripts
Forks: 0
Stars: 0
Topics: 
README:



File: 695_apburnie_airport-Python.txt
Full Name: apburnie/airport-Python
Description: None
created_at: 2016-01-27T13:01:34Z
updated_at: 2016-01-27T13:02:20Z
pushed_at: 2016-01-27T15:04:26Z
Language: Python
URL: https://github.com/apburnie/airport-Python
Forks: 0
Stars: 0
Topics: 
README:
The Airport Challenge in Python
==============================

This is a solution to Makers Academy's [Airport Challenge](https://github.com/makersacademy/airport_challenge). The original
was written in Ruby, and can be found  [here](https://github.com/Andrew47/airport_challenge). There is also a version in
[JavaScript](https://github.com/Andrew47/airport_JS)

This solution uses a test-driven approach, with feature and unit tests
implemented using the [unittest](https://docs.python.org/2/library/unittest.html) library.

##Installation notes

The program was written having installed the [Anaconda](https://www.continuum.io/downloads) Python distribution. Python version 2.7.11 was used.

First a new environment should be created:

`$ conda create --name snowflakes mock`

This creates an environment called 'snowflakes', with the mock package installed.

To activate this environment:

* In Linux, OS X:  `$ source activate snowflakes`
* In Windows: `$ activate snowflakes`

To deactivate:

* In Linux, OS X: `$ source deactivate`
* In Windows: `$ deactivate`

More information about environments can be found [here](http://conda.pydata.org/docs/using/envs.html).

Then, the repository should be cloned and the directory changed into:

```
$ git clone git@github.com:Andrew47/airport-Python.git
$ cd airport-Python
```

##Using the program

Open the python interpreter and import the modules:

```
$ python
>>> from app.airport import Airport
>>> from app.plane import Plane
```

Then an airport can be created by typing `airport = Airport()` and a plane by typing
`plane = Plane()` in the command line.

The plane can land at the airport (`plane.land(airport)`) and can take off (`plane.take_off(airport)`). Weather is randomly generated each time the plane
seeks to take off or to land. Stormy weather prevents take off or landing.

If `plane.is_airborne` returns `True`, the plane is in the air. If `plane.is_airborne`
returns `False`, the plane has landed.

The default airport capacity is 20. However, a new airport (airport1000) can be created
with this default overridden (`airport1000 = Airport(1000)`). Planes cannot be landed at
a full airport (`airport.is_full()` returns True). 

##User Stories being met
```
As an air traffic controller
So I can get passengers to a destination
I want to instruct a plane to land at an airport and confirm that it has landed

As an air traffic controller
So I can get passengers on the way to their destination
I want to instruct a plane to take off from an airport and confirm that it is no longer in the airport

As an air traffic controller
To ensure safety
I want to prevent takeoff when weather is stormy

As an air traffic controller
To ensure safety
I want to prevent landing when weather is stormy

As an air traffic controller
To ensure safety
I want to prevent landing when the airport is full

As the system designer
So that the software can be used for many different airports
I would like a default airport capacity that can be overridden as appropriate
```

##Author
* [Andrew Burnie](https://github.com/Andrew47)



File: 696_andrasfeher_Python.txt
Full Name: andrasfeher/Python
Description: None
created_at: 2016-09-15T08:58:34Z
updated_at: 2016-09-15T09:00:22Z
pushed_at: 2016-09-15T09:00:19Z
Language: Python
URL: https://github.com/andrasfeher/Python
Forks: 0
Stars: 0
Topics: 
README:
# Python



File: 699_OpenMandrivaAssociation_python-uTidylib.txt
Full Name: OpenMandrivaAssociation/python-uTidylib
Description: None
created_at: 2015-07-23T21:20:53Z
updated_at: 2024-10-17T00:52:31Z
pushed_at: 2024-11-23T18:41:52Z
Language: None
URL: https://github.com/OpenMandrivaAssociation/python-uTidylib
Forks: 0
Stars: 0
Topics: 
README:



File: 69_JYOTHYMUKESHKUMAR_Python-project-.txt
Full Name: JYOTHYMUKESHKUMAR/Python-project-
Description: None
created_at: 2022-11-22T13:36:16Z
updated_at: 2022-11-22T13:37:28Z
pushed_at: 2022-11-22T13:37:24Z
Language: Jupyter Notebook
URL: https://github.com/JYOTHYMUKESHKUMAR/Python-project-
Forks: 0
Stars: 0
Topics: 
README:
# Python-project-


File: 700_SoftwareDeveloper007_GIS-with-python.txt
Full Name: SoftwareDeveloper007/GIS-with-python
Description: None
created_at: 2017-08-15T08:29:20Z
updated_at: 2017-09-26T04:20:02Z
pushed_at: 2017-08-15T08:34:01Z
Language: Python
URL: https://github.com/SoftwareDeveloper007/GIS-with-python
Forks: 0
Stars: 1
Topics: 
README:



File: 701_peyilibegi_pythontraining.txt
Full Name: peyilibegi/pythontraining
Description: None
created_at: 2022-10-14T08:20:12Z
updated_at: 2022-10-17T11:04:46Z
pushed_at: 2022-11-03T12:19:56Z
Language: Python
URL: https://github.com/peyilibegi/pythontraining
Forks: 0
Stars: 0
Topics: 
README:
# pythontraining edited


File: 706_ShubhamAnand748_Python-MySQL.txt
Full Name: ShubhamAnand748/Python-MySQL
Description: None
created_at: 2019-06-04T12:59:54Z
updated_at: 2019-06-04T13:01:47Z
pushed_at: 2019-06-04T13:01:45Z
Language: Python
URL: https://github.com/ShubhamAnand748/Python-MySQL
Forks: 0
Stars: 0
Topics: 
README:



File: 709_shivanikarnwal_Google-App-Ratings-Analysis-Using-Python.txt
Full Name: shivanikarnwal/Google-App-Ratings-Analysis-Using-Python
Description: None
created_at: 2021-01-19T06:51:05Z
updated_at: 2021-02-17T18:11:18Z
pushed_at: 2021-02-17T18:11:16Z
Language: Jupyter Notebook
URL: https://github.com/shivanikarnwal/Google-App-Ratings-Analysis-Using-Python
Forks: 0
Stars: 0
Topics: 
README:
# Google-App-Ratings-Analysis-Using-Python-notebook-jupyter



File: 70_BennyJane_Python-crawler-Book-20181201.txt
Full Name: BennyJane/Python-crawler-Book-20181201
Description: None
created_at: 2018-12-01T09:39:36Z
updated_at: 2018-12-15T02:36:36Z
pushed_at: 2018-12-15T02:36:35Z
Language: None
URL: https://github.com/BennyJane/Python-crawler-Book-20181201
Forks: 0
Stars: 0
Topics: 
README:
# - BeautifulSoup

from urllib.request import urlopen
from bs4 import BeautifulSoup
html = urlopen("http://www.pythonscraping.com/pages/page1.html")
bsObj = BeautifulSoup(html.read())
print(bsObj.h1)

>>> <h1>An Interesting Title</h1>
html --- <html><head>...</head><body>...</body></html>
  head----<head><title>A Useful Page</title></head>
      title---<title>A Useful Page</title>
  body---<body><h1>An Int...</h1><div>Lorem ip..</div></body>
       h1---<h1>An Interesting Title</h1>
       div---<div>Lorenm Lpsum dolor...</div>
  
  bsObj.h1
  bsObj.html.body.h1
  bsObj.body.h1
  bsObj.html.h1

# find error //12.02 1.2.3 可靠的网络链接
# html = urlopen("http://www.pythonscraping.com/pages/page1.html")
#可能出现的两种错误及处理方式


from urllib.request import urlopen
from urllib.error import HTTPError, URLError
from bs4 import BeautifulSoup
def getTitle(url):
    try:
        html = urlopen(url)
    except (HTTPError, URLError) as e:
        return None
    try:
        bsObj = BeautifulSoup(html.read())
        title = bsObj.body.h1
    except AttributeError as e:
        return None
    return title

title = getTitle("http://www.pythonscraping.com/pages/page1.html1")
if title == None:
    print("Title could not be fouund")
else:
    print(title)

# Gordian Kont 
#2.4 正则表达式与BeautifulSoup
#网页上几个商品图片，源代码形式 <img src="../img/gifts/img3.jpg">
from urllib.request import urlopen
from bs4 import BeautifulSoup
import re # regular string

html = urlopen("http://WWW.pythonscraping.com/pages/pages3.heml")
bsObj = Beautiful(html)
images = bsObj.findAll("img",{"src":re.compile("\.\.\/img\/gifts\/img.*\.jpg")})
#??
for image in images:
    print(image["src"])
>>> 结果
../img/gifts/img1.jpg
../img/gifts/img2.jpg

#example 
import re
pattern = re.compile('[a-zA-Z]')
result = pattern.findall('as3SiOPdj#@23awe')
print result
>>> ['a', 's', 'S', 'i', 'O', 'P', 'd', 'j', 'a', 'w', 'e']

#2.5 获取属性
#获取一个标签对象的所有属性，返回一个字典对象
myTag.attrs
#获取图片资源位置src
myTag.attrs["src"]

#2.6 Lambda表达式
#获取两个属性的标签
soup.findAll(lambda tag: len(tag.attrs) == 2)

>>>
<div class="body" id="content"></div>
<span style="color:red" class="title"></span>

#2.7 HTML解析库： 
#lxml（可以解析HTML XML文档，大部分源代码是用C语言写的，处理大多数HTML文档速度都非常快）
#HTML parser python自带的解析库
    
    
    
    
    
    


-----end-----
    



File: 710_CalinRusu95_Python.txt
Full Name: CalinRusu95/Python
Description: None
created_at: 2021-09-10T15:49:36Z
updated_at: 2021-09-10T15:50:18Z
pushed_at: 2021-09-10T15:50:16Z
Language: Python
URL: https://github.com/CalinRusu95/Python
Forks: 0
Stars: 0
Topics: 
README:



File: 711_gonzal29_python-challenge.txt
Full Name: gonzal29/python-challenge
Description: None
created_at: 2021-03-05T03:45:56Z
updated_at: 2021-03-05T04:20:33Z
pushed_at: 2021-03-05T04:20:31Z
Language: Python
URL: https://github.com/gonzal29/python-challenge
Forks: 0
Stars: 0
Topics: 
README:
# python-challenge


File: 712_BakirKhametov_Python.HomeWork8.txt
Full Name: BakirKhametov/Python.HomeWork8
Description: None
created_at: 2023-01-31T13:50:54Z
updated_at: 2023-01-31T13:51:14Z
pushed_at: 2023-01-31T13:51:09Z
Language: Python
URL: https://github.com/BakirKhametov/Python.HomeWork8
Forks: 0
Stars: 0
Topics: 
README:



File: 713_Wortigen_PythonCoreBot.txt
Full Name: Wortigen/PythonCoreBot
Description: None
created_at: 2022-12-06T13:37:13Z
updated_at: 2022-12-06T13:43:57Z
pushed_at: 2022-12-06T13:43:52Z
Language: Python
URL: https://github.com/Wortigen/PythonCoreBot
Forks: 0
Stars: 0
Topics: 
README:



File: 716_rezamohsenikabir_PythonTraining.txt
Full Name: rezamohsenikabir/PythonTraining
Description: None
created_at: 2022-04-15T10:32:49Z
updated_at: 2022-04-15T10:43:53Z
pushed_at: 2022-04-15T10:43:50Z
Language: Python
URL: https://github.com/rezamohsenikabir/PythonTraining
Forks: 0
Stars: 0
Topics: 
README:



File: 717_Q-b1t_Data_Science_With_Python.txt
Full Name: Q-b1t/Data_Science_With_Python
Description: None
created_at: 2022-07-16T19:09:42Z
updated_at: 2023-04-25T21:27:20Z
pushed_at: 2022-08-21T20:48:30Z
Language: Jupyter Notebook
URL: https://github.com/Q-b1t/Data_Science_With_Python
Forks: 0
Stars: 0
Topics: 
README:



File: 718_vhkthorpaul_python-projects.txt
Full Name: vhkthorpaul/python-projects
Description: None
created_at: 2016-07-22T07:01:22Z
updated_at: 2016-07-22T07:01:22Z
pushed_at: 2016-07-22T07:01:23Z
Language: None
URL: https://github.com/vhkthorpaul/python-projects
Forks: 0
Stars: 0
Topics: 
README:



File: 723_GuptaNaman1998_Web-Scraping-Python.txt
Full Name: GuptaNaman1998/Web-Scraping-Python
Description: None
created_at: 2021-07-27T00:34:41Z
updated_at: 2021-07-27T00:34:41Z
pushed_at: 2021-07-27T00:34:42Z
Language: None
URL: https://github.com/GuptaNaman1998/Web-Scraping-Python
Forks: 0
Stars: 0
Topics: 
README:



File: 725_ometh2006_simple-calculator-made-with-python.txt
Full Name: ometh2006/simple-calculator-made-with-python
Description: None
created_at: 2022-08-31T15:13:35Z
updated_at: 2022-09-05T15:20:00Z
pushed_at: 2022-09-29T11:15:55Z
Language: Python
URL: https://github.com/ometh2006/simple-calculator-made-with-python
Forks: 1
Stars: 2
Topics: 
README:
<a href="https://git.io/typing-svg"><img src="https://readme-typing-svg.demolab.com?font=bungee+spice&duration=2500&pause=1000&color=00F73B&background=000000&center=true&vCenter=true&multiline=true&width=1000&height=75&lines=%C2%A9H+Y+P+E+R+++G+H+O+S+T;%3C%2F%3E" alt="Typing SVG" /></a>
# simple-calculator-made-with-python

*/-+A SIMPLE CALCULATOR+-/*
<p align="center"> <a href="github.com/sanuwaofficial"><img align="center" src="https://telegra.ph/file/14070f24cead94c279d8f.jpg"/></a>
 <p align="center">
 
 <p align="center"> <a href="github.com/sanuwaofficial"><img align="center" src="https://telegra.ph/file/030f976f104d055a2e35c.jpg"/></a>
 <p align="center">
 
 #🍀 Availabale features
 
 
`*🔰+Addition+`

`*🔰-Subtraction-`

`*🔰Division/ `

`*🔰*multiplication*`

 😥Decimal number not yet support
 



File: 729_mariodportillo_Project0-CS50-s-Web-Programming-with-Python-and-JavaScript.txt
Full Name: mariodportillo/Project0-CS50-s-Web-Programming-with-Python-and-JavaScript
Description: None
created_at: 2021-05-27T00:55:35Z
updated_at: 2021-05-27T00:57:04Z
pushed_at: 2021-05-27T00:57:02Z
Language: HTML
URL: https://github.com/mariodportillo/Project0-CS50-s-Web-Programming-with-Python-and-JavaScript
Forks: 0
Stars: 0
Topics: 
README:



File: 72_badbrando_python.txt
Full Name: badbrando/python
Description: None
created_at: 2019-11-21T17:21:00Z
updated_at: 2019-11-21T17:51:33Z
pushed_at: 2019-11-21T17:51:16Z
Language: Jupyter Notebook
URL: https://github.com/badbrando/python
Forks: 0
Stars: 0
Topics: 
README:
# The Algorithms - Python <!-- [![Build Status](https://travis-ci.org/TheAlgorithms/Python.svg)](https://travis-ci.org/TheAlgorithms/Python) -->

[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.me/TheAlgorithms/100) &nbsp;
[![Gitter chat](https://badges.gitter.im/gitterHQ/gitter.png)](https://gitter.im/TheAlgorithms) &nbsp;
[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/TheAlgorithms/Python)

### All algorithms implemented in Python (for education)

These implementations are for learning purposes. They may be less efficient than the implementations in the Python standard library.

## Owners

Anup Kumar Panwar
&nbsp; [[Gmail](mailto:1anuppanwar@gmail.com?Subject=The%20Algorithms%20-%20Python)
&nbsp; [GitHub](https://github.com/anupkumarpanwar)
&nbsp; [LinkedIn](https://www.linkedin.com/in/anupkumarpanwar/)]

Chetan Kaushik
&nbsp; [[Gmail](mailto:dynamitechetan@gmail.com?Subject=The%20Algorithms%20-%20Python)
&nbsp; [GitHub](https://github.com/dynamitechetan)
&nbsp; [LinkedIn](https://www.linkedin.com/in/chetankaushik/)]

## Contribution Guidelines

Read our [Contribution Guidelines](CONTRIBUTING.md) before you contribute.

## Community Channel

We're on [Gitter](https://gitter.im/TheAlgorithms)! Please join us.

## Algorithms

See our [directory](DIRECTORY.md).



File: 731_himanshugupta0158_GoogleCloudBigQuery-python.txt
Full Name: himanshugupta0158/GoogleCloudBigQuery-python
Description: None
created_at: 2022-12-31T12:14:50Z
updated_at: 2022-12-31T12:14:57Z
pushed_at: 2022-12-31T12:16:39Z
Language: Python
URL: https://github.com/himanshugupta0158/GoogleCloudBigQuery-python
Forks: 0
Stars: 0
Topics: 
README:



File: 735_chaose37_PythonWeb01.txt
Full Name: chaose37/PythonWeb01
Description: None
created_at: 2016-12-04T14:06:17Z
updated_at: 2019-08-17T21:19:46Z
pushed_at: 2019-08-17T21:19:45Z
Language: Python
URL: https://github.com/chaose37/PythonWeb01
Forks: 0
Stars: 0
Topics: 
README:
테스트



File: 736_jianghan0001_python.txt
Full Name: jianghan0001/python
Description: None
created_at: 2017-03-07T03:51:16Z
updated_at: 2017-03-23T21:40:03Z
pushed_at: 2017-06-02T14:54:03Z
Language: Jupyter Notebook
URL: https://github.com/jianghan0001/python
Forks: 0
Stars: 0
Topics: 
README:



File: 73_saveliyshatrov_python-vk_api-bot.txt
Full Name: saveliyshatrov/python-vk_api-bot
Description: None
created_at: 2020-03-29T15:17:07Z
updated_at: 2020-04-29T14:39:25Z
pushed_at: 2020-04-29T14:39:22Z
Language: Python
URL: https://github.com/saveliyshatrov/python-vk_api-bot
Forks: 0
Stars: 0
Topics: 
README:



File: 742_sorry4what_pythoniswierdo.txt
Full Name: sorry4what/pythoniswierdo
Description: None
created_at: 2023-01-12T08:12:48Z
updated_at: 2023-01-12T08:12:48Z
pushed_at: 2023-01-12T08:12:48Z
Language: None
URL: https://github.com/sorry4what/pythoniswierdo
Forks: 0
Stars: 0
Topics: 
README:



File: 743_ef-housley_python.txt
Full Name: ef-housley/python
Description: None
created_at: 2022-04-13T08:56:26Z
updated_at: 2022-07-20T06:25:48Z
pushed_at: 2022-05-12T11:14:54Z
Language: Python
URL: https://github.com/ef-housley/python
Forks: 0
Stars: 2
Topics: 
README:



File: 746_napoler_python-start.txt
Full Name: napoler/python-start
Description: None
created_at: 2019-04-16T06:56:09Z
updated_at: 2019-04-16T07:00:01Z
pushed_at: 2019-04-16T07:00:00Z
Language: Jupyter Notebook
URL: https://github.com/napoler/python-start
Forks: 0
Stars: 0
Topics: 
README:
# python-start



File: 748_sarfanx_PythonTutorials.txt
Full Name: sarfanx/PythonTutorials
Description: None
created_at: 2020-05-02T21:59:49Z
updated_at: 2020-05-02T22:21:05Z
pushed_at: 2020-05-02T22:21:03Z
Language: None
URL: https://github.com/sarfanx/PythonTutorials
Forks: 0
Stars: 0
Topics: 
README:



File: 74_phuongthaodo_pythontraining.txt
Full Name: phuongthaodo/pythontraining
Description: None
created_at: 2019-05-02T02:28:49Z
updated_at: 2019-05-02T02:28:49Z
pushed_at: 2019-05-02T02:28:50Z
Language: None
URL: https://github.com/phuongthaodo/pythontraining
Forks: 0
Stars: 0
Topics: 
README:



File: 750_Rutuja-Rekhawar_ShapeAI_python_ML.txt
Full Name: Rutuja-Rekhawar/ShapeAI_python_ML
Description: None
created_at: 2021-07-20T13:59:52Z
updated_at: 2021-07-20T13:59:55Z
pushed_at: 2021-07-20T13:59:52Z
Language: None
URL: https://github.com/Rutuja-Rekhawar/ShapeAI_python_ML
Forks: 0
Stars: 0
Topics: 
README:
# ShapeAI_python_ML


File: 752_PelionProducts_python_linting.txt
Full Name: PelionProducts/python_linting
Description: None
created_at: 2020-07-01T16:02:22Z
updated_at: 2020-07-06T04:14:45Z
pushed_at: 2020-07-06T04:14:43Z
Language: None
URL: https://github.com/PelionProducts/python_linting
Forks: 1
Stars: 0
Topics: 
README:
# Python Linting Configuration Files



File: 754_Foyezrabbi_python-word-game.txt
Full Name: Foyezrabbi/python-word-game
Description: None
created_at: 2022-10-12T19:48:33Z
updated_at: 2023-01-06T18:05:29Z
pushed_at: 2022-10-12T19:48:47Z
Language: Python
URL: https://github.com/Foyezrabbi/python-word-game
Forks: 0
Stars: 4
Topics: 
README:



File: 756_igortereshchenko_python_oracle_sqlalchemy.txt
Full Name: igortereshchenko/python_oracle_sqlalchemy
Description: None
created_at: 2019-05-29T21:32:17Z
updated_at: 2020-08-08T10:01:03Z
pushed_at: 2022-12-08T02:32:19Z
Language: JavaScript
URL: https://github.com/igortereshchenko/python_oracle_sqlalchemy
Forks: 4
Stars: 1
Topics: 
README:



File: 757_jimmyvluong_Python-CalTPA-Demo.txt
Full Name: jimmyvluong/Python-CalTPA-Demo
Description: None
created_at: 2022-02-23T07:30:46Z
updated_at: 2022-03-04T18:13:36Z
pushed_at: 2022-02-24T00:12:44Z
Language: Jupyter Notebook
URL: https://github.com/jimmyvluong/Python-CalTPA-Demo
Forks: 0
Stars: 1
Topics: 
README:
These are sample Python scripts used to process CalTPA data.

We start with raw .asc files containing sample, non-real data.

- The notebook "caltpa_single_file.ipynb" is a good example of processing a single CalTPA file.
- The notebook "caltpa_multiple_files.ipynb" combines multiple files into one .csv file, then cleans the data.

How to use this notebook?
- You can run each cell separately.
- Some cells will have output, some will not.
- df.head() statements are used to display the DataFrame for you to inspect.

[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/jimmyvluong/Python-CalTPA-Demo/HEAD)


File: 761_havi23_python.txt
Full Name: havi23/python
Description: None
created_at: 2018-05-24T12:23:01Z
updated_at: 2018-05-24T12:23:01Z
pushed_at: 2018-05-24T12:23:02Z
Language: None
URL: https://github.com/havi23/python
Forks: 0
Stars: 0
Topics: 
README:



File: 762_Alenkiycvetochek_Python---seminar-1.txt
Full Name: Alenkiycvetochek/Python---seminar-1
Description: None
created_at: 2023-01-01T17:15:40Z
updated_at: 2023-01-01T17:43:17Z
pushed_at: 2023-01-01T18:35:55Z
Language: Python
URL: https://github.com/Alenkiycvetochek/Python---seminar-1
Forks: 0
Stars: 0
Topics: 
README:



File: 764_mlabenski_ladders-python-api.txt
Full Name: mlabenski/ladders-python-api
Description: None
created_at: 2022-01-15T09:28:27Z
updated_at: 2022-01-28T04:33:11Z
pushed_at: 2022-01-17T17:34:51Z
Language: Python
URL: https://github.com/mlabenski/ladders-python-api
Forks: 0
Stars: 0
Topics: 
README:
# not-tinder-python-api

![Alt text](/pandas.png?raw=true "Data collection OP")



File: 765_Victoramv_Python-Projects.txt
Full Name: Victoramv/Python-Projects
Description: None
created_at: 2020-07-20T09:41:56Z
updated_at: 2020-07-23T14:25:02Z
pushed_at: 2020-07-23T14:25:00Z
Language: Jupyter Notebook
URL: https://github.com/Victoramv/Python-Projects
Forks: 0
Stars: 0
Topics: 
README:
# Python-Projects


File: 767_anjal05_Python-Dictionary.txt
Full Name: anjal05/Python-Dictionary
Description: None
created_at: 2020-09-18T17:05:07Z
updated_at: 2020-09-18T17:06:20Z
pushed_at: 2020-09-18T17:06:18Z
Language: Jupyter Notebook
URL: https://github.com/anjal05/Python-Dictionary
Forks: 0
Stars: 0
Topics: 
README:
# Python-Dictionary


File: 76_SharonReginaSutio99_Python-basic.txt
Full Name: SharonReginaSutio99/Python-basic
Description: None
created_at: 2020-04-02T10:58:34Z
updated_at: 2021-03-05T13:19:05Z
pushed_at: 2020-06-03T09:57:44Z
Language: Python
URL: https://github.com/SharonReginaSutio99/Python-basic
Forks: 0
Stars: 0
Topics: 
README:



File: 770_artyommatt_stepik-python-selenium-project.txt
Full Name: artyommatt/stepik-python-selenium-project
Description: None
created_at: 2022-04-21T11:45:49Z
updated_at: 2022-04-21T12:05:24Z
pushed_at: 2022-05-30T17:08:53Z
Language: Python
URL: https://github.com/artyommatt/stepik-python-selenium-project
Forks: 0
Stars: 0
Topics: 
README:
# stepik-python-selenium-project

Hi, there🖐! This is my Automation testing project on Stepik education platform. Course is [here](https://stepik.org/course/575/syllabus)

# Tech stack

python 3.8, pytest, selenium

# Setup

* Ensure you have pipenv available. 
* Ensure you have cloned this repo and are in the project root directory that has the Pipfile with definitions of all required dependencies.
* Execute `pipenv shell` to activate the virtualenv in your terminal
* Execute `pipenv install` to install all dependencies
* Execute `pytest -v --tb=line --language=en test_main_page.py`

# Project structure

* `pages` dir contains application pages base classes, functions, locators
* `conftest.py` has configuration pytest fixtures
* `test_main_page.py` and `test_product_page.py` have tests



File: 771_imprakharshukla_pythonClass.txt
Full Name: imprakharshukla/pythonClass
Description: None
created_at: 2022-12-06T06:10:52Z
updated_at: 2022-12-06T06:11:06Z
pushed_at: 2022-12-06T06:19:53Z
Language: Python
URL: https://github.com/imprakharshukla/pythonClass
Forks: 0
Stars: 0
Topics: 
README:



File: 772_fistarAnus_pythonLess.txt
Full Name: fistarAnus/pythonLess
Description: None
created_at: 2019-03-22T06:47:27Z
updated_at: 2019-03-22T06:47:29Z
pushed_at: 2019-03-22T06:47:28Z
Language: None
URL: https://github.com/fistarAnus/pythonLess
Forks: 0
Stars: 0
Topics: 
README:
# pythonLess


File: 773_urchuk2006_Python-Katas.txt
Full Name: urchuk2006/Python-Katas
Description: None
created_at: 2020-08-19T14:43:39Z
updated_at: 2022-01-31T15:31:09Z
pushed_at: 2020-09-23T13:37:50Z
Language: Python
URL: https://github.com/urchuk2006/Python-Katas
Forks: 0
Stars: 0
Topics: 
README:
# Lv-527.PythonCore


File: 775_Hemantshetty_pythonNotes.md.txt
Full Name: Hemantshetty/pythonNotes.md
Description: None
created_at: 2021-08-15T08:11:24Z
updated_at: 2021-08-15T08:11:27Z
pushed_at: 2021-08-15T08:11:25Z
Language: None
URL: https://github.com/Hemantshetty/pythonNotes.md
Forks: 0
Stars: 0
Topics: 
README:
# pythonNotes.md


File: 776_Temam-Hashim_PYTHON-PROGRAM.txt
Full Name: Temam-Hashim/PYTHON-PROGRAM
Description: None
created_at: 2020-08-05T19:06:45Z
updated_at: 2021-12-15T09:50:04Z
pushed_at: 2020-08-12T16:42:56Z
Language: Python
URL: https://github.com/Temam-Hashim/PYTHON-PROGRAM
Forks: 1
Stars: 0
Topics: 
README:
# PYTHON-PROGRAM
This file contain selected and most useful python program and projects



File: 778_ykocaogullar_Python_3_Bootcamp.txt
Full Name: ykocaogullar/Python_3_Bootcamp
Description: None
created_at: 2020-01-06T12:30:20Z
updated_at: 2020-01-06T12:46:25Z
pushed_at: 2020-01-06T12:30:21Z
Language: None
URL: https://github.com/ykocaogullar/Python_3_Bootcamp
Forks: 0
Stars: 0
Topics: 
README:



File: 77_hazman1yusof_python_dist.txt
Full Name: hazman1yusof/python_dist
Description: None
created_at: 2021-07-13T03:55:38Z
updated_at: 2022-08-30T07:27:44Z
pushed_at: 2022-11-04T06:59:44Z
Language: HTML
URL: https://github.com/hazman1yusof/python_dist
Forks: 0
Stars: 0
Topics: 
README:



File: 780_Nandhinipriya1216_dataanalysis-python_apssdc.txt
Full Name: Nandhinipriya1216/dataanalysis-python_apssdc
Description: None
created_at: 2020-09-14T05:01:32Z
updated_at: 2020-09-14T05:01:36Z
pushed_at: 2020-09-14T05:01:34Z
Language: None
URL: https://github.com/Nandhinipriya1216/dataanalysis-python_apssdc
Forks: 0
Stars: 0
Topics: 
README:
# dataanalysis-python_apssdc


File: 785_joaotdela_HackerRank_Python_Math_MinHeight.txt
Full Name: joaotdela/HackerRank_Python_Math_MinHeight
Description: None
created_at: 2022-02-10T02:53:47Z
updated_at: 2022-02-10T02:55:31Z
pushed_at: 2022-02-10T02:55:16Z
Language: Python
URL: https://github.com/joaotdela/HackerRank_Python_Math_MinHeight
Forks: 0
Stars: 1
Topics: 
README:



File: 786_pilukarts_snake-with-python.txt
Full Name: pilukarts/snake-with-python
Description: None
created_at: 2022-12-03T21:20:28Z
updated_at: 2022-12-03T21:25:22Z
pushed_at: 2022-12-03T21:25:18Z
Language: Python
URL: https://github.com/pilukarts/snake-with-python
Forks: 0
Stars: 0
Topics: 
README:



File: 787_lscandhmx_python_code.txt
Full Name: lscandhmx/python_code
Description: None
created_at: 2020-10-20T02:14:16Z
updated_at: 2020-11-13T09:50:39Z
pushed_at: 2020-11-13T09:50:37Z
Language: Python
URL: https://github.com/lscandhmx/python_code
Forks: 0
Stars: 0
Topics: 
README:



File: 788_Braynner212_CURSO-PYTHON.txt
Full Name: Braynner212/CURSO-PYTHON
Description: None
created_at: 2019-04-27T16:46:28Z
updated_at: 2019-04-27T17:15:31Z
pushed_at: 2019-04-27T17:15:29Z
Language: Python
URL: https://github.com/Braynner212/CURSO-PYTHON
Forks: 0
Stars: 0
Topics: 
README:



File: 789_mattserota_Python-Exploration-ANalysis.txt
Full Name: mattserota/Python-Exploration-ANalysis
Description: None
created_at: 2022-04-11T20:23:24Z
updated_at: 2022-04-11T20:23:24Z
pushed_at: 2022-04-11T20:23:24Z
Language: None
URL: https://github.com/mattserota/Python-Exploration-ANalysis
Forks: 0
Stars: 0
Topics: 
README:



File: 78_Areeba01_Saylani-Python-Assignment.txt
Full Name: Areeba01/Saylani-Python-Assignment
Description: None
created_at: 2019-11-28T16:05:52Z
updated_at: 2021-06-09T14:37:58Z
pushed_at: 2019-12-21T10:35:54Z
Language: Jupyter Notebook
URL: https://github.com/Areeba01/Saylani-Python-Assignment
Forks: 0
Stars: 1
Topics: 
README:
# Saylani-Python-Assignment


File: 790_faruqii_PythonTCP.txt
Full Name: faruqii/PythonTCP
Description: None
created_at: 2022-10-22T17:34:23Z
updated_at: 2022-10-22T17:34:23Z
pushed_at: 2022-10-22T17:34:24Z
Language: None
URL: https://github.com/faruqii/PythonTCP
Forks: 0
Stars: 0
Topics: 
README:
# PythonTCP


File: 791_EuanMurray_PythonBootcamp.txt
Full Name: EuanMurray/PythonBootcamp
Description: None
created_at: 2022-01-11T14:20:27Z
updated_at: 2022-01-11T14:28:37Z
pushed_at: 2022-01-11T20:44:28Z
Language: Jupyter Notebook
URL: https://github.com/EuanMurray/PythonBootcamp
Forks: 0
Stars: 0
Topics: 
README:



File: 794_OmoyeniO_Lasso-Regression-in-python.txt
Full Name: OmoyeniO/Lasso-Regression-in-python
Description: None
created_at: 2022-05-25T14:01:10Z
updated_at: 2022-05-25T14:01:22Z
pushed_at: 2022-05-25T14:01:19Z
Language: Jupyter Notebook
URL: https://github.com/OmoyeniO/Lasso-Regression-in-python
Forks: 0
Stars: 0
Topics: 
README:
# RegressionandLasso


File: 795_KrisiYordanova_python-task.txt
Full Name: KrisiYordanova/python-task
Description: None
created_at: 2021-12-19T07:58:51Z
updated_at: 2021-12-19T08:23:39Z
pushed_at: 2021-12-19T08:23:37Z
Language: Python
URL: https://github.com/KrisiYordanova/python-task
Forks: 0
Stars: 0
Topics: 
README:



File: 797_DouluriKiran_Python_Web_Design.txt
Full Name: DouluriKiran/Python_Web_Design
Description: None
created_at: 2021-02-10T22:48:14Z
updated_at: 2021-03-28T09:10:59Z
pushed_at: 2021-02-10T22:51:44Z
Language: Jupyter Notebook
URL: https://github.com/DouluriKiran/Python_Web_Design
Forks: 0
Stars: 0
Topics: 
README:



File: 7_PriscaTida_python-formation.txt
Full Name: PriscaTida/python-formation
Description: None
created_at: 2022-05-21T14:36:15Z
updated_at: 2022-05-21T14:40:49Z
pushed_at: 2022-05-21T14:40:47Z
Language: Jupyter Notebook
URL: https://github.com/PriscaTida/python-formation
Forks: 0
Stars: 0
Topics: 
README:



File: 806_jhedfors_Python_6.APIs-AJAX.txt
Full Name: jhedfors/Python_6.APIs-AJAX
Description: None
created_at: 2016-05-22T01:57:40Z
updated_at: 2016-05-22T02:18:09Z
pushed_at: 2016-05-23T22:42:58Z
Language: Python
URL: https://github.com/jhedfors/Python_6.APIs-AJAX
Forks: 0
Stars: 0
Topics: 
README:
# Python_6.APIs-AJAX



File: 813_Gui-dada_pythonProject.txt
Full Name: Gui-dada/pythonProject
Description: None
created_at: 2022-05-17T10:41:42Z
updated_at: 2022-05-17T10:41:42Z
pushed_at: 2022-05-17T10:41:43Z
Language: None
URL: https://github.com/Gui-dada/pythonProject
Forks: 0
Stars: 0
Topics: 
README:



File: 815_Dimitriscs1567_Python-Courses.txt
Full Name: Dimitriscs1567/Python-Courses
Description: None
created_at: 2021-04-20T20:48:43Z
updated_at: 2021-05-31T19:09:51Z
pushed_at: 2021-05-31T19:09:49Z
Language: Python
URL: https://github.com/Dimitriscs1567/Python-Courses
Forks: 0
Stars: 0
Topics: 
README:



File: 816_AMARESH19991_python.txt
Full Name: AMARESH19991/python
Description: None
created_at: 2022-10-26T08:41:17Z
updated_at: 2022-11-07T11:51:36Z
pushed_at: 2022-10-26T08:41:18Z
Language: None
URL: https://github.com/AMARESH19991/python
Forks: 0
Stars: 0
Topics: 
README:
# sample


File: 818_nikban95_30-Days-of-Code.txt
Full Name: nikban95/30-Days-of-Code
Description: None
created_at: 2016-02-13T12:19:36Z
updated_at: 2019-12-04T20:04:08Z
pushed_at: 2019-12-04T20:01:53Z
Language: Python
URL: https://github.com/nikban95/30-Days-of-Code
Forks: 0
Stars: 0
Topics: 
README:
### 30 Days of Code Challenge

#### What this is about?
- It is 30 Days of code challenge present on hackerrank(https://www.hackerrank.com/domains/tutorials/30-days-of-code) where 1 problems is solved daily for 30 days to improve your coding skills in a particular language.
- You can find the challenge solution for different languages in the respective folders.

Feel free to contribute!!!



File: 820_nctune2808_PythonPract.txt
Full Name: nctune2808/PythonPract
Description: None
created_at: 2021-07-14T12:17:01Z
updated_at: 2021-08-15T21:57:32Z
pushed_at: 2021-08-15T21:57:23Z
Language: Python
URL: https://github.com/nctune2808/PythonPract
Forks: 0
Stars: 0
Topics: 
README:



File: 821_dennyclain123_Python-Network_Programming.txt
Full Name: dennyclain123/Python-Network_Programming
Description: None
created_at: 2021-01-02T07:02:41Z
updated_at: 2021-01-25T01:27:47Z
pushed_at: 2021-01-22T09:10:03Z
Language: Python
URL: https://github.com/dennyclain123/Python-Network_Programming
Forks: 0
Stars: 1
Topics: 
README:
# Python-Network_Programming
Written By Aung Khant Moe (From NIT Admin Team)
ကျွန်တော်ရေးထားတဲ့ python script တွေကိုအသုံးပြုပြီးတော့ မိတ်ဆွေတို့အနေဖြင့် အလုပ်ခွင်က network devices တွေပဲဖြစ်စေ အိမ်မှာ lab စမ်းရင်ပဲဖြစ်စေ လိုအပ်သလို အသုံးပြုလို့ရပါပြီ
With Thanks
Aung Khant Moe



File: 822_cpalileo_Python-16Day-Crashcourse.txt
Full Name: cpalileo/Python-16Day-Crashcourse
Description: None
created_at: 2022-08-31T15:51:47Z
updated_at: 2022-08-31T15:57:31Z
pushed_at: 2022-08-31T17:51:33Z
Language: Python
URL: https://github.com/cpalileo/Python-16Day-Crashcourse
Forks: 0
Stars: 0
Topics: 
README:
# Python-16Day-Crashcourse

Day 1 Challenge: Beer Brand Maker
Day 2 Challenge: Commission Calculator



File: 824_siddhant-dutta_Principles-of-Machine-Learning-Python.txt
Full Name: siddhant-dutta/Principles-of-Machine-Learning-Python
Description: None
created_at: 2021-04-04T12:44:03Z
updated_at: 2021-04-04T14:33:03Z
pushed_at: 2021-04-06T09:08:01Z
Language: None
URL: https://github.com/siddhant-dutta/Principles-of-Machine-Learning-Python
Forks: 0
Stars: 0
Topics: 
README:



File: 825_DonyellH1998_python-programming.txt
Full Name: DonyellH1998/python-programming
Description: None
created_at: 2020-03-23T22:35:56Z
updated_at: 2020-04-29T22:13:27Z
pushed_at: 2020-04-29T22:13:24Z
Language: Jupyter Notebook
URL: https://github.com/DonyellH1998/python-programming
Forks: 0
Stars: 0
Topics: 
README:



File: 827_jeongyeob97_pythonAlgorithm.txt
Full Name: jeongyeob97/pythonAlgorithm
Description: None
created_at: 2021-01-22T08:46:20Z
updated_at: 2021-12-10T11:47:13Z
pushed_at: 2022-02-02T14:33:21Z
Language: Python
URL: https://github.com/jeongyeob97/pythonAlgorithm
Forks: 0
Stars: 1
Topics: 
README:



File: 82_alexsmith922_quiz-game-python.txt
Full Name: alexsmith922/quiz-game-python
Description: None
created_at: 2021-09-28T12:03:39Z
updated_at: 2021-09-28T19:10:53Z
pushed_at: 2021-09-28T19:10:50Z
Language: Python
URL: https://github.com/alexsmith922/quiz-game-python
Forks: 0
Stars: 0
Topics: 
README:



File: 830_donv05_Python-Learning.txt
Full Name: donv05/Python-Learning
Description: None
created_at: 2020-10-09T02:42:26Z
updated_at: 2020-10-09T07:51:01Z
pushed_at: 2020-10-12T03:23:39Z
Language: None
URL: https://github.com/donv05/Python-Learning
Forks: 0
Stars: 0
Topics: 
README:
# Python-Learning

# 1.Why choose Python?
    - Designed for clear, logical code that is easy to read and learn
    - Lots of existing libraries and frameworks written in python allowing users to apply Python to a wide variety of tasks.
    - Focuses on optimizing developer time, rather than a computer's proccessing time.
    - Great documentation online:
        docs.python.org/3;

# 1.What can you do with Python?

    - Create website:
        Use web framework such as Django and flask to handle the backend of a website and user data
        Create interactive dashboards for users

    - Automate simple tasks:
        Search for files and editing them 
        Scraping information from a website
        Reading and editing excel files
        Work with PDFs
        Automate emails and text messages 
        Fill out forms
    
    - Data Science and machine Learning
        Analyze large data files
        Create visualizations
        Perform machine learning tasks
        Create and runf predictive algorithms

# 3 String - FAQ
    1. Are string mutable?
        String not mutable(meaning you can't use indexing to change individual elements of a string)
    2. How do i create comments in my code?
        You can use the hashtag to create a comment in your code


File: 832_alezi06_python-project-lvl3.txt
Full Name: alezi06/python-project-lvl3
Description: None
created_at: 2020-06-09T08:37:16Z
updated_at: 2020-07-01T12:57:40Z
pushed_at: 2020-07-01T12:57:38Z
Language: Python
URL: https://github.com/alezi06/python-project-lvl3
Forks: 0
Stars: 0
Topics: 
README:
# Page Loader

### Install:

[![Build Status](https://travis-ci.org/alezi06/python-project-lvl3.svg?branch=master)](https://travis-ci.org/alezi06/python-project-lvl3)
[![Maintainability](https://api.codeclimate.com/v1/badges/e881d4a51f8c34e19a3f/maintainability)](https://codeclimate.com/github/alezi06/python-project-lvl3/maintainability)
[![Test Coverage](https://api.codeclimate.com/v1/badges/e881d4a51f8c34e19a3f/test_coverage)](https://codeclimate.com/github/alezi06/python-project-lvl3/test_coverage)

```
python -m pip install --user -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ alezi06-page-loader
```

### Usage:

```
$ page-loader -h
usage: page-loader [-h] [-o OUTPUT] url

Load Page

positional arguments:
  url

optional arguments:
  -h, --help                   show this help message and exit
  -f OUTPUT, --output OUTPUT   output directory

```

Asciinema:

[![asciicast](https://asciinema.org/a/DNuSoWH6Jr8eSz4Ov2hORsVXQ.svg)](https://asciinema.org/a/DNuSoWH6Jr8eSz4Ov2hORsVXQ)


File: 833_ganeshkumar1998_python.txt
Full Name: ganeshkumar1998/python
Description: None
created_at: 2018-06-05T06:36:22Z
updated_at: 2018-06-05T10:17:04Z
pushed_at: 2018-06-05T10:17:03Z
Language: Python
URL: https://github.com/ganeshkumar1998/python
Forks: 0
Stars: 0
Topics: 
README:



File: 834_Vinayakoo7_Aircraft-Management-and-Assignmenrt-System-AMAS.txt
Full Name: Vinayakoo7/Aircraft-Management-and-Assignmenrt-System-AMAS
Description: None
created_at: 2023-12-04T13:22:54Z
updated_at: 2024-10-11T17:03:48Z
pushed_at: 2024-10-11T17:03:45Z
Language: Python
URL: https://github.com/Vinayakoo7/Aircraft-Management-and-Assignmenrt-System-AMAS
Forks: 0
Stars: 0
Topics: 
README:

Aircraft Management System 
(High School Python Project)

Welcome to the Aircraft Management System, a Python project developed as part of the CBSE syllabus during high school. This project demonstrates how Python can be used to manage aircraft details at an airport, including handling passengers, cargo, and flight distances. The project employs Tkinter for the graphical user interface and MySQL for database operations.

Project Overview

The application allows users to input and manage data on available aircraft at an airport. Users can specify:
- The number of passengers the aircraft can carry
- The flight range (distance in kilometers)
- Cargo capacity
- Aircraft model

The system then assists in determining the best aircraft to assign to a particular flight based on the input criteria.

Technologies Used
- Python: Core programming language.
- Tkinter: For creating the graphical user interface (GUI).
- MySQL: Used for database management to store and retrieve aircraft data.
- mysql.connector: Python module to interact with the MySQL database.

Setup Instructions

To set up and run this project on your local machine, follow the steps below:

1. Prerequisites

- Install Python 3.x from python.org.
- Install MySQL 5.5 or higher. You can download MySQL from mysql.com.
- Make sure you have mysql.connector installed. To install the package, run:
  pip install mysql-connector-python

2. Project Setup

1. Clone this repository or download the project files.
2. Ensure the Python script is located in the same directory as the media folder.
3. MySQL Setup:
   - Install MySQL Essential 5.5 or higher on your system.
   - Set the MySQL root password to 1234 (you can modify the script to use a different password if required).
   - Open MySQL and create a new database named adis:
     CREATE DATABASE adis;
   - Use the following SQL command to create the required table:
     CREATE TABLE AMAS (
       Sno INT AUTO_INCREMENT PRIMARY KEY,
       Passengers INT,
       Distance FLOAT,
       Cargo CHAR(1),
       Aircraft VARCHAR(255)
     );

3. Running the Project

1. Open a terminal/command prompt and navigate to the project directory.
2. Run the Python script:
   python Project.py
3. The application window will launch. From there, you can input aircraft details and manage the database.

Features

- Add Aircraft Information: Insert new records into the MySQL database, including the number of passengers, flight range, cargo capacity, and aircraft model.
- Determine Best Aircraft: Based on input requirements, the program can suggest the best aircraft for a flight.
- Graphical User Interface (GUI): Interact with the application through a user-friendly interface designed using Tkinter.

Customization

You can modify the Python code to suit your specific needs. For instance, you can adjust the database schema, add new functionalities, or improve the GUI. 

Troubleshooting

- Ensure that your MySQL service is running.
- If you're using a different MySQL password, update the connection settings in the Python script accordingly.

Future Improvements

- Add additional fields for aircraft information, such as fuel capacity and maintenance schedules.
- Implement validation for user inputs in the GUI.
- Add support for more complex queries and reports on aircraft usage and availability.

License

This project is licensed under the MIT License. Feel free to explore, modify, and distribute the code.

Contact

For any questions or feedback, feel free to reach out to me through GitHub.

Happy coding!



File: 83_XabiOdri_python.txt
Full Name: XabiOdri/python
Description: None
created_at: 2017-11-02T14:51:33Z
updated_at: 2017-11-08T12:33:31Z
pushed_at: 2017-11-08T15:45:44Z
Language: Python
URL: https://github.com/XabiOdri/python
Forks: 0
Stars: 0
Topics: 
README:



File: 840_vishal-2300_week2-Python-CipherSchools.txt
Full Name: vishal-2300/week2-Python-CipherSchools
Description: None
created_at: 2022-12-12T15:25:04Z
updated_at: 2022-12-12T15:27:50Z
pushed_at: 2022-12-12T15:27:45Z
Language: Python
URL: https://github.com/vishal-2300/week2-Python-CipherSchools
Forks: 0
Stars: 0
Topics: 
README:



File: 841_JayaramanGanesh_machine-learning-Regression-model-using-python.txt
Full Name: JayaramanGanesh/machine-learning-Regression-model-using-python
Description: None
created_at: 2022-12-15T23:26:59Z
updated_at: 2022-12-15T23:27:16Z
pushed_at: 2022-12-15T23:34:25Z
Language: Python
URL: https://github.com/JayaramanGanesh/machine-learning-Regression-model-using-python
Forks: 0
Stars: 0
Topics: 
README:



File: 842_Userfound404_Python-Lab-Exercises.txt
Full Name: Userfound404/Python-Lab-Exercises
Description: None
created_at: 2023-02-01T07:24:44Z
updated_at: 2023-02-01T07:25:07Z
pushed_at: 2023-02-05T07:49:46Z
Language: Jupyter Notebook
URL: https://github.com/Userfound404/Python-Lab-Exercises
Forks: 0
Stars: 0
Topics: 
README:
# Python-Lab-Exercises


File: 845_shsh4648_pythonProject4.txt
Full Name: shsh4648/pythonProject4
Description: None
created_at: 2021-11-29T04:35:53Z
updated_at: 2021-11-29T04:35:53Z
pushed_at: 2021-11-29T04:35:53Z
Language: None
URL: https://github.com/shsh4648/pythonProject4
Forks: 0
Stars: 0
Topics: 
README:



File: 846_iamdeepakvashisth_LeetCode-Algorithms-Python.txt
Full Name: iamdeepakvashisth/LeetCode-Algorithms-Python
Description: None
created_at: 2021-04-15T02:17:37Z
updated_at: 2021-08-23T04:10:11Z
pushed_at: 2021-08-23T04:10:08Z
Language: Python
URL: https://github.com/iamdeepakvashisth/LeetCode-Algorithms-Python
Forks: 0
Stars: 0
Topics: 
README:
# LeetCodeProblemsPython


File: 847_yasinhoca_algorithm_python_autumn_2021.txt
Full Name: yasinhoca/algorithm_python_autumn_2021
Description: None
created_at: 2022-06-24T12:31:47Z
updated_at: 2022-06-24T12:35:25Z
pushed_at: 2022-06-24T12:34:36Z
Language: Python
URL: https://github.com/yasinhoca/algorithm_python_autumn_2021
Forks: 0
Stars: 0
Topics: 
README:



File: 84_MILINDSHUKLA_PYTHON.PY.txt
Full Name: MILINDSHUKLA/PYTHON.PY
Description: None
created_at: 2021-07-01T12:23:13Z
updated_at: 2021-07-03T06:21:17Z
pushed_at: 2021-07-03T06:21:15Z
Language: None
URL: https://github.com/MILINDSHUKLA/PYTHON.PY
Forks: 0
Stars: 1
Topics: 
README:
# PYTHON.PY



File: 850_nononamezdm_python.txt
Full Name: nononamezdm/python
Description: None
created_at: 2019-09-30T02:45:37Z
updated_at: 2019-09-30T02:45:37Z
pushed_at: 2019-09-30T02:45:38Z
Language: None
URL: https://github.com/nononamezdm/python
Forks: 0
Stars: 0
Topics: 
README:



File: 852_koshin117_python-learning.txt
Full Name: koshin117/python-learning
Description: None
created_at: 2021-03-29T05:15:13Z
updated_at: 2021-08-20T13:23:42Z
pushed_at: 2021-04-08T05:55:03Z
Language: Python
URL: https://github.com/koshin117/python-learning
Forks: 0
Stars: 0
Topics: 
README:
# python-learning


File: 853_shankardengi_PythonProjectGit.txt
Full Name: shankardengi/PythonProjectGit
Description: None
created_at: 2021-05-28T00:59:36Z
updated_at: 2021-05-29T14:15:59Z
pushed_at: 2021-05-30T02:04:37Z
Language: Python
URL: https://github.com/shankardengi/PythonProjectGit
Forks: 0
Stars: 0
Topics: 
README:



File: 855_vindhyasrigurrapu_python-report.txt
Full Name: vindhyasrigurrapu/python-report
Description: None
created_at: 2023-01-02T09:11:45Z
updated_at: 2023-01-02T09:11:46Z
pushed_at: 2023-01-02T09:11:46Z
Language: None
URL: https://github.com/vindhyasrigurrapu/python-report
Forks: 0
Stars: 0
Topics: 
README:



File: 856_csyjet_bito-python2.txt
Full Name: csyjet/bito-python2
Description: None
created_at: 2021-10-22T10:10:53Z
updated_at: 2021-10-22T10:31:27Z
pushed_at: 2021-10-22T10:31:24Z
Language: Python
URL: https://github.com/csyjet/bito-python2
Forks: 0
Stars: 0
Topics: 
README:
# bito-python2


File: 858_7Ilia7_Python.txt
Full Name: 7Ilia7/Python
Description: None
created_at: 2022-05-10T10:41:58Z
updated_at: 2022-05-10T10:43:34Z
pushed_at: 2022-05-10T10:43:31Z
Language: Python
URL: https://github.com/7Ilia7/Python
Forks: 0
Stars: 0
Topics: 
README:
# Pythin


File: 859_dekorkh_pythonTools.txt
Full Name: dekorkh/pythonTools
Description: None
created_at: 2016-04-15T06:55:39Z
updated_at: 2016-04-15T06:56:37Z
pushed_at: 2016-04-15T06:56:36Z
Language: Python
URL: https://github.com/dekorkh/pythonTools
Forks: 0
Stars: 0
Topics: 
README:



File: 85_ordinater_python-shenanigans.txt
Full Name: ordinater/python-shenanigans
Description: None
created_at: 2019-01-18T20:58:32Z
updated_at: 2019-01-18T21:48:54Z
pushed_at: 2019-01-18T21:48:53Z
Language: Python
URL: https://github.com/ordinater/python-shenanigans
Forks: 0
Stars: 0
Topics: 
README:



File: 860_cygonz0_python-web-crawler.txt
Full Name: cygonz0/python-web-crawler
Description: None
created_at: 2013-03-25T08:49:27Z
updated_at: 2014-10-28T14:00:58Z
pushed_at: 2012-01-20T13:20:05Z
Language: Python
URL: https://github.com/cygonz0/python-web-crawler
Forks: 0
Stars: 0
Topics: 
README:
A programming excercise. A web crawler written in python.

Usage
python --version
Python 2.7.2+

python crawl.py http://www.keza.net 2 JavaScript
crawl.py [url] [depth] [search term]

TODO
the complex part.
figure out how to do tests first.
error handling.

Thoughts
It took 2 hours.
I have never seen python before.
python seems to make sense.
finding the correct regex method was tricky.
casting numbers to strings was annoying.

Problem statement:
Language: Python 
Official site: http://python.org/ 
Beginer's guide: http://wiki.python.org/moin/BeginnersGuide 
Tutorial: http://docs.python.org/tutorial/ 
 
App Category: Networking 
DB: None 
Simple part: 
Create a web crawler app in python which, given a url seed, can crawl 
through all links on the page and scan deep for a given level of 
depth. While crawling the app should be able to return the url page 
containing a specific search text. 
Input: 
1 - Url seed e.g. www.hackernews.com 
2 - Depth e.g. 5 (this means go into links on a page till 5 levels) 
3 - search text e.g. "python" 
Output: 
the list of url that contains the specified text 
The Simple part is mandatory to be completed. 
If you finish the simple part and are eager to take up something 
challenging, then here's a little complex angle to the problem: 
Complex part: 
Write rules around the app for searching. 
Rule 1: The return Url should contain a specific substring 
Rule 2: Highlight in output if the url is amongst a long list of 
blacklisted urls (about 10000 blacklisted urls) 
Rule 3: Search for multiple search strings and rank Urls as per the 
number of different search strings found and occurances of each search 
string in the page 
Rule 4: Rank as per level of the Url w.r.t. seed url 



File: 865_Arg85_Re2_python_code.txt
Full Name: Arg85/Re2_python_code
Description: None
created_at: 2020-10-03T11:57:43Z
updated_at: 2020-10-17T14:29:53Z
pushed_at: 2020-10-17T14:29:50Z
Language: None
URL: https://github.com/Arg85/Re2_python_code
Forks: 0
Stars: 0
Topics: hacktoberfest, hacktoberfest2020
README:



File: 867_tpjsolomon_IBM-Python-Project.txt
Full Name: tpjsolomon/IBM-Python-Project
Description: None
created_at: 2022-10-21T15:51:30Z
updated_at: 2022-10-21T15:55:18Z
pushed_at: 2022-10-21T15:55:14Z
Language: Jupyter Notebook
URL: https://github.com/tpjsolomon/IBM-Python-Project
Forks: 0
Stars: 0
Topics: 
README:
# IBM-Python-Project
This repository contains my final assignment submission for the IBM Python project.



File: 868_praneetha848_Python-practise-.txt
Full Name: praneetha848/Python-practise-
Description: None
created_at: 2019-11-10T16:31:38Z
updated_at: 2019-11-10T16:31:38Z
pushed_at: 2019-11-10T16:31:39Z
Language: None
URL: https://github.com/praneetha848/Python-practise-
Forks: 0
Stars: 0
Topics: 
README:



File: 869_yusifabasovv_Python-Project-for-Data-Science-IBM.txt
Full Name: yusifabasovv/Python-Project-for-Data-Science-IBM
Description: None
created_at: 2021-03-25T12:07:27Z
updated_at: 2021-03-25T12:11:31Z
pushed_at: 2021-03-25T12:11:29Z
Language: Jupyter Notebook
URL: https://github.com/yusifabasovv/Python-Project-for-Data-Science-IBM
Forks: 0
Stars: 0
Topics: 
README:
# Python-Project-for-Data-Science-IBM

<h1>Extracting and Visualizing Stock Data</h1>
<h2>Description</h2>

Extracting essential data from a dataset and displaying it is a necessary part of data science; therefore individuals can make correct decisions based on the data. In this assignment, you will extract some stock data, you will then display this data in a graph.


<h2>Table of Contents</h2>
<div class="alert alert-block alert-info" style="margin-top: 20px">
    <ul>
        <li>Define a Function that Makes a Graph</li>
        <li>Question 1: Use yfinance to Extract Stock Data</li>
        <li>Question 2: Use Webscraping to Extract Tesla Revenue Data</li>
        <li>Question 3: Use yfinance to Extract Stock Data</li>
        <li>Question 4: Use Webscraping to Extract GME Revenue Data</li>
        <li>Question 5: Plot Tesla Stock Graph</li>
        <li>Question 6: Plot GameStop Stock Graph</li>
    </ul>

</div>

<hr>



File: 872_NatFT_PythonCourse.txt
Full Name: NatFT/PythonCourse
Description: None
created_at: 2022-04-05T12:31:06Z
updated_at: 2022-04-05T13:18:20Z
pushed_at: 2022-07-07T10:08:02Z
Language: Jupyter Notebook
URL: https://github.com/NatFT/PythonCourse
Forks: 0
Stars: 0
Topics: 
README:
# PythonCourse


File: 873_esomesmo_automate-excel-with-python.txt
Full Name: esomesmo/automate-excel-with-python
Description: None
created_at: 2022-10-17T12:23:25Z
updated_at: 2022-10-17T12:23:46Z
pushed_at: 2022-10-17T12:23:41Z
Language: Jupyter Notebook
URL: https://github.com/esomesmo/automate-excel-with-python
Forks: 0
Stars: 0
Topics: 
README:

# Automate Excel Reporting Using Python

There’s a lot of pain points in Excel that make it a tool that’s cumbersome and repetitive for data manipulation. But did you know that you can also use Python to automate repetitive tasks in Excel? In this video, I will be sharing my favorite ways to automate Microsoft Excel using Python. In particular, we will be using the open-source tools: Pandas, xlwings & plotly. After this video, you will be able to create a custom Python script that allows you to combine excel files & create charts out of them.


## Video Tutorial
[![YouTube Video](https://img.youtube.com/vi/JoonRjMsSdY/0.jpg)](https://youtu.be/JoonRjMsSdY)

## Changes after releasing the video
**Please note**<br/>
With pandas version 1.4.0 DataFrame.append() and Series.append() have been deprecated and will be removed in a future version.<br/>
Hence, I have changed the code as follows to merge all Excel files into one DataFrame:
```diff
- df = df.append(pd.read_excel(file), ignore_index=True)

+ df_tmp = pd.read_excel(file)
+ df = pd.concat([df, df_tmp], ignore_index=True)
```

## Author
- Sven from Coding Is Fun
- YouTube: https://youtube.com/c/CodingIsFun
- Website: https://pythonandvba.com


## Feedback
If you have any feedback, please reach out to me at contact@pythonandvba.com


![Logo](https://www.pythonandvba.com/banner-img)




File: 874_liaiqin0501_python-online-coding.txt
Full Name: liaiqin0501/python-online-coding
Description: None
created_at: 2017-08-28T07:58:35Z
updated_at: 2017-08-28T09:54:28Z
pushed_at: 2017-08-28T10:01:43Z
Language: Python
URL: https://github.com/liaiqin0501/python-online-coding
Forks: 0
Stars: 0
Topics: 
README:



File: 877_aman-685_python.txt
Full Name: aman-685/python
Description: None
created_at: 2022-07-30T10:00:10Z
updated_at: 2022-07-30T10:00:10Z
pushed_at: 2022-08-22T11:03:56Z
Language: None
URL: https://github.com/aman-685/python
Forks: 0
Stars: 0
Topics: 
README:
# Python Assignment



File: 879_yyeona_algorithm_python.txt
Full Name: yyeona/algorithm_python
Description: None
created_at: 2021-01-06T07:21:55Z
updated_at: 2021-02-04T11:21:59Z
pushed_at: 2021-02-04T11:21:57Z
Language: Python
URL: https://github.com/yyeona/algorithm_python
Forks: 0
Stars: 0
Topics: 
README:



File: 881_drvgcandy_week3-python-cipherschools.txt
Full Name: drvgcandy/week3-python-cipherschools
Description: None
created_at: 2022-12-29T16:25:41Z
updated_at: 2022-12-29T16:27:40Z
pushed_at: 2022-12-29T16:27:37Z
Language: Jupyter Notebook
URL: https://github.com/drvgcandy/week3-python-cipherschools
Forks: 0
Stars: 0
Topics: 
README:



File: 882_tris-tux_python.txt
Full Name: tris-tux/python
Description: None
created_at: 2018-02-26T08:05:12Z
updated_at: 2018-02-26T08:05:12Z
pushed_at: 2018-02-26T08:05:12Z
Language: None
URL: https://github.com/tris-tux/python
Forks: 0
Stars: 0
Topics: 
README:



File: 884_UrwashiPriya_tictactoe_in_python.txt
Full Name: UrwashiPriya/tictactoe_in_python
Description: None
created_at: 2020-03-29T15:30:20Z
updated_at: 2020-03-29T15:40:09Z
pushed_at: 2020-03-29T15:40:07Z
Language: Jupyter Notebook
URL: https://github.com/UrwashiPriya/tictactoe_in_python
Forks: 0
Stars: 0
Topics: 
README:
# tictactoe_in_python



File: 885_GodhaMounika_python-project.txt
Full Name: GodhaMounika/python-project
Description: None
created_at: 2022-10-26T15:43:37Z
updated_at: 2022-10-26T15:43:37Z
pushed_at: 2022-10-26T15:46:13Z
Language: None
URL: https://github.com/GodhaMounika/python-project
Forks: 0
Stars: 0
Topics: 
README:



File: 889_Soykaa_advanced-python-2022-hse.txt
Full Name: Soykaa/advanced-python-2022-hse
Description: None
created_at: 2022-02-01T12:33:29Z
updated_at: 2022-03-09T00:56:34Z
pushed_at: 2022-03-09T18:49:15Z
Language: Python
URL: https://github.com/Soykaa/advanced-python-2022-hse
Forks: 0
Stars: 0
Topics: advanced-python, homework, python
README:
# advanced-python-2022-hse

Python course tasks



File: 890_gigabyte727_Python_HW3_Pandas.txt
Full Name: gigabyte727/Python_HW3_Pandas
Description: None
created_at: 2023-01-07T17:40:36Z
updated_at: 2023-01-07T18:03:47Z
pushed_at: 2023-01-18T09:01:43Z
Language: Jupyter Notebook
URL: https://github.com/gigabyte727/Python_HW3_Pandas
Forks: 0
Stars: 0
Topics: 
README:
# Python Base. Домашнее задание 3. Pandas.

Используя библиотеку pandas (или аналоги), проанализировать как можно больше характеристик, влияющих на успеваемость студентов.

Ссылка на Google Drive с исходными файлами CSV: [https://drive.google.com/drive/folders/1xQxMIAqQyMHs5uvu6YFhj10a55UnbOM5](https://drive.google.com/drive/folders/1nDl72w3NgwYqOTx6Tq0-crdLusSHeJMs?usp=share_link)



File: 893_kolper98_Python.txt
Full Name: kolper98/Python
Description: None
created_at: 2021-10-30T18:18:36Z
updated_at: 2021-10-30T18:18:36Z
pushed_at: 2021-10-30T18:18:36Z
Language: None
URL: https://github.com/kolper98/Python
Forks: 0
Stars: 0
Topics: 
README:



File: 894_josemqv_Writing-Functions-in-Python.txt
Full Name: josemqv/Writing-Functions-in-Python
Description: None
created_at: 2022-01-03T03:58:20Z
updated_at: 2023-02-02T16:44:41Z
pushed_at: 2022-01-03T05:17:07Z
Language: None
URL: https://github.com/josemqv/Writing-Functions-in-Python
Forks: 0
Stars: 1
Topics: 
README:
# Writing-Functions-in-Python


File: 897_idrusfahreza_intermediate_python.txt
Full Name: idrusfahreza/intermediate_python
Description: None
created_at: 2021-10-30T08:52:45Z
updated_at: 2021-11-23T08:46:55Z
pushed_at: 2021-11-23T08:46:52Z
Language: Jupyter Notebook
URL: https://github.com/idrusfahreza/intermediate_python
Forks: 0
Stars: 0
Topics: 
README:
# intermediate_python


File: 898_Graham724_Python_Functions_practice.txt
Full Name: Graham724/Python_Functions_practice
Description: None
created_at: 2022-08-25T00:15:33Z
updated_at: 2022-08-25T00:37:41Z
pushed_at: 2022-08-25T00:37:39Z
Language: Python
URL: https://github.com/Graham724/Python_Functions_practice
Forks: 0
Stars: 0
Topics: 
README:



File: 899_iamthepoe_PythonStudies.txt
Full Name: iamthepoe/PythonStudies
Description: None
created_at: 2022-06-29T23:18:27Z
updated_at: 2022-06-30T21:34:11Z
pushed_at: 2022-06-30T21:34:00Z
Language: Python
URL: https://github.com/iamthepoe/PythonStudies
Forks: 0
Stars: 0
Topics: 
README:
# PythonStudies


File: 89_hoangnguyen2308_install-opencv3.4-Python3.6--Raspberry-Pi3.txt
Full Name: hoangnguyen2308/install-opencv3.4-Python3.6--Raspberry-Pi3
Description: None
created_at: 2018-04-06T08:48:20Z
updated_at: 2018-04-06T08:49:04Z
pushed_at: 2018-04-06T08:49:02Z
Language: None
URL: https://github.com/hoangnguyen2308/install-opencv3.4-Python3.6--Raspberry-Pi3
Forks: 0
Stars: 0
Topics: 
README:
# install-opencv3.4-Python3.6--Raspberry-Pi3

1. Raspberry Pi 3 B +
Raspbian Stretch, version March 2018 
2. Install Python3.6

$wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz
$tar xf Python-3.6.2.tar.xz
$cd Python-3.6.2
$./configure --enable-optimizations
$make
$sudo make altinstall
$rm Python-3.6.2.tar.xz
--
3. Expand filesystem
$ sudo raspi-config

--And then select the “Advanced Options” menu item
--Select “Expand filesystem”
--and reboot pi
$ sudo reboot

4. Install dependencies
$ sudo apt-get update && sudo apt-get upgrade
$ sudo apt-get install build-essential cmake pkg-config
$ sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev
$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
$ sudo apt-get install libxvidcore-dev libx264-dev
$ sudo apt-get install libgtk2.0-dev libgtk-3-dev
$ sudo apt-get install libatlas-base-dev gfortran

5. Download OpenCV3.4 source code 
$cd ~
$wget -O opencv.zip https://github.com/Itseez/opencv/archive/3.4.0.zip
$unzip opencv.zip
$wget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.4.0.zip
$unzip opencv_contrib.zip

6. Install virtualenv and virtualenvwrapper
$sudo pip3.6 install virtualenv virtualenvwrapper
$ sudo rm -rf ~/.cache/pip

7. Update profile for virtualenv and virtualenvwrapper
-- virtualenv and virtualenvwrapper
$ export WORKON_HOME=$HOME/.virtualenvs
$source /usr/local/bin/virtualenvwrapper.sh

8. Create Python3.6 on virtual environment 
$ source ~/.profile
$ mkvirtualenv cv -p python3.6

9. Run cv
$ workon cv
-- you can see in the terminal: (cv)pi@hng_pi: -$
--and try:
(cv)pi@hng_pi: -$python
-- you can see the version of python is running :
Python 3.6.2

10. install setuptools, dev, Numpy
$sudo pip3.6 install numpy
$sudo pip3.6 install setuptools 
$sudo pip3.6 install dev 

11. Compile and Install OpenCV3.4 for Python3.6
$ cd ~/opencv-3.4.0/
$ mkdir build
$ cd build
$ cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_PYTHON_EXAMPLES=ON  -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.4.0/modules  -D BUILD_EXAMPLES=ON 
 

12. Swap Space size before compiling to add more virtual memory 
$sudo nano /etc/dphys-swapfile
--open and edit CONF_SWAPSIZE, change it 

--# CONF_SWAPSIZE=100
CONF_SWAPSIZE=1024

-- save it and exit
-- test
$sudo /etc/init.d/dphys-swapfile stop
$sudo /etc/init.d/dphys-swapfile start

13. Finally ready to be Compile

$make -j4

14. Install the build on raspberry pi 
$sudo make install 
$sudo ldconfig 

15. Finish installing OpenCV3.4.0 on Raspberry Pi3 B+
$ ls -l /usr/local/lib/python3.6/site-packages/
$ cd /usr/local/lib/python3.6/site-packages/
-- you can see file:
cv2.cpython-36m-arm-linux-gnueabihf.so
-- we need to rename this file to cv2.so
$ sudo mv cv2.cpython-36m-arm-linux-gnueabihf.so cv2.so

16. Tesing cv2
$python3.6 
>>>import cv2

17. Change your SWAPSIZE back 

CONF_SWAPSIZE=100
--# CONF_SWAPSIZE=1024

$ sudo /etc/init.d/dphys-swapfile stop
$ sudo /etc/init.d/dphys-swapfile start

18. Clean up your house-- make sure cv2 already installed 
$ cd ~
$ rm -rf opencv-3.4.0 opencv_contrib-3.4.0
$ rm opencv.zip opencv_contrib.zip

# Good luck



File: 900_lylinux23_PythonTricks.txt
Full Name: lylinux23/PythonTricks
Description: None
created_at: 2022-05-05T13:09:59Z
updated_at: 2022-05-05T13:11:08Z
pushed_at: 2022-07-13T11:03:38Z
Language: Python
URL: https://github.com/lylinux23/PythonTricks
Forks: 0
Stars: 1
Topics: 
README:
## Python Tricks: A Buffet of Awesome Python Features
***
Code Sample of Book "Python Tricks: A Buffet of Awesome Python Feature" by Dan Bader

> Mastering Python programming is not just about grasping the theoretical aspects of the language. It is just as much about
> about understanding and adopting the conventions and best practices used by its community.

### Chapter 1: Introduction
***
* What is a Python Trick?
* What This Book will Do for You

### Chapter 2: Patterns for Clean Python
***
* Covering Your A** With Assertions
* Complacent Comma Placement
* Context Manages and the with Statement
* Underscores, Dunders, and More
* "The Zen of Python" Easter Egg

### Chapter 3: Effective Functions
* Python's Functions Are First-Class
* Lambdas Are Single-Expression Functions
* The Power of Decorators
* Fun With *args and **kwargs
* Function Argument Unpacking
* Nothing to Return Here


File: 902_silent7x_python-node-awscli-git-soup.txt
Full Name: silent7x/python-node-awscli-git-soup
Description: None
created_at: 2020-08-20T05:21:58Z
updated_at: 2024-11-18T07:20:24Z
pushed_at: 2024-11-18T07:20:21Z
Language: Dockerfile
URL: https://github.com/silent7x/python-node-awscli-git-soup
Forks: 0
Stars: 0
Topics: 
README:
# node, git, python, awscli 



File: 907_htasoftware99_Python_OOP.txt
Full Name: htasoftware99/Python_OOP
Description: None
created_at: 2022-12-13T18:55:19Z
updated_at: 2022-12-13T18:58:28Z
pushed_at: 2022-12-13T18:58:23Z
Language: Python
URL: https://github.com/htasoftware99/Python_OOP
Forks: 0
Stars: 0
Topics: 
README:



File: 908_rafaltaras_REST_API_Python_FLASK.txt
Full Name: rafaltaras/REST_API_Python_FLASK
Description: None
created_at: 2022-12-15T22:35:42Z
updated_at: 2022-12-15T22:36:55Z
pushed_at: 2022-12-15T22:36:52Z
Language: Python
URL: https://github.com/rafaltaras/REST_API_Python_FLASK
Forks: 0
Stars: 0
Topics: 
README:



File: 909_Chaplygin-vlad_python_basic_edu.txt
Full Name: Chaplygin-vlad/python_basic_edu
Description: None
created_at: 2020-04-27T10:04:20Z
updated_at: 2020-04-29T17:45:00Z
pushed_at: 2020-04-29T17:44:58Z
Language: Python
URL: https://github.com/Chaplygin-vlad/python_basic_edu
Forks: 0
Stars: 0
Topics: 
README:
python_basic_edu



File: 90_DDD96_PythonApps.txt
Full Name: DDD96/PythonApps
Description: None
created_at: 2019-11-25T11:55:10Z
updated_at: 2020-04-17T15:00:57Z
pushed_at: 2019-11-25T11:55:24Z
Language: None
URL: https://github.com/DDD96/PythonApps
Forks: 0
Stars: 0
Topics: 
README:
PythonApps



File: 910_zhouqifanbdh_python.txt
Full Name: zhouqifanbdh/python
Description: None
created_at: 2018-09-18T11:12:08Z
updated_at: 2018-09-18T11:12:08Z
pushed_at: 2018-09-18T11:12:08Z
Language: None
URL: https://github.com/zhouqifanbdh/python
Forks: 0
Stars: 0
Topics: 
README:



File: 911_aliazmn_python-dataclass.txt
Full Name: aliazmn/python-dataclass
Description: None
created_at: 2022-01-29T13:37:22Z
updated_at: 2024-03-03T12:35:20Z
pushed_at: 2022-09-17T08:51:22Z
Language: Python
URL: https://github.com/aliazmn/python-dataclass
Forks: 0
Stars: 3
Topics: 
README:
# python-dataclass

hey its a sample code for python data classes about musics for music lovers like me 



File: 912_akhilow_python-prac.txt
Full Name: akhilow/python-prac
Description: None
created_at: 2017-04-13T04:40:59Z
updated_at: 2020-09-08T04:24:52Z
pushed_at: 2019-07-23T19:40:23Z
Language: Python
URL: https://github.com/akhilow/python-prac
Forks: 0
Stars: 0
Topics: 
README:



File: 914_EkaterinaZemlyakova_applied_python.txt
Full Name: EkaterinaZemlyakova/applied_python
Description: None
created_at: 2018-03-24T11:41:05Z
updated_at: 2018-03-30T16:54:13Z
pushed_at: 2018-03-30T16:54:11Z
Language: Jupyter Notebook
URL: https://github.com/EkaterinaZemlyakova/applied_python
Forks: 0
Stars: 0
Topics: 
README:
Прикладной Python
=================

Это основной репозиторий курса.
Пожалуйста, присылайте мердж-реквесты только с исправлениями, но не со сделанными домашними заданиями.

## Для работы с материалами курса необходимо
* Установить Python [отсюда](https://www.python.org)
* Установить git и склонировать репозиторий

> git clone https://github.com/VadimPushtaev/applied-python.git

* В папке с репозиторием создать виртуальное окружение и активировать его

> python3.6 -m venv venv

> source venv/bin/activate

* Установить jupyter и запустить (браузер должен открыться автоматически)

> pip install notebook

> jupyter-notebook



File: 915_grayimpala_Python_Cheatsheet.txt
Full Name: grayimpala/Python_Cheatsheet
Description: None
created_at: 2022-04-18T20:59:47Z
updated_at: 2022-04-18T21:02:21Z
pushed_at: 2022-04-18T21:00:24Z
Language: Python
URL: https://github.com/grayimpala/Python_Cheatsheet
Forks: 0
Stars: 0
Topics: 
README:
Comprehensive Python Cheatsheet
===============================
<sup>[Download text file](https://raw.githubusercontent.com/gto76/python-cheatsheet/main/README.md), [Buy PDF](https://transactions.sendowl.com/products/78175486/4422834F/view), [Fork me on GitHub](https://github.com/gto76/python-cheatsheet) or [Check out FAQ](https://github.com/gto76/python-cheatsheet/wiki/Frequently-Asked-Questions).
</sup>

![Monty Python](web/image_888.jpeg)


Contents
--------
**&nbsp;&nbsp;&nbsp;** **1. Collections:** **&nbsp;** **[`List`](#list)**__,__ **[`Dictionary`](#dictionary)**__,__ **[`Set`](#set)**__,__ **[`Tuple`](#tuple)**__,__ **[`Range`](#range)**__,__ **[`Enumerate`](#enumerate)**__,__ **[`Iterator`](#iterator)**__,__ **[`Generator`](#generator)**__.__  
**&nbsp;&nbsp;&nbsp;** **2. Types:** **&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**  **[`Type`](#type)**__,__ **[`String`](#string)**__,__ **[`Regular_Exp`](#regex)**__,__ **[`Format`](#format)**__,__ **[`Numbers`](#numbers-1)**__,__ **[`Combinatorics`](#combinatorics)**__,__ **[`Datetime`](#datetime)**__.__  
**&nbsp;&nbsp;&nbsp;** **3. Syntax:** **&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**  **[`Args`](#arguments)**__,__ **[`Inline`](#inline)**__,__ **[`Import`](#imports)**__,__ **[`Decorator`](#decorator)**__,__ **[`Class`](#class)**__,__ **[`Duck_Types`](#duck-types)**__,__ **[`Enum`](#enum)**__,__ **[`Exception`](#exceptions)**__.__  
**&nbsp;&nbsp;&nbsp;** **4. System:** **&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**  **[`Exit`](#exit)**__,__ **[`Print`](#print)**__,__ **[`Input`](#input)**__,__ **[`Command_Line_Arguments`](#command-line-arguments)**__,__ **[`Open`](#open)**__,__ **[`Path`](#paths)**__,__ **[`OS_Commands`](#os-commands)**__.__  
**&nbsp;&nbsp;&nbsp;** **5. Data:** **&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**  **[`JSON`](#json)**__,__ **[`Pickle`](#pickle)**__,__ **[`CSV`](#csv)**__,__ **[`SQLite`](#sqlite)**__,__ **[`Bytes`](#bytes)**__,__ **[`Struct`](#struct)**__,__ **[`Array`](#array)**__,__ **[`Memory_View`](#memory-view)**__,__ **[`Deque`](#deque)**__.__  
**&nbsp;&nbsp;&nbsp;** **6. Advanced:** **&nbsp;&nbsp;&nbsp;**  **[`Threading`](#threading)**__,__ **[`Operator`](#operator)**__,__ **[`Introspection`](#introspection)**__,__ **[`Metaprograming`](#metaprogramming)**__,__ **[`Eval`](#eval)**__,__ **[`Coroutines`](#coroutines)**__.__  
**&nbsp;&nbsp;&nbsp;** **7. Libraries:** **&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**  **[`Progress_Bar`](#progress-bar)**__,__ **[`Plot`](#plot)**__,__ **[`Table`](#table)**__,__ **[`Curses`](#curses)**__,__ **[`Logging`](#logging)**__,__ **[`Scraping`](#scraping)**__,__ **[`Web`](#web)**__,__ **[`Profile`](#profiling)**__,__  
**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;** **[`NumPy`](#numpy)**__,__ **[`Image`](#image)**__,__ **[`Audio`](#audio)**__,__ **[`Games`](#pygame)**__,__ **[`Data`](#pandas)**__.__


Main
----
```python
if __name__ == '__main__':     # Runs main() if file wasn't imported.
    main()
```


List
----
```python
<list> = <list>[<slice>]       # Or: <list>[from_inclusive : to_exclusive : ±step]
```

```python
<list>.append(<el>)            # Or: <list> += [<el>]
<list>.extend(<collection>)    # Or: <list> += <collection>
```

```python
<list>.sort()                  # Sorts in ascending order.
<list>.reverse()               # Reverses the list in-place.
<list> = sorted(<collection>)  # Returns a new sorted list.
<iter> = reversed(<list>)      # Returns reversed iterator.
```

```python
sum_of_elements  = sum(<collection>)
elementwise_sum  = [sum(pair) for pair in zip(list_a, list_b)]
sorted_by_second = sorted(<collection>, key=lambda el: el[1])
sorted_by_both   = sorted(<collection>, key=lambda el: (el[1], el[0]))
flatter_list     = list(itertools.chain.from_iterable(<list>))
product_of_elems = functools.reduce(lambda out, el: out * el, <collection>)
list_of_chars    = list(<str>)
```
* **For details about sorted(), min() and max() see [sortable](#sortable).**
* **Module [operator](#operator) provides functions itemgetter() and mul() that offer the same functionality as [lambda](#lambda) expressions above.**

```python
<list>.insert(<int>, <el>)     # Inserts item at index and moves the rest to the right.
<el>  = <list>.pop([<int>])    # Removes and returns item at index or from the end.
<int> = <list>.count(<el>)     # Returns number of occurrences. Also works on strings.
<int> = <list>.index(<el>)     # Returns index of the first occurrence or raises ValueError.
<list>.remove(<el>)            # Removes first occurrence of the item or raises ValueError.
<list>.clear()                 # Removes all items. Also works on dictionary and set.
```


Dictionary
----------
```python
<view> = <dict>.keys()                          # Coll. of keys that reflects changes.
<view> = <dict>.values()                        # Coll. of values that reflects changes.
<view> = <dict>.items()                         # Coll. of key-value tuples that reflects chgs.
```

```python
value  = <dict>.get(key, default=None)          # Returns default if key is missing.
value  = <dict>.setdefault(key, default=None)   # Returns and writes default if key is missing.
<dict> = collections.defaultdict(<type>)        # Creates a dict with default value of type.
<dict> = collections.defaultdict(lambda: 1)     # Creates a dict with default value 1.
```

```python
<dict> = dict(<collection>)                     # Creates a dict from coll. of key-value pairs.
<dict> = dict(zip(keys, values))                # Creates a dict from two collections.
<dict> = dict.fromkeys(keys [, value])          # Creates a dict from collection of keys.
```

```python
<dict>.update(<dict>)                           # Adds items. Replaces ones with matching keys.
value = <dict>.pop(key)                         # Removes item or raises KeyError.
{k for k, v in <dict>.items() if v == value}    # Returns set of keys that point to the value.
{k: v for k, v in <dict>.items() if k in keys}  # Returns a dictionary, filtered by keys.
```

### Counter
```python
>>> from collections import Counter
>>> colors = ['blue', 'blue', 'blue', 'red', 'red']
>>> counter = Counter(colors)
>>> counter['yellow'] += 1
Counter({'blue': 3, 'red': 2, 'yellow': 1})
>>> counter.most_common()[0]
('blue', 3)
```


Set
---
```python
<set> = set()
```

```python
<set>.add(<el>)                                 # Or: <set> |= {<el>}
<set>.update(<collection> [, ...])              # Or: <set> |= <set>
```

```python
<set>  = <set>.union(<coll.>)                   # Or: <set> | <set>
<set>  = <set>.intersection(<coll.>)            # Or: <set> & <set>
<set>  = <set>.difference(<coll.>)              # Or: <set> - <set>
<set>  = <set>.symmetric_difference(<coll.>)    # Or: <set> ^ <set>
<bool> = <set>.issubset(<coll.>)                # Or: <set> <= <set>
<bool> = <set>.issuperset(<coll.>)              # Or: <set> >= <set>
```

```python
<el> = <set>.pop()                              # Raises KeyError if empty.
<set>.remove(<el>)                              # Raises KeyError if missing.
<set>.discard(<el>)                             # Doesn't raise an error.
```

### Frozen Set
* **Is immutable and hashable.**
* **That means it can be used as a key in a dictionary or as an element in a set.**
```python
<frozenset> = frozenset(<collection>)
```


Tuple
-----
**Tuple is an immutable and hashable list.**
```python
<tuple> = ()
<tuple> = (<el>,)                           # Or: <el>,
<tuple> = (<el_1>, <el_2> [, ...])          # Or: <el_1>, <el_2> [, ...]
```

### Named Tuple
**Tuple's subclass with named elements.**

```python
>>> from collections import namedtuple
>>> Point = namedtuple('Point', 'x y')
>>> p = Point(1, y=2)
Point(x=1, y=2)
>>> p[0]
1
>>> p.x
1
>>> getattr(p, 'y')
2
>>> p._fields  # Or: Point._fields
('x', 'y')
```


Range
-----
```python
<range> = range(to_exclusive)
<range> = range(from_inclusive, to_exclusive)
<range> = range(from_inclusive, to_exclusive, ±step_size)
```

```python
from_inclusive = <range>.start
to_exclusive   = <range>.stop
```


Enumerate
---------
```python
for i, el in enumerate(<collection> [, i_start]):
    ...
```


Iterator
--------
```python
<iter> = iter(<collection>)                 # `iter(<iter>)` returns unmodified iterator.
<iter> = iter(<function>, to_exclusive)     # A sequence of return values until 'to_exclusive'.
<el>   = next(<iter> [, default])           # Raises StopIteration or returns 'default' on end.
<list> = list(<iter>)                       # Returns a list of iterator's remaining elements.
```

### Itertools
```python
from itertools import count, repeat, cycle, chain, islice
```

```python
<iter> = count(start=0, step=1)             # Returns updated value endlessly. Accepts floats.
<iter> = repeat(<el> [, times])             # Returns element endlessly or 'times' times.
<iter> = cycle(<collection>)                # Repeats the sequence endlessly.
```

```python
<iter> = chain(<coll_1>, <coll_2> [, ...])  # Empties collections in order (figuratively).
<iter> = chain.from_iterable(<collection>)  # Empties collections inside a collection in order.
```

```python
<iter> = islice(<coll>, to_exclusive)       # Only returns first 'to_exclusive' elements.
<iter> = islice(<coll>, from_inclusive, …)  # `to_exclusive, step_size`.
```


Generator
---------
* **Any function that contains a yield statement returns a generator.**
* **Generators and iterators are interchangeable.**

```python
def count(start, step):
    while True:
        yield start
        start += step
```

```python
>>> counter = count(10, 2)
>>> next(counter), next(counter), next(counter)
(10, 12, 14)
```


Type
----
* **Everything is an object.**
* **Every object has a type.**
* **Type and class are synonymous.**

```python
<type> = type(<el>)                          # Or: <el>.__class__
<bool> = isinstance(<el>, <type>)            # Or: issubclass(type(<el>), <type>)
```

```python
>>> type('a'), 'a'.__class__, str
(<class 'str'>, <class 'str'>, <class 'str'>)
```

#### Some types do not have built-in names, so they must be imported:
```python
from types import FunctionType, MethodType, LambdaType, GeneratorType, ModuleType
```

### Abstract Base Classes
**Each abstract base class specifies a set of virtual subclasses. These classes are then recognized by isinstance() and issubclass() as subclasses of the ABC, although they are really not. ABC can also manually decide whether or not a specific class is its virtual subclass, usually based on which methods the class has implemented. For instance, Iterable ABC looks for method iter() while Collection ABC looks for methods iter(), contains() and len().**

```python
>>> from collections.abc import Iterable, Collection, Sequence
>>> isinstance([1, 2, 3], Iterable)
True
```

```text
+------------------+------------+------------+------------+
|                  |  Iterable  | Collection |  Sequence  |
+------------------+------------+------------+------------+
| list, range, str |    yes     |    yes     |    yes     |
| dict, set        |    yes     |    yes     |            |
| iter             |    yes     |            |            |
+------------------+------------+------------+------------+
```

```python
>>> from numbers import Number, Complex, Real, Rational, Integral
>>> isinstance(123, Number)
True
```

```text
+--------------------+----------+----------+----------+----------+----------+
|                    |  Number  |  Complex |   Real   | Rational | Integral |
+--------------------+----------+----------+----------+----------+----------+
| int                |   yes    |   yes    |   yes    |   yes    |   yes    |
| fractions.Fraction |   yes    |   yes    |   yes    |   yes    |          |
| float              |   yes    |   yes    |   yes    |          |          |
| complex            |   yes    |   yes    |          |          |          |
| decimal.Decimal    |   yes    |          |          |          |          |
+--------------------+----------+----------+----------+----------+----------+
```


String
------
```python
<str>  = <str>.strip()                       # Strips all whitespace characters from both ends.
<str>  = <str>.strip('<chars>')              # Strips all passed characters from both ends.
```

```python
<list> = <str>.split()                       # Splits on one or more whitespace characters.
<list> = <str>.split(sep=None, maxsplit=-1)  # Splits on 'sep' str at most 'maxsplit' times.
<list> = <str>.splitlines(keepends=False)    # On [\n\r\f\v\x1c-\x1e\x85\u2028\u2029] and \r\n.
<str>  = <str>.join(<coll_of_strings>)       # Joins elements using string as a separator.
```

```python
<bool> = <sub_str> in <str>                  # Checks if string contains a substring.
<bool> = <str>.startswith(<sub_str>)         # Pass tuple of strings for multiple options.
<bool> = <str>.endswith(<sub_str>)           # Pass tuple of strings for multiple options.
<int>  = <str>.find(<sub_str>)               # Returns start index of the first match or -1.
<int>  = <str>.index(<sub_str>)              # Same, but raises ValueError if missing.
```

```python
<str>  = <str>.replace(old, new [, count])   # Replaces 'old' with 'new' at most 'count' times.
<str>  = <str>.translate(<table>)            # Use `str.maketrans(<dict>)` to generate table.
```

```python
<str>  = chr(<int>)                          # Converts int to Unicode character.
<int>  = ord(<str>)                          # Converts Unicode character to int.
```
* **Also: `'lstrip()'`, `'rstrip()'` and `'rsplit()'`.**
* **Also: `'lower()'`, `'upper()'`, `'capitalize()'` and `'title()'`.**

### Property Methods
```text
+---------------+----------+----------+----------+----------+----------+
|               | [ !#$%…] | [a-zA-Z] |  [¼½¾]   |  [²³¹]   |  [0-9]   |
+---------------+----------+----------+----------+----------+----------+
| isprintable() |   yes    |   yes    |   yes    |   yes    |   yes    |
| isalnum()     |          |   yes    |   yes    |   yes    |   yes    |
| isnumeric()   |          |          |   yes    |   yes    |   yes    |
| isdigit()     |          |          |          |   yes    |   yes    |
| isdecimal()   |          |          |          |          |   yes    |
+---------------+----------+----------+----------+----------+----------+
```
* **Also: `'isspace()'` checks for `'[ \t\n\r\f\v\x1c-\x1f\x85…]'`.**


Regex
-----
```python
import re
<str>   = re.sub(<regex>, new, text, count=0)  # Substitutes all occurrences with 'new'.
<list>  = re.findall(<regex>, text)            # Returns all occurrences as strings.
<list>  = re.split(<regex>, text, maxsplit=0)  # Use brackets in regex to include the matches.
<Match> = re.search(<regex>, text)             # Searches for first occurrence of the pattern.
<Match> = re.match(<regex>, text)              # Searches only at the beginning of the text.
<iter>  = re.finditer(<regex>, text)           # Returns all occurrences as match objects.
```

* **Argument 'new' can be a function that accepts a match object and returns a string.**
* **Search() and match() return None if they can't find a match.**
* **Argument `'flags=re.IGNORECASE'` can be used with all functions.**
* **Argument `'flags=re.MULTILINE'` makes `'^'` and `'$'` match the start/end of each line.**
* **Argument `'flags=re.DOTALL'` makes dot also accept the `'\n'`.**
* **Use `r'\1'` or `'\\1'` for backreference (`'\1'` returns a character with octal code 1).**
* **Add `'?'` after `'*'` and `'+'` to make them non-greedy.**

### Match Object
```python
<str>   = <Match>.group()                      # Returns the whole match. Also group(0).
<str>   = <Match>.group(1)                     # Returns part in the first bracket.
<tuple> = <Match>.groups()                     # Returns all bracketed parts.
<int>   = <Match>.start()                      # Returns start index of the match.
<int>   = <Match>.end()                        # Returns exclusive end index of the match.
```

### Special Sequences
* **By default, decimal characters, alphanumerics and whitespaces from all alphabets are matched unless `'flags=re.ASCII'` argument is used.**
* **As shown below, it restricts special sequence matches to the first 128 characters and prevents `'\s'` from accepting `'[\x1c-\x1f]'` (the so-called separator characters).**
* **Use a capital letter for negation (all non-ASCII characters will be matched when used in combination with ASCII flag).**

```python
'\d' == '[0-9]'                                # Matches decimal characters.
'\w' == '[a-zA-Z0-9_]'                         # Matches alphanumerics and underscore.
'\s' == '[ \t\n\r\f\v]'                        # Matches whitespaces.
```


Format
------
```python
<str> = f'{<el_1>}, {<el_2>}'
<str> = '{}, {}'.format(<el_1>, <el_2>)
```

### Attributes
```python
>>> from collections import namedtuple
>>> Person = namedtuple('Person', 'name height')
>>> person = Person('Jean-Luc', 187)
>>> f'{person.height}'
'187'
>>> '{p.height}'.format(p=person)
'187'
```

### General Options
```python
{<el>:<10}                                     # '<el>      '
{<el>:^10}                                     # '   <el>   '
{<el>:>10}                                     # '      <el>'
{<el>:.<10}                                    # '<el>......'
{<el>:0}                                       # '<el>'
```
* **Options can be generated dynamically: `f'{<el>:{<str/int>}[…]}'`.**
* **Adding `'!r'` before the colon converts object to string by calling its [repr()](#class) method.**

### Strings
```python
{'abcde':10}                                   # 'abcde     '
{'abcde':10.3}                                 # 'abc       '
{'abcde':.3}                                   # 'abc'
{'abcde'!r:10}                                 # "'abcde'   "
```

### Numbers
```python
{123456:10}                                    # '    123456'
{123456:10,}                                   # '   123,456'
{123456:10_}                                   # '   123_456'
{123456:+10}                                   # '   +123456'
{123456:=+10}                                  # '+   123456'
{123456: }                                     # ' 123456'
{-123456: }                                    # '-123456'
```

### Floats
```python
{1.23456:10.3}                                 # '      1.23'
{1.23456:10.3f}                                # '     1.235'
{1.23456:10.3e}                                # ' 1.235e+00'
{1.23456:10.3%}                                # '  123.456%'
```

#### Comparison of presentation types:
```text
+--------------+----------------+----------------+----------------+----------------+
|              |    {<float>}   |   {<float>:f}  |   {<float>:e}  |   {<float>:%}  |
+--------------+----------------+----------------+----------------+----------------+
|  0.000056789 |   '5.6789e-05' |    '0.000057'  | '5.678900e-05' |    '0.005679%' |
|  0.00056789  |   '0.00056789' |    '0.000568'  | '5.678900e-04' |    '0.056789%' |
|  0.0056789   |   '0.0056789'  |    '0.005679'  | '5.678900e-03' |    '0.567890%' |
|  0.056789    |   '0.056789'   |    '0.056789'  | '5.678900e-02' |    '5.678900%' |
|  0.56789     |   '0.56789'    |    '0.567890'  | '5.678900e-01' |   '56.789000%' |
|  5.6789      |   '5.6789'     |    '5.678900'  | '5.678900e+00' |  '567.890000%' |
| 56.789       |  '56.789'      |   '56.789000'  | '5.678900e+01' | '5678.900000%' |
+--------------+----------------+----------------+----------------+----------------+

+--------------+----------------+----------------+----------------+----------------+
|              |  {<float>:.2}  |  {<float>:.2f} |  {<float>:.2e} |  {<float>:.2%} |
+--------------+----------------+----------------+----------------+----------------+
|  0.000056789 |    '5.7e-05'   |      '0.00'    |   '5.68e-05'   |      '0.01%'   |
|  0.00056789  |    '0.00057'   |      '0.00'    |   '5.68e-04'   |      '0.06%'   |
|  0.0056789   |    '0.0057'    |      '0.01'    |   '5.68e-03'   |      '0.57%'   |
|  0.056789    |    '0.057'     |      '0.06'    |   '5.68e-02'   |      '5.68%'   |
|  0.56789     |    '0.57'      |      '0.57'    |   '5.68e-01'   |     '56.79%'   |
|  5.6789      |    '5.7'       |      '5.68'    |   '5.68e+00'   |    '567.89%'   |
| 56.789       |    '5.7e+01'   |     '56.79'    |   '5.68e+01'   |   '5678.90%'   |
+--------------+----------------+----------------+----------------+----------------+
```
* **When both rounding up and rounding down are possible, the one that returns result with even last digit is chosen. That makes `'{6.5:.0f}'` a `'6'` and `'{7.5:.0f}'` an `'8'`.**
* **This rule only effects numbers that can be represented exactly by a float (`.5`, `.25`, …).**

### Ints
```python
{90:c}                                   # 'Z'
{90:b}                                   # '1011010'
{90:X}                                   # '5A'
```


Numbers
-------
### Types
```python
<int>      = int(<float/str/bool>)       # Or: math.floor(<float>)
<float>    = float(<int/str/bool>)       # Or: <real>e±<int>
<complex>  = complex(real=0, imag=0)     # Or: <real> ± <real>j
<Fraction> = fractions.Fraction(0, 1)    # Or: Fraction(numerator=0, denominator=1)
<Decimal>  = decimal.Decimal(<str/int>)  # Or: Decimal((sign, digits, exponent))
```
* **`'int(<str>)'` and `'float(<str>)'` raise ValueError on malformed strings.**
* **Decimal numbers are stored exactly, unlike most floats where `'1.1 + 2.2 != 3.3'`.**
* **Precision of decimal operations is set with: `'decimal.getcontext().prec = <int>'`.**

### Basic Functions
```python
<num> = pow(<num>, <num>)                # Or: <num> ** <num>
<num> = abs(<num>)                       # <float> = abs(<complex>)
<num> = round(<num> [, ±ndigits])        # `round(126, -1) == 130`
```

### Math
```python
from math import e, pi, inf, nan, isinf, isnan
from math import sin, cos, tan, asin, acos, atan, degrees, radians
from math import log, log10, log2
```

### Statistics
```python
from statistics import mean, median, variance, stdev, quantiles, groupby
```

### Random
```python
from random import random, randint, choice, shuffle, gauss, seed

<float> = random()                       # A float inside [0, 1).
<int>   = randint(from_inc, to_inc)      # An int inside [from_inc, to_inc].
<el>    = choice(<sequence>)             # Keeps the sequence intact.
```

### Bin, Hex
```python
<int> = ±0b<bin>                         # Or: ±0x<hex>
<int> = int('±<bin>', 2)                 # Or: int('±<hex>', 16)
<int> = int('±0b<bin>', 0)               # Or: int('±0x<hex>', 0)
<str> = bin(<int>)                       # Returns '[-]0b<bin>'.
```

### Bitwise Operators
```python
<int> = <int> & <int>                    # And (0b1100 & 0b1010 == 0b1000).
<int> = <int> | <int>                    # Or  (0b1100 | 0b1010 == 0b1110).
<int> = <int> ^ <int>                    # Xor (0b1100 ^ 0b1010 == 0b0110).
<int> = <int> << n_bits                  # Left shift (>> for right).
<int> = ~<int>                           # Not (also: -<int> - 1).
```


Combinatorics
-------------
* **Every function returns an iterator.**
* **If you want to print the iterator, you need to pass it to the list() function first!**

```python
from itertools import product, combinations, combinations_with_replacement, permutations
```

```python
>>> product([0, 1], repeat=3)
[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), ..., (1, 1, 1)]
```

```python
>>> product('abc', 'abc')                    #   a  b  c
[('a', 'a'), ('a', 'b'), ('a', 'c'),         # a x  x  x
 ('b', 'a'), ('b', 'b'), ('b', 'c'),         # b x  x  x
 ('c', 'a'), ('c', 'b'), ('c', 'c')]         # c x  x  x
```

```python
>>> combinations('abc', 2)                   #   a  b  c
[('a', 'b'), ('a', 'c'),                     # a .  x  x
 ('b', 'c')]                                 # b .  .  x
```

```python
>>> combinations_with_replacement('abc', 2)  #   a  b  c
[('a', 'a'), ('a', 'b'), ('a', 'c'),         # a x  x  x
 ('b', 'b'), ('b', 'c'),                     # b .  x  x
 ('c', 'c')]                                 # c .  .  x
```

```python
>>> permutations('abc', 2)                   #   a  b  c
[('a', 'b'), ('a', 'c'),                     # a .  x  x
 ('b', 'a'), ('b', 'c'),                     # b x  .  x
 ('c', 'a'), ('c', 'b')]                     # c x  x  .
```


Datetime
--------
* **Module 'datetime' provides 'date' `<D>`, 'time' `<T>`, 'datetime' `<DT>` and 'timedelta' `<TD>` classes. All are immutable and hashable.**
* **Time and datetime objects can be 'aware' `<a>`, meaning they have defined timezone, or 'naive' `<n>`, meaning they don't.**
* **If object is naive, it is presumed to be in the system's timezone.**

```python
from datetime import date, time, datetime, timedelta
from dateutil.tz import UTC, tzlocal, gettz, datetime_exists, resolve_imaginary
```

### Constructors
```python
<D>  = date(year, month, day)
<T>  = time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None, fold=0)
<DT> = datetime(year, month, day, hour=0, minute=0, second=0, ...)
<TD> = timedelta(weeks=0, days=0, hours=0, minutes=0, seconds=0, ...)
```
* **Use `'<D/DT>.weekday()'` to get the day of the week (Mon == 0).**
* **`'fold=1'` means the second pass in case of time jumping back for one hour.**
* **Timedelta normalizes arguments to ±days, seconds (< 86 400) and microseconds (< 1M).**

### Now
```python
<D/DTn>  = D/DT.today()                     # Current local date or naive datetime.
<DTn>    = DT.utcnow()                      # Naive datetime from current UTC time.
<DTa>    = DT.now(<tzinfo>)                 # Aware datetime from current tz time.
```
* **To extract time use `'<DTn>.time()'`, `'<DTa>.time()'` or `'<DTa>.timetz()'`.**

### Timezone
```python
<tzinfo> = UTC                              # UTC timezone. London without DST.
<tzinfo> = tzlocal()                        # Local timezone. Also gettz().
<tzinfo> = gettz('<Continent>/<City>')      # 'Continent/City_Name' timezone or None.
<DTa>    = <DT>.astimezone(<tzinfo>)        # Datetime, converted to the passed timezone.
<Ta/DTa> = <T/DT>.replace(tzinfo=<tzinfo>)  # Unconverted object with a new timezone.
```

### Encode
```python
<D/T/DT> = D/T/DT.fromisoformat('<iso>')    # Object from ISO string. Raises ValueError.
<DT>     = DT.strptime(<str>, '<format>')   # Datetime from str, according to format.
<D/DTn>  = D/DT.fromordinal(<int>)          # D/DTn from days since the Gregorian NYE 1.
<DTn>    = DT.fromtimestamp(<real>)         # Local time DTn from seconds since the Epoch.
<DTa>    = DT.fromtimestamp(<real>, <tz.>)  # Aware datetime from seconds since the Epoch.
```
* **ISO strings come in following forms: `'YYYY-MM-DD'`, `'HH:MM:SS.ffffff[±<offset>]'`, or both separated by an arbitrary character. Offset is formatted as: `'HH:MM'`.**
* **Python uses the Unix Epoch: `'1970-01-01 00:00 UTC'`, `'1970-01-01 01:00 CET'`, ...**

### Decode
```python
<str>    = <D/T/DT>.isoformat(sep='T')      # Also timespec='auto/hours/minutes/seconds'.
<str>    = <D/T/DT>.strftime('<format>')    # Custom string representation.
<int>    = <D/DT>.toordinal()               # Days since Gregorian NYE 1, ignoring time and tz.
<float>  = <DTn>.timestamp()                # Seconds since the Epoch, from DTn in local tz.
<float>  = <DTa>.timestamp()                # Seconds since the Epoch, from DTa.
```

### Format
```python
>>> dt = datetime.strptime('2015-05-14 23:39:00.00 +02:00', '%Y-%m-%d %H:%M:%S.%f %z')
>>> dt.strftime("%A, %dth of %B '%y, %I:%M%p %Z")
"Thursday, 14th of May '15, 11:39PM UTC+02:00"
```
* **`'%Z'` only accepts `'UTC/GMT'` and local timezone's code. `'%z'` also accepts `'±HHMM'`.**
* **For abbreviated weekday and month use `'%a'` and `'%b'`.**

### Arithmetics
```python
<D/DT>   = <D/DT>  ± <TD>                   # Returned datetime can fall into missing hour.
<TD>     = <D/DTn> - <D/DTn>                # Returns the difference, ignoring time jumps.
<TD>     = <DTa>   - <DTa>                  # Ignores time jumps if they share tzinfo object.
<TD>     = <TD>    * <real>                 # Also: <TD> = abs(<TD>) and <TD> = <TD> ±% <TD>.
<float>  = <TD>    / <TD>                   # How many weeks/years there are in TD. Also '//'.
```


Arguments
---------
### Inside Function Call
```python
<function>(<positional_args>)                  # f(0, 0)
<function>(<keyword_args>)                     # f(x=0, y=0)
<function>(<positional_args>, <keyword_args>)  # f(0, y=0)
```

### Inside Function Definition
```python
def f(<nondefault_args>):                      # def f(x, y):
def f(<default_args>):                         # def f(x=0, y=0):
def f(<nondefault_args>, <default_args>):      # def f(x, y=0):
```
* **A function has its default values evaluated when it's first encountered in the scope.**
* **Any changes to default values that are mutable will persist between invocations.**


Splat Operator
--------------
### Inside Function Call
**Splat expands a collection into positional arguments, while splatty-splat expands a dictionary into keyword arguments.**
```python
args   = (1, 2)
kwargs = {'x': 3, 'y': 4, 'z': 5}
func(*args, **kwargs)
```

#### Is the same as:
```python
func(1, 2, x=3, y=4, z=5)
```

### Inside Function Definition
**Splat combines zero or more positional arguments into a tuple, while splatty-splat combines zero or more keyword arguments into a dictionary.**
```python
def add(*a):
    return sum(a)
```

```python
>>> add(1, 2, 3)
6
```

#### Legal argument combinations:
```python
def f(*, x, y, z):          # f(x=1, y=2, z=3)
def f(x, *, y, z):          # f(x=1, y=2, z=3) | f(1, y=2, z=3)
def f(x, y, *, z):          # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)
```

```python
def f(*args):               # f(1, 2, 3)
def f(x, *args):            # f(1, 2, 3)
def f(*args, z):            # f(1, 2, z=3)
```

```python
def f(**kwargs):            # f(x=1, y=2, z=3)
def f(x, **kwargs):         # f(x=1, y=2, z=3) | f(1, y=2, z=3)
def f(*, x, **kwargs):      # f(x=1, y=2, z=3)
```

```python
def f(*args, **kwargs):     # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)
def f(x, *args, **kwargs):  # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)
def f(*args, y, **kwargs):  # f(x=1, y=2, z=3) | f(1, y=2, z=3)
```

### Other Uses
```python
<list>  = [*<collection> [, ...]]
<set>   = {*<collection> [, ...]}
<tuple> = (*<collection>, [...])
<dict>  = {**<dict> [, ...]}
```

```python
head, *body, tail = <collection>
```


Inline
------
### Lambda
```python
<func> = lambda: <return_value>
<func> = lambda <arg_1>, <arg_2>: <return_value>
```

### Comprehensions
```python
<list> = [i+1 for i in range(10)]                         # [1, 2, ..., 10]
<set>  = {i for i in range(10) if i > 5}                  # {6, 7, 8, 9}
<iter> = (i+5 for i in range(10))                         # (5, 6, ..., 14)
<dict> = {i: i*2 for i in range(10)}                      # {0: 0, 1: 2, ..., 9: 18}
```

```python
>>> [l+r for l in 'abc' for r in 'abc']
['aa', 'ab', 'ac', ..., 'cc']
```

### Map, Filter, Reduce
```python
<iter> = map(lambda x: x + 1, range(10))                  # (1, 2, ..., 10)
<iter> = filter(lambda x: x > 5, range(10))               # (6, 7, 8, 9)
<obj>  = reduce(lambda out, x: out + x, range(10))        # 45
```
* **Reduce must be imported from the functools module.**

### Any, All
```python
<bool> = any(<collection>)                                # Is `bool(el)` True for any element.
<bool> = all(<collection>)                                # Is True for all elements or empty.
```

### Conditional Expression
```python
<obj> = <exp_if_true> if <condition> else <exp_if_false>
```

```python
>>> [a if a else 'zero' for a in (0, 1, 2, 3)]
['zero', 1, 2, 3]
```

### Named Tuple, Enum, Dataclass
```python
from collections import namedtuple
Point = namedtuple('Point', 'x y')
point = Point(0, 0)
```

```python
from enum import Enum
Direction = Enum('Direction', 'n e s w')
direction = Direction.n
```

```python
from dataclasses import make_dataclass
Creature = make_dataclass('Creature', ['loc', 'dir'])
creature = Creature(point, direction)
```


Imports
-------
```python
import <module>            # Imports a built-in or '<module>.py'.
import <package>           # Imports a built-in or '<package>/__init__.py'.
import <package>.<module>  # Imports a built-in or '<package>/<module>.py'.
```
* **Package is a collection of modules, but it can also define its own objects.**
* **On a filesystem this corresponds to a directory of Python files with an optional init script.**
* **Running `'import <package>'` does not automatically provide access to the package's modules unless they are explicitly imported in its init script.**


Closure
-------
**We have/get a closure in Python when:**
* **A nested function references a value of its enclosing function and then**
* **the enclosing function returns the nested function.**

```python
def get_multiplier(a):
    def out(b):
        return a * b
    return out
```

```python
>>> multiply_by_3 = get_multiplier(3)
>>> multiply_by_3(10)
30
```

* **If multiple nested functions within enclosing function reference the same value, that value gets shared.**
* **To dynamically access function's first free variable use `'<function>.__closure__[0].cell_contents'`.**

### Partial
```python
from functools import partial
<function> = partial(<function> [, <arg_1>, <arg_2>, ...])
```

```python
>>> import operator as op
>>> multiply_by_3 = partial(op.mul, 3)
>>> multiply_by_3(10)
30
```
* **Partial is also useful in cases when function needs to be passed as an argument because it enables us to set its arguments beforehand.**
* **A few examples being: `'defaultdict(<function>)'`, `'iter(<function>, to_exclusive)'` and dataclass's `'field(default_factory=<function>)'`.**

### Non-Local
**If variable is being assigned to anywhere in the scope, it is regarded as a local variable, unless it is declared as a 'global' or a 'nonlocal'.**

```python
def get_counter():
    i = 0
    def out():
        nonlocal i
        i += 1
        return i
    return out
```

```python
>>> counter = get_counter()
>>> counter(), counter(), counter()
(1, 2, 3)
```


Decorator
---------
* **A decorator takes a function, adds some functionality and returns it.**
* **It can be any [callable](#callable), but is usually implemented as a function that returns a [closure](#closure).**

```python
@decorator_name
def function_that_gets_passed_to_decorator():
    ...
```

### Debugger Example
**Decorator that prints function's name every time it gets called.**

```python
from functools import wraps

def debug(func):
    @wraps(func)
    def out(*args, **kwargs):
        print(func.__name__)
        return func(*args, **kwargs)
    return out

@debug
def add(x, y):
    return x + y
```
* **Wraps is a helper decorator that copies the metadata of the passed function (func) to the function it is wrapping (out).**
* **Without it `'add.__name__'` would return `'out'`.**

### LRU Cache
**Decorator that caches function's return values. All function's arguments must be hashable.**

```python
from functools import lru_cache

@lru_cache(maxsize=None)
def fib(n):
    return n if n < 2 else fib(n-2) + fib(n-1)
```
* **Default size of the cache is 128 values. Passing `'maxsize=None'` makes it unbounded.**
* **CPython interpreter limits recursion depth to 1000 by default. To increase it use `'sys.setrecursionlimit(<depth>)'`.**

### Parametrized Decorator
**A decorator that accepts arguments and returns a normal decorator that accepts a function.**
```python
from functools import wraps

def debug(print_result=False):
    def decorator(func):
        @wraps(func)
        def out(*args, **kwargs):
            result = func(*args, **kwargs)
            print(func.__name__, result if print_result else '')
            return result
        return out
    return decorator

@debug(print_result=True)
def add(x, y):
    return x + y
```
* **Using only `'@debug'` to decorate the add() function would not work here, because debug would then receive the add() function as a 'print_result' argument. Decorators can however manually check if the argument they received is a function and act accordingly.**


Class
-----
```python
class <name>:
    def __init__(self, a):
        self.a = a
    def __repr__(self):
        class_name = self.__class__.__name__
        return f'{class_name}({self.a!r})'
    def __str__(self):
        return str(self.a)

    @classmethod
    def get_class_name(cls):
        return cls.__name__
```
* **Return value of repr() should be unambiguous and of str() readable.**
* **If only repr() is defined, it will also be used for str().**

#### Str() use cases:
```python
print(<el>)
f'{<el>}'
logging.warning(<el>)
csv.writer(<file>).writerow([<el>])
raise Exception(<el>)
```

#### Repr() use cases:
```python
print/str/repr([<el>])
f'{<el>!r}'
Z = dataclasses.make_dataclass('Z', ['a']); print/str/repr(Z(<el>))
>>> <el>
```

### Constructor Overloading
```python
class <name>:
    def __init__(self, a=None):
        self.a = a
```

### Inheritance
```python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age  = age

class Employee(Person):
    def __init__(self, name, age, staff_num):
        super().__init__(name, age)
        self.staff_num = staff_num
```

### Multiple Inheritance
```python
class A: pass
class B: pass
class C(A, B): pass
```

**MRO determines the order in which parent classes are traversed when searching for a method:**
```python
>>> C.mro()
[<class 'C'>, <class 'A'>, <class 'B'>, <class 'object'>]
```

### Property
**Pythonic way of implementing getters and setters.**
```python
class Person:
    @property
    def name(self):
        return ' '.join(self._name)

    @name.setter
    def name(self, value):
        self._name = value.split()
```

```python
>>> person = Person()
>>> person.name = '\t Guido  van Rossum \n'
>>> person.name
'Guido van Rossum'
```

### Dataclass
**Decorator that automatically generates init(), repr() and eq() special methods.**
```python
from dataclasses import dataclass, field

@dataclass(order=False, frozen=False)
class <class_name>:
    <attr_name_1>: <type>
    <attr_name_2>: <type> = <default_value>
    <attr_name_3>: list/dict/set = field(default_factory=list/dict/set)
```
* **Objects can be made sortable with `'order=True'` and immutable with `'frozen=True'`.**
* **For object to be hashable, all attributes must be hashable and 'frozen' must be True.**
* **Function field() is needed because `'<attr_name>: list = []'` would make a list that is shared among all instances. Its 'default_factory' argument can be any [callable](#callable).**
* **For attributes of arbitrary type use `'typing.Any'`.**

#### Inline:
```python
from dataclasses import make_dataclass
<class> = make_dataclass('<class_name>', <coll_of_attribute_names>)
<class> = make_dataclass('<class_name>', <coll_of_tuples>)
<tuple> = ('<attr_name>', <type> [, <default_value>])
```

#### Rest of type annotations (CPython interpreter ignores them all):
```python
def func(<arg_name>: <type> [= <obj>]) -> <type>:
<var_name>: typing.List/Set/Iterable/Sequence/Optional[<type>]
<var_name>: typing.Dict/Tuple/Union[<type>, ...]
```

### Slots
**Mechanism that restricts objects to attributes listed in 'slots' and significantly reduces their memory footprint.**

```python
class MyClassWithSlots:
    __slots__ = ['a']
    def __init__(self):
        self.a = 1
```

### Copy
```python
from copy import copy, deepcopy
<object> = copy(<object>)
<object> = deepcopy(<object>)
```


Duck Types
----------
**A duck type is an implicit type that prescribes a set of special methods. Any object that has those methods defined is considered a member of that duck type.**

### Comparable
* **If eq() method is not overridden, it returns `'id(self) == id(other)'`, which is the same as `'self is other'`.**
* **That means all objects compare not equal by default.**
* **Only the left side object has eq() method called, unless it returns NotImplemented, in which case the right object is consulted.**
* **Ne() automatically works on any object that has eq() defined.**

```python
class MyComparable:
    def __init__(self, a):
        self.a = a
    def __eq__(self, other):
        if isinstance(other, type(self)):
            return self.a == other.a
        return NotImplemented
```

### Hashable
* **Hashable object needs both hash() and eq() methods and its hash value should never change.**
* **Hashable objects that compare equal must have the same hash value, meaning default hash() that returns `'id(self)'` will not do.**
* **That is why Python automatically makes classes unhashable if you only implement eq().**

```python
class MyHashable:
    def __init__(self, a):
        self._a = a
    @property
    def a(self):
        return self._a
    def __eq__(self, other):
        if isinstance(other, type(self)):
            return self.a == other.a
        return NotImplemented
    def __hash__(self):
        return hash(self.a)
```

### Sortable
* **With 'total_ordering' decorator, you only need to provide eq() and one of lt(), gt(), le() or ge() special methods and the rest will be automatically generated.**
* **Functions sorted() and min() only require lt() method, while max() only requires gt(). However, it is best to define them all so that confusion doesn't arise in other contexts.**
* **When two lists, strings or dataclasses are compared, their values get compared in order until a pair of unequal values is found. The comparison of this two values is then returned. The shorter sequence is considered smaller in case of all values being equal.**

```python
from functools import total_ordering

@total_ordering
class MySortable:
    def __init__(self, a):
        self.a = a
    def __eq__(self, other):
        if isinstance(other, type(self)):
            return self.a == other.a
        return NotImplemented
    def __lt__(self, other):
        if isinstance(other, type(self)):
            return self.a < other.a
        return NotImplemented
```

### Iterator
* **Any object that has methods next() and iter() is an iterator.**
* **Next() should return next item or raise StopIteration.**
* **Iter() should return 'self'.**
```python
class Counter:
    def __init__(self):
        self.i = 0
    def __next__(self):
        self.i += 1
        return self.i
    def __iter__(self):
        return self
```

```python
>>> counter = Counter()
>>> next(counter), next(counter), next(counter)
(1, 2, 3)
```

#### Python has many different iterator objects:
* **Sequence iterators returned by the [iter()](#iterator) function, such as list\_iterator and set\_iterator.**
* **Objects returned by the [itertools](#itertools) module, such as count, repeat and cycle.**
* **Generators returned by the [generator functions](#generator) and [generator expressions](#comprehensions).**
* **File objects returned by the [open()](#open) function, etc.**

### Callable
* **All functions and classes have a call() method, hence are callable.**
* **When this cheatsheet uses `'<function>'` as an argument, it actually means `'<callable>'`.**
```python
class Counter:
    def __init__(self):
        self.i = 0
    def __call__(self):
        self.i += 1
        return self.i
```

```python
>>> counter = Counter()
>>> counter(), counter(), counter()
(1, 2, 3)
```

### Context Manager
* **Enter() should lock the resources and optionally return an object.**
* **Exit() should release the resources.**
* **Any exception that happens inside the with block is passed to the exit() method.**
* **If it wishes to suppress the exception it must return a true value.**
```python
class MyOpen:
    def __init__(self, filename):
        self.filename = filename
    def __enter__(self):
        self.file = open(self.filename)
        return self.file
    def __exit__(self, exc_type, exception, traceback):
        self.file.close()
```

```python
>>> with open('test.txt', 'w') as file:
...     file.write('Hello World!')
>>> with MyOpen('test.txt') as file:
...     print(file.read())
Hello World!
```


Iterable Duck Types
-------------------
### Iterable
* **Only required method is iter(). It should return an iterator of object's items.**
* **Contains() automatically works on any object that has iter() defined.**
```python
class MyIterable:
    def __init__(self, a):
        self.a = a
    def __iter__(self):
        return iter(self.a)
    def __contains__(self, el):
        return el in self.a
```

```python
>>> obj = MyIterable([1, 2, 3])
>>> [el for el in obj]
[1, 2, 3]
>>> 1 in obj
True
```

### Collection
* **Only required methods are iter() and len().**
* **This cheatsheet actually means `'<iterable>'` when it uses `'<collection>'`.**
* **I chose not to use the name 'iterable' because it sounds scarier and more vague than 'collection'. The only drawback of this decision is that a reader could think a certain function doesn't accept iterators when it does, since iterators are the only built-in objects that are iterable but are not collections.**
```python
class MyCollection:
    def __init__(self, a):
        self.a = a
    def __iter__(self):
        return iter(self.a)
    def __contains__(self, el):
        return el in self.a
    def __len__(self):
        return len(self.a)
```

### Sequence
* **Only required methods are len() and getitem().**
* **Getitem() should return an item at the passed index or raise IndexError.**
* **Iter() and contains() automatically work on any object that has getitem() defined.**
* **Reversed() automatically works on any object that has len() and getitem() defined.**
```python
class MySequence:
    def __init__(self, a):
        self.a = a
    def __iter__(self):
        return iter(self.a)
    def __contains__(self, el):
        return el in self.a
    def __len__(self):
        return len(self.a)
    def __getitem__(self, i):
        return self.a[i]
    def __reversed__(self):
        return reversed(self.a)
```

### ABC Sequence
* **It's a richer interface than the basic sequence.**
* **Extending it generates iter(), contains(), reversed(), index() and count().**
* **Unlike `'abc.Iterable'` and `'abc.Collection'`, it is not a duck type. That is why `'issubclass(MySequence, abc.Sequence)'` would return False even if MySequence had all the methods defined.**
```python
from collections import abc

class MyAbcSequence(abc.Sequence):
    def __init__(self, a):
        self.a = a
    def __len__(self):
        return len(self.a)
    def __getitem__(self, i):
        return self.a[i]
```

#### Table of required and automatically available special methods:
```text
+------------+------------+------------+------------+--------------+
|            |  Iterable  | Collection |  Sequence  | abc.Sequence |
+------------+------------+------------+------------+--------------+
| iter()     |    REQ     |    REQ     |    Yes     |     Yes      |
| contains() |    Yes     |    Yes     |    Yes     |     Yes      |
| len()      |            |    REQ     |    REQ     |     REQ      |
| getitem()  |            |            |    REQ     |     REQ      |
| reversed() |            |            |    Yes     |     Yes      |
| index()    |            |            |            |     Yes      |
| count()    |            |            |            |     Yes      |
+------------+------------+------------+------------+--------------+
```
* **Other ABCs that generate missing methods are: MutableSequence, Set, MutableSet, Mapping and MutableMapping.**
* **Names of their required methods are stored in `'<abc>.__abstractmethods__'`.**


Enum
----
```python
from enum import Enum, auto
```

```python
class <enum_name>(Enum):
    <member_name_1> = <value_1>
    <member_name_2> = <value_2_a>, <value_2_b>
    <member_name_3> = auto()
```
* **If there are no numeric values before auto(), it returns 1.**
* **Otherwise it returns an increment of the last numeric value.**

```python
<member> = <enum>.<member_name>                 # Returns a member.
<member> = <enum>['<member_name>']              # Returns a member or raises KeyError.
<member> = <enum>(<value>)                      # Returns a member or raises ValueError.
<str>    = <member>.name                        # Returns member's name.
<obj>    = <member>.value                       # Returns member's value.
```

```python
list_of_members = list(<enum>)
member_names    = [a.name for a in <enum>]
member_values   = [a.value for a in <enum>]
random_member   = random.choice(list(<enum>))
```

```python
def get_next_member(member):
    members = list(member.__class__)
    index   = (members.index(member) + 1) % len(members)
    return members[index]
```

### Inline
```python
Cutlery = Enum('Cutlery', 'fork knife spoon')
Cutlery = Enum('Cutlery', ['fork', 'knife', 'spoon'])
Cutlery = Enum('Cutlery', {'fork': 1, 'knife': 2, 'spoon': 3})
```

#### User-defined functions cannot be values, so they must be wrapped:
```python
from functools import partial
LogicOp = Enum('LogicOp', {'AND': partial(lambda l, r: l and r),
                           'OR':  partial(lambda l, r: l or r)})
```
* **Member names are in all caps because trying to access a member that is named after a reserved keyword raises SyntaxError.**


Exceptions
----------
### Basic Example
```python
try:
    <code>
except <exception>:
    <code>
```

### Complex Example
```python
try:
    <code_1>
except <exception_a>:
    <code_2_a>
except <exception_b>:
    <code_2_b>
else:
    <code_2_c>
finally:
    <code_3>
```
* **Code inside the `'else'` block will only be executed if `'try'` block had no exceptions.**
* **Code inside the `'finally'` block will always be executed (unless a signal is received).**

### Catching Exceptions
```python
except <exception>:
except <exception> as <name>:
except (<exception>, [...]):
except (<exception>, [...]) as <name>:
```
* **Also catches subclasses of the exception.**
* **Use `'traceback.print_exc()'` to print the error message to stderr.**
* **Use `'print(<name>)'` to print just the cause of the exception (its arguments).**

### Raising Exceptions
```python
raise <exception>
raise <exception>()
raise <exception>(<el> [, ...])
```

#### Re-raising caught exception:
```python
except <exception> as <name>:
    ...
    raise
```

### Exception Object
```python
arguments = <name>.args
exc_type  = <name>.__class__
filename  = <name>.__traceback__.tb_frame.f_code.co_filename
func_name = <name>.__traceback__.tb_frame.f_code.co_name
line      = linecache.getline(filename, <name>.__traceback__.tb_lineno)
error_msg = ''.join(traceback.format_exception(exc_type, <name>, <name>.__traceback__))
```

### Built-in Exceptions
```text
BaseException
 +-- SystemExit                   # Raised by the sys.exit() function.
 +-- KeyboardInterrupt            # Raised when the user hits the interrupt key (ctrl-c).
 +-- Exception                    # User-defined exceptions should be derived from this class.
      +-- ArithmeticError         # Base class for arithmetic errors.
      |    +-- ZeroDivisionError  # Raised when dividing by zero.
      +-- AttributeError          # Raised when an attribute is missing.
      +-- EOFError                # Raised by input() when it hits end-of-file condition.
      +-- LookupError             # Raised when a look-up on a collection fails.
      |    +-- IndexError         # Raised when a sequence index is out of range.
      |    +-- KeyError           # Raised when a dictionary key or set element is not found.
      +-- NameError               # Raised when a variable name is not found.
      +-- OSError                 # Errors such as “file not found” or “disk full” (see Open).
      |    +-- FileNotFoundError  # When a file or directory is requested but doesn't exist.
      +-- RuntimeError            # Raised by errors that don't fall into other categories.
      |    +-- RecursionError     # Raised when the maximum recursion depth is exceeded.
      +-- StopIteration           # Raised by next() when run on an empty iterator.
      +-- TypeError               # Raised when an argument is of wrong type.
      +-- ValueError              # When an argument is of right type but inappropriate value.
           +-- UnicodeError       # Raised when encoding/decoding strings to/from bytes fails.
```

#### Collections and their exceptions:
```text
+-----------+------------+------------+------------+
|           |    List    |    Set     |    Dict    |
+-----------+------------+------------+------------+
| getitem() | IndexError |            |  KeyError  |
| pop()     | IndexError |  KeyError  |  KeyError  |
| remove()  | ValueError |  KeyError  |            |
| index()   | ValueError |            |            |
+-----------+------------+------------+------------+
```

#### Useful built-in exceptions:
```python
raise TypeError('Argument is of wrong type!')
raise ValueError('Argument is of right type but inappropriate value!')
raise RuntimeError('None of above!')
```

### User-defined Exceptions
```python
class MyError(Exception):
    pass

class MyInputError(MyError):
    pass
```


Exit
----
**Exits the interpreter by raising SystemExit exception.**
```python
import sys
sys.exit()                        # Exits with exit code 0 (success).
sys.exit(<el>)                    # Prints to stderr and exits with 1.
sys.exit(<int>)                   # Exits with passed exit code.
```


Print
-----
```python
print(<el_1>, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
```
* **Use `'file=sys.stderr'` for messages about errors.**
* **Use `'flush=True'` to forcibly flush the stream.**

### Pretty Print
```python
from pprint import pprint
pprint(<collection>, width=80, depth=None, compact=False, sort_dicts=True)
```
* **Levels deeper than 'depth' get replaced by '...'.**


Input
-----
**Reads a line from user input or pipe if present.**

```python
<str> = input(prompt=None)
```
* **Trailing newline gets stripped.**
* **Prompt string is printed to the standard output before reading input.**
* **Raises EOFError when user hits EOF (ctrl-d/ctrl-z⏎) or input stream gets exhausted.**


Command Line Arguments
----------------------
```python
import sys
scripts_path = sys.argv[0]
arguments    = sys.argv[1:]
```

### Argument Parser
```python
from argparse import ArgumentParser, FileType
p = ArgumentParser(description=<str>)
p.add_argument('-<short_name>', '--<name>', action='store_true')  # Flag.
p.add_argument('-<short_name>', '--<name>', type=<type>)          # Option.
p.add_argument('<name>', type=<type>, nargs=1)                    # First argument.
p.add_argument('<name>', type=<type>, nargs='+')                  # Remaining arguments.
p.add_argument('<name>', type=<type>, nargs='*')                  # Optional arguments.
args  = p.parse_args()                                            # Exits on error.
value = args.<name>
```

* **Use `'help=<str>'` to set argument description.**
* **Use `'default=<el>'` to set the default value.**
* **Use `'type=FileType(<mode>)'` for files.**


Open
----
**Opens the file and returns a corresponding file object.**

```python
<file> = open(<path>, mode='r', encoding=None, newline=None)
```
* **`'encoding=None'` means that the default encoding is used, which is platform dependent. Best practice is to use `'encoding="utf-8"'` whenever possible.**
* **`'newline=None'` means all different end of line combinations are converted to '\n' on read, while on write all '\n' characters are converted to system's default line separator.**
* **`'newline=""'` means no conversions take place, but input is still broken into chunks by readline() and readlines() on every '\n', '\r' and '\r\n'.**

### Modes
* **`'r'`  - Read (default).**
* **`'w'`  - Write (truncate).**
* **`'x'`  - Write or fail if the file already exists.**
* **`'a'`  - Append.**
* **`'w+'` - Read and write (truncate).**
* **`'r+'` - Read and write from the start.**
* **`'a+'` - Read and write from the end.**
* **`'t'`  - Text mode (default).**
* **`'b'`  - Binary mode (`'br'`, `'bw'`, `'bx'`, …).**

### Exceptions
* **`'FileNotFoundError'` can be raised when reading with `'r'` or `'r+'`.**
* **`'FileExistsError'` can be raised when writing with `'x'`.**
* **`'IsADirectoryError'` and `'PermissionError'` can be raised by any.**
* **`'OSError'` is the parent class of all listed exceptions.**

### File Object
```python
<file>.seek(0)                      # Moves to the start of the file.
<file>.seek(offset)                 # Moves 'offset' chars/bytes from the start.
<file>.seek(0, 2)                   # Moves to the end of the file.
<bin_file>.seek(±offset, <anchor>)  # Anchor: 0 start, 1 current position, 2 end.
```

```python
<str/bytes> = <file>.read(size=-1)  # Reads 'size' chars/bytes or until EOF.
<str/bytes> = <file>.readline()     # Returns a line or empty string/bytes on EOF.
<list>      = <file>.readlines()    # Returns a list of remaining lines.
<str/bytes> = next(<file>)          # Returns a line using buffer. Do not mix.
```

```python
<file>.write(<str/bytes>)           # Writes a string or bytes object.
<file>.writelines(<collection>)     # Writes a coll. of strings or bytes objects.
<file>.flush()                      # Flushes write buffer. Runs every 4096/8192 B.
```
* **Methods do not add or strip trailing newlines, even writelines().**

### Read Text from File
```python
def read_file(filename):
    with open(filename, encoding='utf-8') as file:
        return file.readlines()
```

### Write Text to File
```python
def write_to_file(filename, text):
    with open(filename, 'w', encoding='utf-8') as file:
        file.write(text)
```


Paths
-----
```python
from os import getcwd, path, listdir, scandir
from glob import glob
```

```python
<str>  = getcwd()                   # Returns the current working directory.
<str>  = path.join(<path>, ...)     # Joins two or more pathname components.
<str>  = path.abspath(<path>)       # Returns absolute path.
```

```python
<str>  = path.basename(<path>)      # Returns final component of the path.
<str>  = path.dirname(<path>)       # Returns path without the final component.
<tup.> = path.splitext(<path>)      # Splits on last period of the final component.
```

```python
<list> = listdir(path='.')          # Returns filenames located at path.
<list> = glob('<pattern>')          # Returns paths matching the wildcard pattern.
```

```python
<bool> = path.exists(<path>)        # Or: <Path>.exists()
<bool> = path.isfile(<path>)        # Or: <DirEntry/Path>.is_file()
<bool> = path.isdir(<path>)         # Or: <DirEntry/Path>.is_dir()
```

### DirEntry
**Using scandir() instead of listdir() can significantly increase the performance of code that also needs file type information.**

```python
<iter> = scandir(path='.')          # Returns DirEntry objects located at path.
<str>  = <DirEntry>.path            # Returns whole path as a string.
<str>  = <DirEntry>.name            # Returns final component as a string.
<file> = open(<DirEntry>)           # Opens the file and returns a file object.
```

### Path Object
```python
from pathlib import Path
```

```python
<Path> = Path(<path> [, ...])       # Accepts strings, Paths and DirEntry objects.
<Path> = <path> / <path> [/ ...]    # First or second path must be a Path object.
```

```python
<Path> = Path()                     # Returns relative cwd. Also Path('.').
<Path> = Path.cwd()                 # Returns absolute cwd. Also Path().resolve().
<Path> = Path.home()                # Returns user's home directory.
<Path> = Path(__file__).resolve()   # Returns script's path if cwd wasn't changed.
```

```python
<Path> = <Path>.parent              # Returns Path without the final component.
<str>  = <Path>.name                # Returns final component as a string.
<str>  = <Path>.stem                # Returns final component without extension.
<str>  = <Path>.suffix              # Returns final component's extension.
<tup.> = <Path>.parts               # Returns all components as strings.
```

```python
<iter> = <Path>.iterdir()           # Returns directory contents as Path objects.
<iter> = <Path>.glob('<pattern>')   # Returns Paths matching the wildcard pattern.
```

```python
<str>  = str(<Path>)                # Returns path as a string.
<file> = open(<Path>)               # Opens the file and returns a file object.
```


OS Commands
-----------
```python
import os, shutil, subprocess
```

### Files and Directories
* **Paths can be either strings, Paths or DirEntry objects.**
* **Functions report OS related errors by raising either OSError or one of its [subclasses](#exceptions-1).**

```python
os.chdir(<path>)                    # Changes the current working directory.
os.mkdir(<path>, mode=0o777)        # Creates a directory. Mode is in octal.
os.makedirs(<path>, mode=0o777)     # Creates all directories in the path.
```

```python
shutil.copy(from, to)               # Copies the file. 'to' can exist or be a dir.
shutil.copytree(from, to)           # Copies the directory. 'to' must not exist.
```

```python
os.rename(from, to)                 # Renames/moves the file or directory.
os.replace(from, to)                # Same, but overwrites 'to' if it exists.
```

```python
os.remove(<path>)                   # Deletes the file.
os.rmdir(<path>)                    # Deletes the empty directory.
shutil.rmtree(<path>)               # Deletes the directory.
```

### Shell Commands
```python
<pipe> = os.popen('<command>')      # Executes command in sh/cmd and returns its stdout pipe.
<str>  = <pipe>.read()              # Waits for EOF and returns result. Also readline/s().
<int>  = <pipe>.close()             # Closes the pipe. Returns None on success, int on error.
```

#### Sends '1 + 1' to the basic calculator and captures its output:
```python
>>> subprocess.run('bc', input='1 + 1\n', capture_output=True, text=True)
CompletedProcess(args='bc', returncode=0, stdout='2\n', stderr='')
```

#### Sends test.in to the basic calculator running in standard mode and saves its output to test.out:
```python
>>> from shlex import split
>>> os.popen('echo 1 + 1 > test.in')
>>> subprocess.run(split('bc -s'), stdin=open('test.in'), stdout=open('test.out', 'w'))
CompletedProcess(args=['bc', '-s'], returncode=0)
>>> open('test.out').read()
'2\n'
```


JSON
----
**Text file format for storing collections of strings and numbers.**

```python
import json
<str>    = json.dumps(<object>, ensure_ascii=True, indent=None)
<object> = json.loads(<str>)
```

### Read Object from JSON File
```python
def read_json_file(filename):
    with open(filename, encoding='utf-8') as file:
        return json.load(file)
```

### Write Object to JSON File
```python
def write_to_json_file(filename, an_object):
    with open(filename, 'w', encoding='utf-8') as file:
        json.dump(an_object, file, ensure_ascii=False, indent=2)
```


Pickle
------
**Binary file format for storing objects.**

```python
import pickle
<bytes>  = pickle.dumps(<object>)
<object> = pickle.loads(<bytes>)
```

### Read Object from File
```python
def read_pickle_file(filename):
    with open(filename, 'rb') as file:
        return pickle.load(file)
```

### Write Object to File
```python
def write_to_pickle_file(filename, an_object):
    with open(filename, 'wb') as file:
        pickle.dump(an_object, file)
```


CSV
---
**Text file format for storing spreadsheets.**

```python
import csv
```

### Read
```python
<reader> = csv.reader(<file>)       # Also: `dialect='excel', delimiter=','`.
<list>   = next(<reader>)           # Returns next row as a list of strings.
<list>   = list(<reader>)           # Returns a list of remaining rows.
```
* **File must be opened with a `'newline=""'` argument, or newlines embedded inside quoted fields will not be interpreted correctly!**

### Write
```python
<writer> = csv.writer(<file>)       # Also: `dialect='excel', delimiter=','`.
<writer>.writerow(<collection>)     # Encodes objects using `str(<el>)`.
<writer>.writerows(<coll_of_coll>)  # Appends multiple rows.
```
* **File must be opened with a `'newline=""'` argument, or '\r' will be added in front of every '\n' on platforms that use '\r\n' line endings!**

### Parameters
* **`'dialect'` - Master parameter that sets the default values.**
* **`'delimiter'` - A one-character string used to separate fields.**
* **`'quotechar'` - Character for quoting fields that contain special characters.**
* **`'doublequote'` - Whether quotechars inside fields get doubled or escaped.**
* **`'skipinitialspace'` - Whether whitespace after delimiter gets stripped.**
* **`'lineterminator'` - Specifies how writer terminates rows.**
* **`'quoting'` - Controls the amount of quoting: 0 - as necessary, 1 - all.**
* **`'escapechar'` - Character for escaping quotechars if doublequote is False.**

### Dialects
```text
+------------------+--------------+--------------+--------------+
|                  |     excel    |   excel-tab  |     unix     |
+------------------+--------------+--------------+--------------+
| delimiter        |       ','    |      '\t'    |       ','    |
| quotechar        |       '"'    |       '"'    |       '"'    |
| doublequote      |      True    |      True    |      True    |
| skipinitialspace |     False    |     False    |     False    |
| lineterminator   |    '\r\n'    |    '\r\n'    |      '\n'    |
| quoting          |         0    |         0    |         1    |
| escapechar       |      None    |      None    |      None    |
+------------------+--------------+--------------+--------------+
```

### Read Rows from CSV File
```python
def read_csv_file(filename):
    with open(filename, encoding='utf-8', newline='') as file:
        return list(csv.reader(file))
```

### Write Rows to CSV File
```python
def write_to_csv_file(filename, rows):
    with open(filename, 'w', encoding='utf-8', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(rows)
```


SQLite
------
**Server-less database engine that stores each database into a separate file.**

### Connect
**Opens a connection to the database file. Creates a new file if path doesn't exist.**
```python
import sqlite3
<conn> = sqlite3.connect(<path>)                # Also ':memory:'.
<conn>.close()                                  # Closes the connection.
```

### Read
**Returned values can be of type str, int, float, bytes or None.**
```python
<cursor> = <conn>.execute('<query>')            # Can raise a subclass of sqlite3.Error.
<tuple>  = <cursor>.fetchone()                  # Returns next row. Also next(<cursor>).
<list>   = <cursor>.fetchall()                  # Returns remaining rows. Also list(<cursor>).
```

### Write
```python
<conn>.execute('<query>')                       # Can raise a subclass of sqlite3.Error.
<conn>.commit()                                 # Saves all changes since the last commit.
<conn>.rollback()                               # Discards all changes since the last commit.
```

#### Or:
```python
with <conn>:                                    # Exits the block with commit() or rollback(),
    <conn>.execute('<query>')                   # depending on whether any exception occurred.
```

### Placeholders
* **Passed values can be of type str, int, float, bytes, None, bool, datetime.date or datetime.datetime.**
* **Bools will be stored and returned as ints and dates as [ISO formatted strings](#encode).**
```python
<conn>.execute('<query>', <list/tuple>)         # Replaces '?'s in query with values.
<conn>.execute('<query>', <dict/namedtuple>)    # Replaces ':<key>'s with values.
<conn>.executemany('<query>', <coll_of_above>)  # Runs execute() multiple times.
```

### Example
**Values are not actually saved in this example because `'conn.commit()'` is omitted!**
```python
>>> conn = sqlite3.connect('test.db')
>>> conn.execute('CREATE TABLE person (person_id INTEGER PRIMARY KEY, name, height)')
>>> conn.execute('INSERT INTO person VALUES (NULL, ?, ?)', ('Jean-Luc', 187)).lastrowid
1
>>> conn.execute('SELECT * FROM person').fetchall()
[(1, 'Jean-Luc', 187)]
```

### MySQL
**Has a very similar interface, with differences listed below.**
```python
# $ pip3 install mysql-connector
from mysql import connector
<conn>   = connector.connect(host=<str>, …)     # `user=<str>, password=<str>, database=<str>`.
<cursor> = <conn>.cursor()                      # Only cursor has execute() method.
<cursor>.execute('<query>')                     # Can raise a subclass of connector.Error.
<cursor>.execute('<query>', <list/tuple>)       # Replaces '%s's in query with values.
<cursor>.execute('<query>', <dict/namedtuple>)  # Replaces '%(<key>)s's with values.
```


Bytes
-----
**Bytes object is an immutable sequence of single bytes. Mutable version is called bytearray.**

```python
<bytes> = b'<str>'                       # Only accepts ASCII characters and \x00-\xff.
<int>   = <bytes>[<index>]               # Returns an int in range from 0 to 255.
<bytes> = <bytes>[<slice>]               # Returns bytes even if it has only one element.
<bytes> = <bytes>.join(<coll_of_bytes>)  # Joins elements using bytes as a separator.
```

### Encode
```python
<bytes> = bytes(<coll_of_ints>)          # Ints must be in range from 0 to 255.
<bytes> = bytes(<str>, 'utf-8')          # Or: <str>.encode('utf-8')
<bytes> = <int>.to_bytes(n_bytes, …)     # `byteorder='big/little', signed=False`.
<bytes> = bytes.fromhex('<hex>')         # Hex pairs can be separated by spaces.
```

### Decode
```python
<list>  = list(<bytes>)                  # Returns ints in range from 0 to 255.
<str>   = str(<bytes>, 'utf-8')          # Or: <bytes>.decode('utf-8')
<int>   = int.from_bytes(<bytes>, …)     # `byteorder='big/little', signed=False`.
'<hex>' = <bytes>.hex()                  # Returns a string of hexadecimal pairs.
```

### Read Bytes from File
```python
def read_bytes(filename):
    with open(filename, 'rb') as file:
        return file.read()
```

### Write Bytes to File
```python
def write_bytes(filename, bytes_obj):
    with open(filename, 'wb') as file:
        file.write(bytes_obj)
```


Struct
------
* **Module that performs conversions between a sequence of numbers and a bytes object.**
* **System’s type sizes and byte order are used by default.**

```python
from struct import pack, unpack, iter_unpack
```

```python
<bytes>  = pack('<format>', <num_1> [, <num_2>, ...])
<tuple>  = unpack('<format>', <bytes>)
<tuples> = iter_unpack('<format>', <bytes>)
```

### Example
```python
>>> pack('>hhl', 1, 2, 3)
b'\x00\x01\x00\x02\x00\x00\x00\x03'
>>> unpack('>hhl', b'\x00\x01\x00\x02\x00\x00\x00\x03')
(1, 2, 3)
```

### Format
#### For standard type sizes start format string with:
* **`'='` - system's byte order (usually little-endian)**
* **`'<'` - little-endian**
* **`'>'` - big-endian (also `'!'`)**

#### Integer types. Use a capital letter for unsigned type. Minimum and standard sizes are in brackets:
* **`'x'` - pad byte**
* **`'b'` - char (1/1)**
* **`'h'` - short (2/2)**
* **`'i'` - int (2/4)**
* **`'l'` - long (4/4)**
* **`'q'` - long long (8/8)**

#### Floating point types:
* **`'f'` - float (4/4)**
* **`'d'` - double (8/8)**


Array
-----
**List that can only hold numbers of a predefined type. Available types and their minimum sizes in bytes are listed above. Sizes and byte order are always determined by the system.**

```python
from array import array
<array> = array('<typecode>', <collection>)    # Array from collection of numbers.
<array> = array('<typecode>', <bytes>)         # Array from bytes object.
<array> = array('<typecode>', <array>)         # Treats array as a sequence of numbers.
<bytes> = bytes(<array>)                       # Or: <array>.tobytes()
<file>.write(<array>)                          # Writes array to the binary file.
```


Memory View
-----------
* **A sequence object that points to the memory of another object.**
* **Each element can reference a single or multiple consecutive bytes, depending on format.**
* **Order and number of elements can be changed with slicing.**
* **Casting only works between char and other types and uses system's sizes and byte order.**

```python
<mview> = memoryview(<bytes/bytearray/array>)  # Immutable if bytes, else mutable.
<real>  = <mview>[<index>]                     # Returns an int or a float.
<mview> = <mview>[<slice>]                     # Mview with rearranged elements.
<mview> = <mview>.cast('<typecode>')           # Casts memoryview to the new format.
<mview>.release()                              # Releases the object's memory buffer.
```

### Decode
```python
<bytes> = bytes(<mview>)                       # Creates a new bytes object.
<bytes> = <bytes>.join(<coll_of_mviews>)       # Joins mviews using bytes object as sep.
<array> = array('<typecode>', <mview>)         # Treats mview as a sequence of numbers.
<file>.write(<mview>)                          # Writes mview to the binary file.
```

```python
<list>  = list(<mview>)                        # Returns a list of ints or floats.
<str>   = str(<mview>, 'utf-8')                # Treats mview as a bytes object.
<int>   = int.from_bytes(<mview>, …)           # `byteorder='big/little', signed=False`.
'<hex>' = <mview>.hex()                        # Treats mview as a bytes object.
```


Deque
-----
**A thread-safe list with efficient appends and pops from either side. Pronounced "deck".**

```python
from collections import deque
<deque> = deque(<collection>, maxlen=None)
```

```python
<deque>.appendleft(<el>)                       # Opposite element is dropped if full.
<deque>.extendleft(<collection>)               # Collection gets reversed.
<el> = <deque>.popleft()                       # Raises IndexError if empty.
<deque>.rotate(n=1)                            # Rotates elements to the right.
```


Threading
---------
* **CPython interpreter can only run a single thread at a time.**
* **That is why using multiple threads won't result in a faster execution, unless at least one of the threads contains an I/O operation.**
```python
from threading import Thread, RLock, Semaphore, Event, Barrier
from concurrent.futures import ThreadPoolExecutor
```

### Thread
```python
<Thread> = Thread(target=<function>)           # Use `args=<collection>` to set the arguments.
<Thread>.start()                               # Starts the thread.
<bool> = <Thread>.is_alive()                   # Checks if the thread has finished executing.
<Thread>.join()                                # Waits for the thread to finish.
```
* **Use `'kwargs=<dict>'` to pass keyword arguments to the function.**
* **Use `'daemon=True'`, or the program will not be able to exit while the thread is alive.**

### Lock
```python
<lock> = RLock()                               # Lock that can only be released by the owner.
<lock>.acquire()                               # Waits for the lock to be available.
<lock>.release()                               # Makes the lock available again.
```

#### Or:
```python
with <lock>:                                   # Enters the block by calling acquire(),
    ...                                        # and exits it with release().
```

### Semaphore, Event, Barrier
```python
<Semaphore> = Semaphore(value=1)               # Lock that can be acquired by 'value' threads.
<Event>     = Event()                          # Method wait() blocks until set() is called.
<Barrier>   = Barrier(n_times)                 # Wait() blocks until it's called n_times.
```

### Thread Pool Executor
* **Object that manages thread execution.**
* **An object with the same interface called ProcessPoolExecutor provides true parallelism by running a separate interpreter in each process. All arguments must be [pickable](#pickle).**

```python
<Exec> = ThreadPoolExecutor(max_workers=None)  # Or: `with ThreadPoolExecutor() as <name>: …`
<Exec>.shutdown(wait=True)                     # Blocks until all threads finish executing.
```

```python
<iter> = <Exec>.map(<func>, <args_1>, ...)     # A multithreaded and non-lazy map().
<Futr> = <Exec>.submit(<func>, <arg_1>, ...)   # Starts a thread and returns its Future object.
<bool> = <Futr>.done()                         # Checks if the thread has finished executing.
<obj>  = <Futr>.result()                       # Waits for thread to finish and returns result.
```

### Queue
**A thread-safe FIFO queue. For LIFO queue use LifoQueue.**
```python
from queue import Queue
<Queue> = Queue(maxsize=0)
```

```python
<Queue>.put(<el>)                              # Blocks until queue stops being full.
<Queue>.put_nowait(<el>)                       # Raises queue.Full exception if full.
<el> = <Queue>.get()                           # Blocks until queue stops being empty.
<el> = <Queue>.get_nowait()                    # Raises queue.Empty exception if empty.
```


Operator
--------
**Module of functions that provide the functionality of operators.**
```python
import operator as op
<el>      = op.add/sub/mul/truediv/floordiv/mod(<el>, <el>)  # +, -, *, /, //, %
<int/set> = op.and_/or_/xor(<int/set>, <int/set>)            # &, |, ^
<bool>    = op.eq/ne/lt/le/gt/ge(<sortable>, <sortable>)     # ==, !=, <, <=, >, >=
<func>    = op.itemgetter/attrgetter/methodcaller(<obj>)     # [index/key], .name, .name()
```

```python
elementwise_sum  = map(op.add, list_a, list_b)
sorted_by_second = sorted(<collection>, key=op.itemgetter(1))
sorted_by_both   = sorted(<collection>, key=op.itemgetter(1, 0))
product_of_elems = functools.reduce(op.mul, <collection>)
union_of_sets    = functools.reduce(op.or_, <coll_of_sets>)
first_element    = op.methodcaller('pop', 0)(<list>)
```
* **Binary operators require objects to have and(), or(), xor() and invert() special methods, unlike logical operators that work on all types of objects.**
* **Also: `'<bool> = <bool> &|^ <bool>'` and `'<int> = <bool> &|^ <int>'`.**


Introspection
-------------
**Inspecting code at runtime.**

### Variables
```python
<list> = dir()                             # Names of local variables (incl. functions).
<dict> = vars()                            # Dict of local variables. Also locals().
<dict> = globals()                         # Dict of global variables.
```

### Attributes
```python
<list> = dir(<object>)                     # Names of object's attributes (incl. methods).
<dict> = vars(<object>)                    # Dict of writable attributes. Also <obj>.__dict__.
<bool> = hasattr(<object>, '<attr_name>')  # Checks if getattr() raises an AttributeError.
value  = getattr(<object>, '<attr_name>')  # Raises AttributeError if attribute is missing.
setattr(<object>, '<attr_name>', value)    # Only works on objects with '__dict__' attribute.
delattr(<object>, '<attr_name>')           # Same. Also `del <object>.<attr_name>`.
```

### Parameters
```python
from inspect import signature
<Sig>  = signature(<function>)             # Function's Signature object.
<dict> = <Sig>.parameters                  # Dict of function's Parameter objects.
<str>  = <Param>.name                      # Parameter's name.
<memb> = <Param>.kind                      # Member of ParameterKind enum.
```


Metaprogramming
---------------
**Code that generates code.**

### Type
**Type is the root class. If only passed an object it returns its type (class). Otherwise it creates a new class.**

```python
<class> = type('<class_name>', <tuple_of_parents>, <dict_of_class_attributes>)
```

```python
>>> Z = type('Z', (), {'a': 'abcde', 'b': 12345})
>>> z = Z()
```

### Meta Class
**A class that creates classes.**

```python
def my_meta_class(name, parents, attrs):
    attrs['a'] = 'abcde'
    return type(name, parents, attrs)
```

#### Or:
```python
class MyMetaClass(type):
    def __new__(cls, name, parents, attrs):
        attrs['a'] = 'abcde'
        return type.__new__(cls, name, parents, attrs)
```
* **New() is a class method that gets called before init(). If it returns an instance of its class, then that instance gets passed to init() as a 'self' argument.**
* **It receives the same arguments as init(), except for the first one that specifies the desired type of the returned instance (MyMetaClass in our case).**
* **Like in our case, new() can also be called directly, usually from a new() method of a child class (**`def __new__(cls): return super().__new__(cls)`**).**
* **The only difference between the examples above is that my\_meta\_class() returns a class of type type, while MyMetaClass() returns a class of type MyMetaClass.**

### Metaclass Attribute
**Right before a class is created it checks if it has the 'metaclass' attribute defined. If not, it recursively checks if any of his parents has it defined and eventually comes to type().**

```python
class MyClass(metaclass=MyMetaClass):
    b = 12345
```

```python
>>> MyClass.a, MyClass.b
('abcde', 12345)
```

### Type Diagram
```python
type(MyClass)     == MyMetaClass     # MyClass is an instance of MyMetaClass.
type(MyMetaClass) == type            # MyMetaClass is an instance of type.
```

```text
+-------------+-------------+
|   Classes   | Metaclasses |
+-------------+-------------|
|   MyClass --> MyMetaClass |
|             |     v       |
|    object -----> type <+  |
|             |     ^ +--+  |
|     str ----------+       |
+-------------+-------------+
```

### Inheritance Diagram
```python
MyClass.__base__     == object       # MyClass is a subclass of object.
MyMetaClass.__base__ == type         # MyMetaClass is a subclass of type.
```

```text
+-------------+-------------+
|   Classes   | Metaclasses |
+-------------+-------------|
|   MyClass   | MyMetaClass |
|      v      |     v       |
|    object <----- type     |
|      ^      |             |
|     str     |             |
+-------------+-------------+
```


Eval
----
```python
>>> from ast import literal_eval
>>> literal_eval('[1, 2, 3]')
[1, 2, 3]
>>> literal_eval('1 + 2')
ValueError: malformed node or string
```


Coroutines
----------
* **Coroutines have a lot in common with threads, but unlike threads, they only give up control when they call another coroutine and they don’t use as much memory.**
* **Coroutine definition starts with `'async'` and its call with `'await'`.**
* **`'asyncio.run(<coroutine>)'` is the main entry point for asynchronous programs.**
* **Functions wait(), gather() and as_completed() can be used when multiple coroutines need to be started at the same time.**
* **Asyncio module also provides its own [Queue](#queue), [Event](#semaphore-event-barrier), [Lock](#lock) and [Semaphore](#semaphore-event-barrier) classes.**

#### Runs a terminal game where you control an asterisk that must avoid numbers:

```python
import asyncio, collections, curses, curses.textpad, enum, random

P = collections.namedtuple('P', 'x y')         # Position
D = enum.Enum('D', 'n e s w')                  # Direction
W, H = 15, 7                                   # Width, Height

def main(screen):
    curses.curs_set(0)                         # Makes cursor invisible.
    screen.nodelay(True)                       # Makes getch() non-blocking.
    asyncio.run(main_coroutine(screen))        # Starts running asyncio code.

async def main_coroutine(screen):
    state = {'*': P(0, 0), **{id_: P(W//2, H//2) for id_ in range(10)}}
    moves = asyncio.Queue()
    coros = (*(random_controller(id_, moves) for id_ in range(10)),
             human_controller(screen, moves), model(moves, state), view(state, screen))
    await asyncio.wait(coros, return_when=asyncio.FIRST_COMPLETED)

async def random_controller(id_, moves):
    while True:
        d = random.choice(list(D))
        moves.put_nowait((id_, d))
        await asyncio.sleep(random.triangular(0.01, 0.65))

async def human_controller(screen, moves):
    while True:
        ch = screen.getch()
        key_mappings = {258: D.s, 259: D.n, 260: D.w, 261: D.e}
        if ch in key_mappings:
            moves.put_nowait(('*', key_mappings[ch]))
        await asyncio.sleep(0.005)

async def model(moves, state):
    while state['*'] not in (state[id_] for id_ in range(10)):
        id_, d = await moves.get()
        x, y   = state[id_]
        deltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)}
        state[id_] = P((x + deltas[d].x) % W, (y + deltas[d].y) % H)

async def view(state, screen):
    offset = P(curses.COLS//2 - W//2, curses.LINES//2 - H//2)
    while True:
        screen.erase()
        curses.textpad.rectangle(screen, offset.y-1, offset.x-1, offset.y+H, offset.x+W)
        for id_, p in state.items():
            screen.addstr(offset.y + (p.y - state['*'].y + H//2) % H,
                          offset.x + (p.x - state['*'].x + W//2) % W, str(id_))
        await asyncio.sleep(0.005)

if __name__ == '__main__':
    curses.wrapper(main)
```
<br>


Libraries
=========

Progress Bar
------------
```python
# $ pip3 install tqdm
>>> from tqdm import tqdm
>>> from time import sleep
>>> for el in tqdm([1, 2, 3], desc='Processing'):
...     sleep(1)
Processing: 100%|████████████████████| 3/3 [00:03<00:00,  1.00s/it]
```


Plot
----
```python
# $ pip3 install matplotlib
import matplotlib.pyplot as plt
plt.plot(<x_data>, <y_data> [, label=<str>])   # Or: plt.plot(<y_data>)
plt.legend()                                   # Adds a legend.
plt.savefig(<path>)                            # Saves the figure.
plt.show()                                     # Displays the figure.
plt.clf()                                      # Clears the figure.
```


Table
-----
#### Prints a CSV file as an ASCII table:
```python
# $ pip3 install tabulate
import csv, tabulate
with open('test.csv', encoding='utf-8', newline='') as file:
    rows   = csv.reader(file)
    header = [a.title() for a in next(rows)]
    table  = tabulate.tabulate(rows, header)
print(table)
```


Curses
------
#### Runs a basic file explorer in the terminal:
```python
from curses import wrapper, ascii, A_REVERSE, KEY_DOWN, KEY_UP, KEY_LEFT, KEY_RIGHT, KEY_ENTER
from os import listdir, path, chdir

def main(screen):
    ch, first, selected, paths = 0, 0, 0, listdir()
    while ch != ascii.ESC:
        height, _ = screen.getmaxyx()
        screen.erase()
        for y, filename in enumerate(paths[first : first+height]):
            screen.addstr(y, 0, filename, A_REVERSE * (selected == first + y))
        ch = screen.getch()
        selected += (ch == KEY_DOWN) - (ch == KEY_UP)
        selected = max(0, min(len(paths)-1, selected))
        first += (first <= selected - height) - (first > selected)
        if ch in [KEY_LEFT, KEY_RIGHT, KEY_ENTER, 10, 13]:
            new_dir = '..' if ch == KEY_LEFT else paths[selected]
            if path.isdir(new_dir):
                chdir(new_dir)
                first, selected, paths = 0, 0, listdir()

if __name__ == '__main__':
    wrapper(main)
```


Logging
-------
```python
# $ pip3 install loguru
from loguru import logger
```

```python
logger.add('debug_{time}.log', colorize=True)  # Connects a log file.
logger.add('error_{time}.log', level='ERROR')  # Another file for errors or higher.
logger.<level>('A logging message.')
```
* **Levels: `'debug'`, `'info'`, `'success'`, `'warning'`, `'error'`, `'critical'`.**

### Exceptions
**Exception description, stack trace and values of variables are appended automatically.**

```python
try:
    ...
except <exception>:
    logger.exception('An error happened.')
```

### Rotation
**Argument that sets a condition when a new log file is created.**
```python
rotation=<int>|<datetime.timedelta>|<datetime.time>|<str>
```
* **`'<int>'` - Max file size in bytes.**
* **`'<timedelta>'` - Max age of a file.**
* **`'<time>'` - Time of day.**
* **`'<str>'` - Any of above as a string: `'100 MB'`, `'1 month'`, `'monday at 12:00'`, ...**

### Retention
**Sets a condition which old log files get deleted.**
```python
retention=<int>|<datetime.timedelta>|<str>
```
* **`'<int>'` - Max number of files.**
* **`'<timedelta>'` - Max age of a file.**
* **`'<str>'` - Max age as a string: `'1 week, 3 days'`, `'2 months'`, ...**


Scraping
--------
#### Scrapes Python's URL, version number and logo from its Wikipedia page:
```python
# $ pip3 install requests beautifulsoup4
import requests, bs4, os, sys

WIKI_URL = 'https://en.wikipedia.org/wiki/Python_(programming_language)'
try:
    html       = requests.get(WIKI_URL).text
    document   = bs4.BeautifulSoup(html, 'html.parser')
    table      = document.find('table', class_='infobox vevent')
    python_url = table.find('th', text='Website').next_sibling.a['href']
    version    = table.find('th', text='Stable release').next_sibling.strings.__next__()
    logo_url   = table.find('img')['src']
    logo       = requests.get(f'https:{logo_url}').content
    filename   = os.path.basename(logo_url)
    with open(filename, 'wb') as file:
        file.write(logo)
    print(f'{python_url}, {version}, file://{os.path.abspath(filename)}')
except requests.exceptions.ConnectionError:
    print("You've got problems with connection.", file=sys.stderr)
```


Web
---
```python
# $ pip3 install bottle
from bottle import run, route, static_file, template, post, request, response
import json
```

### Run
```python
run(host='localhost', port=8080)        # Runs locally.
run(host='0.0.0.0', port=80)            # Runs globally.
```

### Static Request
```python
@route('/img/<filename>')
def send_file(filename):
    return static_file(filename, root='img_dir/')
```

### Dynamic Request
```python
@route('/<sport>')
def send_html(sport):
    return template('<h1>{{title}}</h1>', title=sport)
```

### REST Request
```python
@post('/<sport>/odds')
def send_json(sport):
    team = request.forms.get('team')
    response.headers['Content-Type'] = 'application/json'
    response.headers['Cache-Control'] = 'no-cache'
    return json.dumps({'team': team, 'odds': [2.09, 3.74, 3.68]})
```

#### Test:
```python
# $ pip3 install requests
>>> import threading, requests
>>> threading.Thread(target=run, daemon=True).start()
>>> url = 'http://localhost:8080/football/odds'
>>> data = {'team': 'arsenal f.c.'}
>>> response = requests.post(url, data=data)
>>> response.json()
{'team': 'arsenal f.c.', 'odds': [2.09, 3.74, 3.68]}
```


Profiling
---------
### Stopwatch
```python
from time import time
start_time = time()                     # Seconds since the Epoch.
...
duration = time() - start_time
```

#### High performance:
```python
from time import perf_counter
start_time = perf_counter()             # Seconds since the restart.
...
duration = perf_counter() - start_time
```

### Timing a Snippet
```python
>>> from timeit import timeit
>>> timeit("''.join(str(i) for i in range(100))",
...        number=10000, globals=globals(), setup='pass')
0.34986
```

### Profiling by Line
```python
# $ pip3 install line_profiler memory_profiler
@profile
def main():
    a = [*range(10000)]
    b = {*range(10000)}
main()
```

```text
$ kernprof -lv test.py
Line #   Hits     Time  Per Hit   % Time  Line Contents
=======================================================
     1                                    @profile
     2                                    def main():
     3      1    955.0    955.0     43.7      a = [*range(10000)]
     4      1   1231.0   1231.0     56.3      b = {*range(10000)}
```

```text
$ python3 -m memory_profiler test.py
Line #         Mem usage      Increment   Line Contents
=======================================================
     1        37.668 MiB     37.668 MiB   @profile
     2                                    def main():
     3        38.012 MiB      0.344 MiB       a = [*range(10000)]
     4        38.477 MiB      0.465 MiB       b = {*range(10000)}
```

### Call Graph
#### Generates a PNG image of the call graph with highlighted bottlenecks:
```python
# $ pip3 install pycallgraph2
from pycallgraph2 import output, PyCallGraph
from datetime import datetime
filename = f'profile-{datetime.now():%Y%m%d%H%M%S}.png'
drawer = output.GraphvizOutput(output_file=filename)
with PyCallGraph(drawer):
    <code_to_be_profiled>
```


NumPy
-----
**Array manipulation mini-language. It can run up to one hundred times faster than the equivalent Python code. An even faster alternative that runs on a GPU is called CuPy.**

```python
# $ pip3 install numpy
import numpy as np
```

```python
<array> = np.array(<list/list_of_lists>)
<array> = np.arange(from_inclusive, to_exclusive, ±step_size)
<array> = np.ones(<shape>)
<array> = np.random.randint(from_inclusive, to_exclusive, <shape>)
```

```python
<array>.shape = <shape>
<view>  = <array>.reshape(<shape>)
<view>  = np.broadcast_to(<array>, <shape>)
```

```python
<array> = <array>.sum(axis)
indexes = <array>.argmin(axis)
```

* **Shape is a tuple of dimension sizes.**
* **Axis is an index of the dimension that gets collapsed. Leftmost dimension has index 0.**

### Indexing
```bash
<el>       = <2d_array>[row_index, column_index]
<1d_view>  = <2d_array>[row_index]
<1d_view>  = <2d_array>[:, column_index]
```

```bash
<1d_array> = <2d_array>[row_indexes, column_indexes]
<2d_array> = <2d_array>[row_indexes]
<2d_array> = <2d_array>[:, column_indexes]
```

```bash
<2d_bools> = <2d_array> ><== <el>
<1d_array> = <2d_array>[<2d_bools>]
```

### Broadcasting
**Broadcasting is a set of rules by which NumPy functions operate on arrays of different sizes and/or dimensions.**

```python
left  = [[0.1], [0.6], [0.8]]        # Shape: (3, 1)
right = [ 0.1 ,  0.6 ,  0.8 ]        # Shape: (3)
```

#### 1. If array shapes differ in length, left-pad the shorter shape with ones:
```python
left  = [[0.1], [0.6], [0.8]]        # Shape: (3, 1)
right = [[0.1 ,  0.6 ,  0.8]]        # Shape: (1, 3) <- !
```

#### 2. If any dimensions differ in size, expand the ones that have size 1 by duplicating their elements:
```python
left  = [[0.1, 0.1, 0.1], [0.6, 0.6, 0.6], [0.8, 0.8, 0.8]]  # Shape: (3, 3) <- !
right = [[0.1, 0.6, 0.8], [0.1, 0.6, 0.8], [0.1, 0.6, 0.8]]  # Shape: (3, 3) <- !
```

#### 3. If neither non-matching dimension has size 1, raise an error.


### Example
#### For each point returns index of its nearest point (`[0.1, 0.6, 0.8] => [1, 2, 1]`):

```python
>>> points = np.array([0.1, 0.6, 0.8])
 [ 0.1,  0.6,  0.8]
>>> wrapped_points = points.reshape(3, 1)
[[ 0.1],
 [ 0.6],
 [ 0.8]]
>>> distances = wrapped_points - points
[[ 0. , -0.5, -0.7],
 [ 0.5,  0. , -0.2],
 [ 0.7,  0.2,  0. ]]
>>> distances = np.abs(distances)
[[ 0. ,  0.5,  0.7],
 [ 0.5,  0. ,  0.2],
 [ 0.7,  0.2,  0. ]]
>>> i = np.arange(3)
[0, 1, 2]
>>> distances[i, i] = np.inf
[[ inf,  0.5,  0.7],
 [ 0.5,  inf,  0.2],
 [ 0.7,  0.2,  inf]]
>>> distances.argmin(1)
[1, 2, 1]
```


Image
-----
```python
# $ pip3 install pillow
from PIL import Image
```

```python
<Image> = Image.new('<mode>', (width, height))  # Also: `color=<int/tuple/str>`.
<Image> = Image.open(<path>)                    # Identifies format based on file contents.
<Image> = <Image>.convert('<mode>')             # Converts image to the new mode.
<Image>.save(<path>)                            # Selects format based on the path extension.
<Image>.show()                                  # Opens image in default preview app.
```

```python
<int/tuple> = <Image>.getpixel((x, y))          # Returns a pixel.
<Image>.putpixel((x, y), <int/tuple>)           # Writes a pixel to the image.
<ImagingCore> = <Image>.getdata()               # Returns a sequence of pixels.
<Image>.putdata(<list/ImagingCore>)             # Writes a sequence of pixels.
<Image>.paste(<Image>, (x, y))                  # Writes an image to the image.
```

```bash
<2d_array> = np.array(<Image_L>)                # Creates NumPy array from greyscale image.
<3d_array> = np.array(<Image_RGB>)              # Creates NumPy array from color image.
<Image>    = Image.fromarray(<array>)           # Creates image from NumPy array of floats.
```

### Modes
* **`'1'` - 1-bit pixels, black and white, stored with one pixel per byte.**
* **`'L'` - 8-bit pixels, greyscale.**
* **`'RGB'` - 3x8-bit pixels, true color.**
* **`'RGBA'` - 4x8-bit pixels, true color with transparency mask.**
* **`'HSV'` - 3x8-bit pixels, Hue, Saturation, Value color space.**

### Examples
#### Creates a PNG image of a rainbow gradient:
```python
WIDTH, HEIGHT = 100, 100
n_pixels = WIDTH * HEIGHT
hues = (255 * i/n_pixels for i in range(n_pixels))
img = Image.new('HSV', (WIDTH, HEIGHT))
img.putdata([(int(h), 255, 255) for h in hues])
img.convert('RGB').save('test.png')
```

#### Adds noise to a PNG image:
```python
from random import randint
add_noise = lambda value: max(0, min(255, value + randint(-20, 20)))
img = Image.open('test.png').convert('HSV')
img.putdata([(add_noise(h), s, v) for h, s, v in img.getdata()])
img.convert('RGB').save('test.png')
```

### Image Draw
```python
from PIL import ImageDraw
<ImageDraw> = ImageDraw.Draw(<Image>)
```

```python
<ImageDraw>.point((x, y))
<ImageDraw>.line((x1, y1, x2, y2 [, ...]))
<ImageDraw>.arc((x1, y1, x2, y2), from_deg, to_deg)
<ImageDraw>.rectangle((x1, y1, x2, y2))
<ImageDraw>.polygon((x1, y1, x2, y2 [, ...]))
<ImageDraw>.ellipse((x1, y1, x2, y2))
```
* **Use `'fill=<color>'` to set the primary color.**
* **Use `'width=<int>'` to set the width of lines or contours.**
* **Use `'outline=<color>'` to set the color of the contours.**
* **Colors can be specified as an int, tuple, `'#rrggbb[aa]'` string or a color name.**


Animation
---------
#### Creates a GIF of a bouncing ball:
```python
# $ pip3 install imageio
from PIL import Image, ImageDraw
import imageio
WIDTH, R = 126, 10
frames = []
for velocity in range(1, 16):
    y = sum(range(velocity))
    frame = Image.new('L', (WIDTH, WIDTH))
    draw  = ImageDraw.Draw(frame)
    draw.ellipse((WIDTH/2-R, y, WIDTH/2+R, y+R*2), fill='white')
    frames.append(frame)
frames += reversed(frames[1:-1])
imageio.mimsave('test.gif', frames, duration=0.03)
```


Audio
-----
```python
import wave
```

```python
<Wave_read>  = wave.open('<path>', 'rb')        # Opens the WAV file.
framerate    = <Wave_read>.getframerate()       # Number of frames per second.
nchannels    = <Wave_read>.getnchannels()       # Number of samples per frame.
sampwidth    = <Wave_read>.getsampwidth()       # Sample size in bytes.
nframes      = <Wave_read>.getnframes()         # Number of frames.
<params>     = <Wave_read>.getparams()          # Immutable collection of above.
<bytes>      = <Wave_read>.readframes(nframes)  # Returns next 'nframes' frames.
```

```python
<Wave_write> = wave.open('<path>', 'wb')        # Truncates existing file.
<Wave_write>.setframerate(<int>)                # 44100 for CD, 48000 for video.
<Wave_write>.setnchannels(<int>)                # 1 for mono, 2 for stereo.
<Wave_write>.setsampwidth(<int>)                # 2 for CD quality sound.
<Wave_write>.setparams(<params>)                # Sets all parameters.
<Wave_write>.writeframes(<bytes>)               # Appends frames to the file.
```
* **Bytes object contains a sequence of frames, each consisting of one or more samples.**
* **In a stereo signal, the first sample of a frame belongs to the left channel.**
* **Each sample consists of one or more bytes that, when converted to an integer, indicate the displacement of a speaker membrane at a given moment.**
* **If sample width is one byte, then the integer should be encoded unsigned.**
* **For all other sizes, the integer should be encoded signed with little-endian byte order.**

### Sample Values
```text
+-----------+-------------+------+-------------+
| sampwidth |     min     | zero |     max     |
+-----------+-------------+------+-------------+
|     1     |           0 |  128 |         255 |
|     2     |      -32768 |    0 |       32767 |
|     3     |    -8388608 |    0 |     8388607 |
|     4     | -2147483648 |    0 |  2147483647 |
+-----------+-------------+------+-------------+
```

### Read Float Samples from WAV File
```python
def read_wav_file(filename):
    def get_int(bytes_obj):
        an_int = int.from_bytes(bytes_obj, 'little', signed=(sampwidth != 1))
        return an_int - 128 * (sampwidth == 1)
    with wave.open(filename, 'rb') as file:
        sampwidth = file.getsampwidth()
        frames = file.readframes(-1)
    bytes_samples = (frames[i : i+sampwidth] for i in range(0, len(frames), sampwidth))
    return [get_int(b) / pow(2, sampwidth * 8 - 1) for b in bytes_samples]
```

### Write Float Samples to WAV File
```python
def write_to_wav_file(filename, float_samples, nchannels=1, sampwidth=2, framerate=44100):
    def get_bytes(a_float):
        a_float = max(-1, min(1 - 2e-16, a_float))
        a_float += sampwidth == 1
        a_float *= pow(2, sampwidth * 8 - 1)
        return int(a_float).to_bytes(sampwidth, 'little', signed=(sampwidth != 1))
    with wave.open(filename, 'wb') as file:
        file.setnchannels(nchannels)
        file.setsampwidth(sampwidth)
        file.setframerate(framerate)
        file.writeframes(b''.join(get_bytes(f) for f in float_samples))
```

### Examples
#### Saves a sine wave to a mono WAV file:
```python
from math import pi, sin
samples_f = (sin(i * 2 * pi * 440 / 44100) for i in range(100000))
write_to_wav_file('test.wav', samples_f)
```

#### Adds noise to a mono WAV file:
```python
from random import random
add_noise = lambda value: value + (random() - 0.5) * 0.03
samples_f = (add_noise(f) for f in read_wav_file('test.wav'))
write_to_wav_file('test.wav', samples_f)
```

#### Plays a WAV file:
```python
# $ pip3 install simpleaudio
from simpleaudio import play_buffer
with wave.open('test.wav', 'rb') as file:
    p = file.getparams()
    frames = file.readframes(-1)
    play_buffer(frames, p.nchannels, p.sampwidth, p.framerate)
```

### Text to Speech
```python
# $ pip3 install pyttsx3
import pyttsx3
engine = pyttsx3.init()
engine.say('Sally sells seashells by the seashore.')
engine.runAndWait()
```


Synthesizer
-----------
#### Plays Popcorn by Gershon Kingsley:
```python
# $ pip3 install simpleaudio
import math, struct, simpleaudio
from itertools import repeat, chain
F  = 44100
P1 = '71♩,69♪,,71♩,66♪,,62♩,66♪,,59♩,,'
P2 = '71♩,73♪,,74♩,73♪,,74♪,,71♪,,73♩,71♪,,73♪,,69♪,,71♩,69♪,,71♪,,67♪,,71♩,,'
get_pause   = lambda seconds: repeat(0, int(seconds * F))
sin_f       = lambda i, hz: math.sin(i * 2 * math.pi * hz / F)
get_wave    = lambda hz, seconds: (sin_f(i, hz) for i in range(int(seconds * F)))
get_hz      = lambda key: 8.176 * 2 ** (int(key) / 12)
parse_note  = lambda note: (get_hz(note[:2]), 1/4 if '♩' in note else 1/8)
get_samples = lambda note: get_wave(*parse_note(note)) if note else get_pause(1/8)
samples_f   = chain.from_iterable(get_samples(n) for n in f'{P1},{P1},{P2}'.split(','))
samples_b   = b''.join(struct.pack('<h', int(f * 30000)) for f in samples_f)
simpleaudio.play_buffer(samples_b, 1, 2, F)
```


Pygame
------
### Basic Example
```python
# $ pip3 install pygame
import pygame as pg
pg.init()
screen = pg.display.set_mode((500, 500))
rect = pg.Rect(240, 240, 20, 20)
while all(event.type != pg.QUIT for event in pg.event.get()):
    deltas = {pg.K_UP: (0, -1), pg.K_RIGHT: (1, 0), pg.K_DOWN: (0, 1), pg.K_LEFT: (-1, 0)}
    for ch, is_pressed in enumerate(pg.key.get_pressed()):
        rect = rect.move(deltas[ch]) if ch in deltas and is_pressed else rect
    screen.fill((0, 0, 0))
    pg.draw.rect(screen, (255, 255, 255), rect)
    pg.display.flip()
```

### Rectangle
**Object for storing rectangular coordinates.**
```python
<Rect> = pg.Rect(x, y, width, height)           # Floats get truncated into ints.
<int>  = <Rect>.x/y/centerx/centery/…           # Top, right, bottom, left. Allows assignments.
<tup.> = <Rect>.topleft/center/…                # Topright, bottomright, bottomleft. Same.
<Rect> = <Rect>.move((x, y))                    # Use move_ip() to move in-place.
```

```python
<bool> = <Rect>.collidepoint((x, y))            # Checks if rectangle contains a point.
<bool> = <Rect>.colliderect(<Rect>)             # Checks if two rectangles overlap.
<int>  = <Rect>.collidelist(<list_of_Rect>)     # Returns index of first colliding Rect or -1.
<list> = <Rect>.collidelistall(<list_of_Rect>)  # Returns indexes of all colliding Rects.
```

### Surface
**Object for representing images.**
```python
<Surf> = pg.display.set_mode((width, height))   # Returns display surface.
<Surf> = pg.Surface((width, height), flags=0)   # New RGB surface. RGBA if `flags=pg.SRCALPHA`.
<Surf> = pg.image.load('<path>')                # Loads the image. Format depends on source.
<Surf> = <Surf>.subsurface(<Rect>)              # Returns a subsurface.
```

```python
<Surf>.fill(color)                              # Tuple, Color('#rrggbb[aa]') or Color(<name>).
<Surf>.set_at((x, y), color)                    # Updates pixel.
<Surf>.blit(<Surf>, (x, y))                     # Draws passed surface to the surface.
```

```python
from pygame.transform import scale, ...
<Surf> = scale(<Surf>, (width, height))         # Returns scaled surface.
<Surf> = rotate(<Surf>, degrees)                # Returns rotated and scaled surface.
<Surf> = flip(<Surf>, x_bool, y_bool)           # Returns flipped surface.
```

```python
from pygame.draw import line, ...
line(<Surf>, color, (x1, y1), (x2, y2), width)  # Draws a line to the surface.
arc(<Surf>, color, <Rect>, from_rad, to_rad)    # Also: ellipse(<Surf>, color, <Rect>)
rect(<Surf>, color, <Rect>)                     # Also: polygon(<Surf>, color, points)
```

### Font
```python
<Font> = pg.font.SysFont('<name>', size)        # Loads the system font or default if missing.
<Font> = pg.font.Font('<path>', size)           # Loads the TTF file. Pass None for default.
<Surf> = <Font>.render(text, antialias, color)  # Background color can be specified at the end.
```

### Sound
```python
<Sound> = pg.mixer.Sound('<path>')              # Loads the WAV file.
<Sound>.play()                                  # Starts playing the sound.
```

### Basic Mario Brothers Example
```python
import collections, dataclasses, enum, io, itertools as it, pygame as pg, urllib.request
from random import randint

P = collections.namedtuple('P', 'x y')          # Position
D = enum.Enum('D', 'n e s w')                   # Direction
SIZE, MAX_SPEED = 50, P(5, 10)                  # Screen size, Speed limit

def main():
    def get_screen():
        pg.init()
        return pg.display.set_mode((SIZE*16, SIZE*16))
    def get_images():
        url = 'https://gto76.github.io/python-cheatsheet/web/mario_bros.png'
        img = pg.image.load(io.BytesIO(urllib.request.urlopen(url).read()))
        return [img.subsurface(get_rect(x, 0)) for x in range(img.get_width() // 16)]
    def get_mario():
        Mario = dataclasses.make_dataclass('Mario', 'rect spd facing_left frame_cycle'.split())
        return Mario(get_rect(1, 1), P(0, 0), False, it.cycle(range(3)))
    def get_tiles():
        positions = [p for p in it.product(range(SIZE), repeat=2) if {*p} & {0, SIZE-1}] + \
            [(randint(1, SIZE-2), randint(2, SIZE-2)) for _ in range(SIZE**2 // 10)]
        return [get_rect(*p) for p in positions]
    def get_rect(x, y):
        return pg.Rect(x*16, y*16, 16, 16)
    run(get_screen(), get_images(), get_mario(), get_tiles())

def run(screen, images, mario, tiles):
    clock = pg.time.Clock()
    while all(event.type != pg.QUIT for event in pg.event.get()):
        keys = {pg.K_UP: D.n, pg.K_RIGHT: D.e, pg.K_DOWN: D.s, pg.K_LEFT: D.w}
        pressed = {keys.get(ch) for ch, is_prsd in enumerate(pg.key.get_pressed()) if is_prsd}
        update_speed(mario, tiles, pressed)
        update_position(mario, tiles)
        draw(screen, images, mario, tiles, pressed)
        clock.tick(28)

def update_speed(mario, tiles, pressed):
    x, y = mario.spd
    x += 2 * ((D.e in pressed) - (D.w in pressed))
    x -= (x > 0) - (x < 0)
    y += 1 if D.s not in get_boundaries(mario.rect, tiles) else (D.n in pressed) * -10
    mario.spd = P(*[max(-limit, min(limit, s)) for limit, s in zip(MAX_SPEED, P(x, y))])

def update_position(mario, tiles):
    x, y = mario.rect.topleft
    n_steps = max(abs(s) for s in mario.spd)
    for _ in range(n_steps):
        mario.spd = stop_on_collision(mario.spd, get_boundaries(mario.rect, tiles))
        x, y = x + mario.spd.x / n_steps, y + mario.spd.y / n_steps
        mario.rect.topleft = x, y

def get_boundaries(rect, tiles):
    deltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)}
    return {d for d, delta in deltas.items() if rect.move(delta).collidelist(tiles) != -1}

def stop_on_collision(spd, bounds):
    return P(x=0 if (D.w in bounds and spd.x < 0) or (D.e in bounds and spd.x > 0) else spd.x,
             y=0 if (D.n in bounds and spd.y < 0) or (D.s in bounds and spd.y > 0) else spd.y)

def draw(screen, images, mario, tiles, pressed):
    def get_marios_image_index():
        if D.s not in get_boundaries(mario.rect, tiles):
            return 4
        return next(mario.frame_cycle) if {D.w, D.e} & pressed else 6
    screen.fill((85, 168, 255))
    mario.facing_left = (D.w in pressed) if {D.w, D.e} & pressed else mario.facing_left
    screen.blit(images[get_marios_image_index() + mario.facing_left * 9], mario.rect)
    for rect in tiles:
        screen.blit(images[18 if {*rect.topleft} & {0, (SIZE-1)*16} else 19], rect)
    pg.display.flip()

if __name__ == '__main__':
    main()
```


Pandas
------
```python
# $ pip3 install pandas
import pandas as pd
from pandas import Series, DataFrame
```

### Series
**Ordered dictionary with a name.**

```python
>>> Series([1, 2], index=['x', 'y'], name='a')
x    1
y    2
Name: a, dtype: int64
```

```python
<Sr> = Series(<list>)                         # Assigns RangeIndex starting at 0.
<Sr> = Series(<dict>)                         # Takes dictionary's keys for index.
<Sr> = Series(<dict/Series>, index=<list>)    # Only keeps items with keys specified in index.
```

```python
<el> = <Sr>.loc[key]                          # Or: <Sr>.iloc[index]
<Sr> = <Sr>.loc[keys]                         # Or: <Sr>.iloc[indexes]
<Sr> = <Sr>.loc[from_key : to_key_inclusive]  # Or: <Sr>.iloc[from_i : to_i_exclusive]
```

```python
<el> = <Sr>[key/index]                        # Or: <Sr>.key
<Sr> = <Sr>[keys/indexes]                     # Or: <Sr>[<key_range/range>]
<Sr> = <Sr>[bools]                            # Or: <Sr>.i/loc[bools]
```

```python
<Sr> = <Sr> ><== <el/Sr>                      # Returns a Series of bools.
<Sr> = <Sr> +-*/ <el/Sr>                      # Items with non-matching keys get value NaN.
```

```python
<Sr> = <Sr>.append(<Sr>)                      # Or: pd.concat(<coll_of_Sr>)
<Sr> = <Sr>.combine_first(<Sr>)               # Adds items that are not yet present.
<Sr>.update(<Sr>)                             # Updates items that are already present.
```

```python
<Sr>.plot.line/area/bar/pie/hist()            # Generates a Matplotlib plot.
matplotlib.pyplot.show()                      # Displays the plot. Also savefig(<path>).
```

#### Series — Aggregate, Transform, Map:
```python
<el> = <Sr>.sum/max/mean/idxmax/all()         # Or: <Sr>.agg(lambda <Sr>: <el>)
<Sr> = <Sr>.rank/diff/cumsum/ffill/interpl()  # Or: <Sr>.agg/transform(lambda <Sr>: <Sr>)
<Sr> = <Sr>.fillna(<el>)                      # Or: <Sr>.agg/transform/map(lambda <el>: <el>)
```

```python
>>> sr = Series([1, 2], index=['x', 'y'])
x    1
y    2
```

```text
+-----------------+-------------+-------------+---------------+
|                 |    'sum'    |   ['sum']   | {'s': 'sum'}  |
+-----------------+-------------+-------------+---------------+
| sr.apply(…)     |      3      |    sum  3   |     s  3      |
| sr.agg(…)       |             |             |               |
+-----------------+-------------+-------------+---------------+

+-----------------+-------------+-------------+---------------+
|                 |    'rank'   |   ['rank']  | {'r': 'rank'} |
+-----------------+-------------+-------------+---------------+
| sr.apply(…)     |             |      rank   |               |
| sr.agg(…)       |     x  1    |   x     1   |    r  x  1    |
| sr.transform(…) |     y  2    |   y     2   |       y  2    |
+-----------------+-------------+-------------+---------------+
```
* **Last result has a hierarchical index. Use `'<Sr>[key_1, key_2]'` to get its values.**

### DataFrame
**Table with labeled rows and columns.**

```python
>>> DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y'])
   x  y
a  1  2
b  3  4
```

```python
<DF>    = DataFrame(<list_of_rows>)           # Rows can be either lists, dicts or series.
<DF>    = DataFrame(<dict_of_columns>)        # Columns can be either lists, dicts or series.
```

```python
<el>    = <DF>.loc[row_key, column_key]       # Or: <DF>.iloc[row_index, column_index]
<Sr/DF> = <DF>.loc[row_key/s]                 # Or: <DF>.iloc[row_index/es]
<Sr/DF> = <DF>.loc[:, column_key/s]           # Or: <DF>.iloc[:, column_index/es]
<DF>    = <DF>.loc[row_bools, column_bools]   # Or: <DF>.iloc[row_bools, column_bools]
```

```python
<Sr/DF> = <DF>[column_key/s]                  # Or: <DF>.column_key
<DF>    = <DF>[row_bools]                     # Keeps rows as specified by bools.
<DF>    = <DF>[<DF_of_bools>]                 # Assigns NaN to False values.
```

```python
<DF>    = <DF> ><== <el/Sr/DF>                # Returns DF of bools. Sr is treated as a row.
<DF>    = <DF> +-*/ <el/Sr/DF>                # Items with non-matching keys get value NaN.
```

```python
<DF>    = <DF>.set_index(column_key)          # Replaces row keys with values from a column.
<DF>    = <DF>.reset_index()                  # Moves row keys to a column named index.
<DF>    = <DF>.sort_index(ascending=True)     # Sorts rows by row keys.
<DF>    = <DF>.sort_values(column_key/s)      # Sorts rows by the passed column/s.
```

#### DataFrame — Merge, Join, Concat:
```python
>>> l = DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y'])
   x  y
a  1  2
b  3  4
>>> r = DataFrame([[4, 5], [6, 7]], index=['b', 'c'], columns=['y', 'z'])
   y  z
b  4  5
c  6  7
```

```text
+------------------------+---------------+------------+------------+--------------------------+
|                        |    'outer'    |   'inner'  |   'left'   |       Description        |
+------------------------+---------------+------------+------------+--------------------------+
| l.merge(r, on='y',     |    x   y   z  | x   y   z  | x   y   z  | Joins/merges on column.  |
|            how=…)      | 0  1   2   .  | 3   4   5  | 1   2   .  | Also accepts left_on and |
|                        | 1  3   4   5  |            | 3   4   5  | right_on parameters.     |
|                        | 2  .   6   7  |            |            | Uses 'inner' by default. |
+------------------------+---------------+------------+------------+--------------------------+
| l.join(r, lsuffix='l', |    x yl yr  z |            | x yl yr  z | Joins/merges on row keys.|
|           rsuffix='r', | a  1  2  .  . | x yl yr  z | 1  2  .  . | Uses 'left' by default.  |
|           how=…)       | b  3  4  4  5 | 3  4  4  5 | 3  4  4  5 | If r is a series, it is  |
|                        | c  .  .  6  7 |            |            | treated as a column.     |
+------------------------+---------------+------------+------------+--------------------------+
| pd.concat([l, r],      |    x   y   z  |     y      |            | Adds rows at the bottom. |
|           axis=0,      | a  1   2   .  |     2      |            | Uses 'outer' by default. |
|           join=…)      | b  3   4   .  |     4      |            | A series is treated as a |
|                        | b  .   4   5  |     4      |            | column. Use l.append(sr) |
|                        | c  .   6   7  |     6      |            | to add a row instead.    |
+------------------------+---------------+------------+------------+--------------------------+
| pd.concat([l, r],      |    x  y  y  z |            |            | Adds columns at the      |
|           axis=1,      | a  1  2  .  . | x  y  y  z |            | right end. Uses 'outer'  |
|           join=…)      | b  3  4  4  5 | 3  4  4  5 |            | by default. A series is  |
|                        | c  .  .  6  7 |            |            | treated as a column.     |
+------------------------+---------------+------------+------------+--------------------------+
| l.combine_first(r)     |    x   y   z  |            |            | Adds missing rows and    |
|                        | a  1   2   .  |            |            | columns. Also updates    |
|                        | b  3   4   5  |            |            | items that contain NaN.  |
|                        | c  .   6   7  |            |            | R must be a DataFrame.   |
+------------------------+---------------+------------+------------+--------------------------+
```

#### DataFrame — Aggregate, Transform, Map:
```python
<Sr> = <DF>.sum/max/mean/idxmax/all()         # Or: <DF>.apply/agg(lambda <Sr>: <el>)
<DF> = <DF>.rank/diff/cumsum/ffill/interpl()  # Or: <DF>.apply/agg/transform(lambda <Sr>: <Sr>)
<DF> = <DF>.fillna(<el>)                      # Or: <DF>.applymap(lambda <el>: <el>)
```
* **All operations operate on columns by default. Pass `'axis=1'` to process the rows instead.**

```python
>>> df = DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y'])
   x  y
a  1  2
b  3  4
```

```text
+-----------------+-------------+-------------+---------------+
|                 |    'sum'    |   ['sum']   | {'x': 'sum'}  |
+-----------------+-------------+-------------+---------------+
| df.apply(…)     |             |       x  y  |               |
| df.agg(…)       |     x  4    |  sum  4  6  |     x  4      |
|                 |     y  6    |             |               |
+-----------------+-------------+-------------+---------------+

+-----------------+-------------+-------------+---------------+
|                 |    'rank'   |   ['rank']  | {'x': 'rank'} |
+-----------------+-------------+-------------+---------------+
| df.apply(…)     |      x  y   |      x    y |        x      |
| df.agg(…)       |   a  1  1   |   rank rank |     a  1      |
| df.transform(…) |   b  2  2   | a    1    1 |     b  2      |
|                 |             | b    2    2 |               |
+-----------------+-------------+-------------+---------------+
```
* **Use `'<DF>[col_key_1, col_key_2][row_key]'` to get the fifth result's values.**

#### DataFrame — Plot, Encode, Decode:
```python
import matplotlib.pyplot as plt
<DF>.plot.line/bar/hist/scatter([x=column_key, y=column_key/s]); plt.show()
```

```python
<DF> = pd.read_json/html('<str/path/url>')
<DF> = pd.read_csv/pickle/excel('<path/url>')
<DF> = pd.read_sql('<table_name/query>', <connection>)
<DF> = pd.read_clipboard()
```

```python
<dict> = <DF>.to_dict(['d/l/s/sp/r/i'])
<str>  = <DF>.to_json/html/csv/markdown/latex([<path>])
<DF>.to_pickle/excel(<path>)
<DF>.to_sql('<table_name>', <connection>)
```

### GroupBy
**Object that groups together rows of a dataframe based on the value of the passed column.**

```python
>>> df = DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 6]], index=list('abc'), columns=list('xyz'))
>>> df.groupby('z').get_group(6)
   x  y
b  4  5
c  7  8
```

```python
<GB> = <DF>.groupby(column_key/s)             # DF is split into groups based on passed column.
<DF> = <GB>.apply(<func>)                     # Maps each group. Func can return DF, Sr or el.
<GB> = <GB>[column_key]                       # A single column GB. All operations return a Sr.
```

#### GroupBy — Aggregate, Transform, Map:
```python
<DF> = <GB>.sum/max/mean/idxmax/all()         # Or: <GB>.agg(lambda <Sr>: <el>)
<DF> = <GB>.rank/diff/cumsum/ffill()          # Or: <GB>.transform(lambda <Sr>: <Sr>)
<DF> = <GB>.fillna(<el>)                      # Or: <GB>.transform(lambda <Sr>: <Sr>)
```

```python
>>> gb = df.groupby('z')
      x  y  z
3: a  1  2  3
6: b  4  5  6
   c  7  8  6
```

```text
+-----------------+-------------+-------------+-------------+---------------+
|                 |    'sum'    |    'rank'   |   ['rank']  | {'x': 'rank'} |
+-----------------+-------------+-------------+-------------+---------------+
| gb.agg(…)       |      x   y  |      x  y   |      x    y |        x      |
|                 |  z          |   a  1  1   |   rank rank |     a  1      |
|                 |  3   1   2  |   b  1  1   | a    1    1 |     b  1      |
|                 |  6  11  13  |   c  2  2   | b    1    1 |     c  2      |
|                 |             |             | c    2    2 |               |
+-----------------+-------------+-------------+-------------+---------------+
| gb.transform(…) |      x   y  |      x  y   |             |               |
|                 |  a   1   2  |   a  1  1   |             |               |
|                 |  b  11  13  |   b  1  1   |             |               |
|                 |  c  11  13  |   c  2  2   |             |               |
+-----------------+-------------+-------------+-------------+---------------+
```

### Rolling
**Object for rolling window calculations.**

```python
<R_Sr/R_DF/R_GB> = <Sr/DF/GB>.rolling(window_size)  # Also: `min_periods=None, center=False`.
<R_Sr/R_DF>      = <R_DF/R_GB>[column_key/s]        # Or: <R>.column_key
<Sr/DF/DF>       = <R_Sr/R_DF/R_GB>.sum/max/mean()  # Or: <R>.apply/agg(<agg_func/str>)
```


Plotly
------
```python
# $ pip3 install plotly kaleido
from plotly.express import line
<Figure> = line(<DF>, x=<col_name>, y=<col_name>)        # Or: line(x=<list>, y=<list>)
<Figure>.update_layout(margin=dict(t=0, r=0, b=0, l=0))  # Or: paper_bgcolor='rgba(0, 0, 0, 0)'
<Figure>.write_html/json/image('<path>')                 # Also: <Figure>.show()
```

#### Covid deaths by continent:

![Covid Deaths](web/covid_deaths.png)
<div id="2a950764-39fc-416d-97fe-0a6226a3095f" class="plotly-graph-div" style="height:340px; width:100%;"></div>

```python
covid = pd.read_csv('https://covid.ourworldindata.org/data/owid-covid-data.csv',
                    usecols=['iso_code', 'date', 'total_deaths', 'population'])
continents = pd.read_csv('https://gist.githubusercontent.com/stevewithington/20a69c0b6d2ff'
                         '846ea5d35e5fc47f26c/raw/country-and-continent-codes-list-csv.csv',
                         usecols=['Three_Letter_Country_Code', 'Continent_Name'])
df = pd.merge(covid, continents, left_on='iso_code', right_on='Three_Letter_Country_Code')
df = df.groupby(['Continent_Name', 'date']).sum().reset_index()
df['Total Deaths per Million'] = df.total_deaths * 1e6 / df.population
df = df[df.date > '2020-03-14']
df = df.rename({'date': 'Date', 'Continent_Name': 'Continent'}, axis='columns')
line(df, x='Date', y='Total Deaths per Million', color='Continent').show()
```

#### Confirmed covid cases, Dow Jones, Gold, and Bitcoin price:

![Covid Cases](web/covid_cases.png)
<div id="e23ccacc-a456-478b-b467-7282a2165921" class="plotly-graph-div" style="height:315px; width:100%;"></div>

```python
import pandas as pd
import plotly.graph_objects as go

def main():
    display_data(wrangle_data(*scrape_data()))

def scrape_data():
    def scrape_covid():
        url = 'https://covid.ourworldindata.org/data/owid-covid-data.csv'
        df = pd.read_csv(url, usecols=['location', 'date', 'total_cases'])
        return df[df.location == 'World'].set_index('date').total_cases
    def scrape_yahoo(slug):
        url = f'https://query1.finance.yahoo.com/v7/finance/download/{slug}' + \
              '?period1=1579651200&period2=9999999999&interval=1d&events=history'
        df = pd.read_csv(url, usecols=['Date', 'Close'])
        return df.set_index('Date').Close
    out = scrape_covid(), scrape_yahoo('BTC-USD'), scrape_yahoo('GC=F'), scrape_yahoo('^DJI')
    return map(pd.Series.rename, out, ['Total Cases', 'Bitcoin', 'Gold', 'Dow Jones'])

def wrangle_data(covid, bitcoin, gold, dow):
    df = pd.concat([bitcoin, gold, dow], axis=1)  # Joins columns on dates.
    df = df.sort_index().interpolate()            # Sorts by date and interpolates NaN-s.
    df = df.loc['2020-02-23':]                    # Discards rows before '2020-02-23'.
    df = (df / df.iloc[0]) * 100                  # Calculates percentages relative to day 1.
    df = df.join(covid)                           # Adds column with covid cases.
    return df.sort_values(df.index[-1], axis=1)   # Sorts columns by last day's value.

def display_data(df):
    figure = go.Figure()
    for col_name in reversed(df.columns):
        yaxis = 'y1' if col_name == 'Total Cases' else 'y2'
        trace = go.Scatter(x=df.index, y=df[col_name], name=col_name, yaxis=yaxis)
        figure.add_trace(trace)
    figure.update_layout(
        yaxis1=dict(title='Total Cases', rangemode='tozero'),
        yaxis2=dict(title='%', rangemode='tozero', overlaying='y', side='right'),
        legend=dict(x=1.1),
        height=450
    ).show()

if __name__ == '__main__':
    main()
```


PySimpleGUI
-----------
```python
# $ pip3 install PySimpleGUI
import PySimpleGUI as sg
layout = [[sg.Text("What's your name?")], [sg.Input()], [sg.Button('Ok')]]
window = sg.Window('Window Title', layout)
event, values = window.read()
print(f'Hello {values[0]}!' if event == 'Ok' else '')
```


Appendix
--------
### Cython
**Library that compiles Python code into C.**

```python
# $ pip3 install cython
import pyximport; pyximport.install()
import <cython_script>
<cython_script>.main()
```

#### Definitions:
* **All `'cdef'` definitions are optional, but they contribute to the speed-up.**
* **Script needs to be saved with a `'pyx'` extension.**

```python
cdef <ctype> <var_name> = <el>
cdef <ctype>[n_elements] <var_name> = [<el_1>, <el_2>, ...]
cdef <ctype/void> <func_name>(<ctype> <arg_name_1>, ...):
```

```python
cdef class <class_name>:
    cdef public <ctype> <attr_name>
    def __init__(self, <ctype> <arg_name>):
        self.<attr_name> = <arg_name>
```

```python
cdef enum <enum_name>: <member_name_1>, <member_name_2>, ...
```

### PyInstaller
```bash
$ pip3 install pyinstaller
$ pyinstaller script.py                        # Compiles into './dist/script' directory.
$ pyinstaller script.py --onefile              # Compiles into './dist/script' console app.
$ pyinstaller script.py --windowed             # Compiles into './dist/script' windowed app.
$ pyinstaller script.py --add-data '<path>:.'  # Adds file to the root of the executable.
```
* **File paths need to be updated to `'os.path.join(sys._MEIPASS, <path>)'`.**

### Basic Script Template
```python
#!/usr/bin/env python3
#
# Usage: .py
#

from sys import argv, exit
from collections import defaultdict, namedtuple
from dataclasses import make_dataclass
from enum import Enum
import functools as ft, itertools as it, operator as op, re


def main():
    pass


###
##  UTIL
#

def read_file(filename):
    with open(filename, encoding='utf-8') as file:
        return file.readlines()


if __name__ == '__main__':
    main()
```


Index
-----
* **Only available in the [PDF](https://transactions.sendowl.com/products/78175486/4422834F/view).**
* **Ctrl+F / ⌘F is usually sufficient.**
* **Searching `'#<title>'` on the [webpage](https://gto76.github.io/python-cheatsheet/) will limit the search to the titles.**



File: 919_MARIAMANOJE_PYTHON-TEST.txt
Full Name: MARIAMANOJE/PYTHON-TEST
Description: None
created_at: 2022-04-02T12:28:22Z
updated_at: 2022-04-02T12:29:29Z
pushed_at: 2022-04-02T12:29:26Z
Language: Python
URL: https://github.com/MARIAMANOJE/PYTHON-TEST
Forks: 0
Stars: 0
Topics: 
README:



File: 91_AndrewSmith235_Linux-PythonScripts.txt
Full Name: AndrewSmith235/Linux-PythonScripts
Description: None
created_at: 2022-02-25T21:59:26Z
updated_at: 2022-02-25T22:02:10Z
pushed_at: 2022-02-25T22:12:37Z
Language: Python
URL: https://github.com/AndrewSmith235/Linux-PythonScripts
Forks: 0
Stars: 0
Topics: 
README:



File: 921_andymc147_selenium-python-framework.txt
Full Name: andymc147/selenium-python-framework
Description: None
created_at: 2021-11-01T19:26:01Z
updated_at: 2021-11-01T21:00:55Z
pushed_at: 2021-11-01T21:00:52Z
Language: Python
URL: https://github.com/andymc147/selenium-python-framework
Forks: 0
Stars: 0
Topics: 
README:



File: 924_Balthazaar_python-react-test.txt
Full Name: Balthazaar/python-react-test
Description: None
created_at: 2021-04-08T10:07:51Z
updated_at: 2021-04-08T19:44:16Z
pushed_at: 2021-04-08T19:44:14Z
Language: JavaScript
URL: https://github.com/Balthazaar/python-react-test
Forks: 0
Stars: 0
Topics: 
README:
# How to run


First build a docker image from root folder with 

```
docker-compose build
```

Mount and run backend and mongo container with

```
docker-compose up -d
```
Flask API is going to be accessible on on http://localhost:5000


Go into search-front-end folder and from there we are going to build the docker container for the front end app

```
docker build -t search-front-end/react-app .
```


```
docker run -d -it  -p 80:80/tcp --name react-app search-front-end/react-app:latest
```

This is going to run the react app on port 80 and should be accessbile on http://localhost


Running app from console

```
python searcher-cli.py -q "once upon a time in america"
```




File: 926_Ethan-Gravelle_ICS3U-Unit4-03-Python-Power-Two.txt
Full Name: Ethan-Gravelle/ICS3U-Unit4-03-Python-Power-Two
Description: None
created_at: 2021-05-15T20:34:32Z
updated_at: 2021-05-16T02:35:07Z
pushed_at: 2021-05-16T02:35:05Z
Language: Python
URL: https://github.com/Ethan-Gravelle/ICS3U-Unit4-03-Python-Power-Two
Forks: 0
Stars: 0
Topics: 
README:
# ICS3U-Unit4-03-Python-Power-Two


File: 927_NastijaSk_base_python.txt
Full Name: NastijaSk/base_python
Description: None
created_at: 2019-09-10T20:25:13Z
updated_at: 2019-11-12T17:28:59Z
pushed_at: 2019-11-12T17:28:57Z
Language: Python
URL: https://github.com/NastijaSk/base_python
Forks: 0
Stars: 0
Topics: 
README:
# base_python


File: 928_sid619sid_pythontryy.txt
Full Name: sid619sid/pythontryy
Description: None
created_at: 2018-08-14T05:17:33Z
updated_at: 2018-08-14T05:17:47Z
pushed_at: 2018-08-14T05:17:44Z
Language: Python
URL: https://github.com/sid619sid/pythontryy
Forks: 0
Stars: 0
Topics: 
README:
# Dialogflow - sample webhook implementation in Python

This is a really simple webhook implementation that gets Dialogflow classification JSON (i.e. a JSON output of Dialogflow /query endpoint) and returns a fulfillment response.

More info about Dialogflow webhooks could be found here:
[Dialogflow Webhook](https://dialogflow.com/docs/fulfillment)

# Deploy to:
[![Deploy to Heroku](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)

# What does the service do?
It's a weather information fulfillment service that uses [Yahoo! Weather API](https://developer.yahoo.com/weather/).
The services takes the `geo-city` parameter from the action, performs geolocation for the city and requests weather information from Yahoo! Weather public API.

The service packs the result in the Dialogflow webhook-compatible response JSON and returns it to Dialogflow.



File: 92_Robikar_PYTHONLEARN.txt
Full Name: Robikar/PYTHONLEARN
Description: None
created_at: 2021-07-14T15:24:37Z
updated_at: 2021-07-14T18:13:53Z
pushed_at: 2021-07-14T18:13:50Z
Language: None
URL: https://github.com/Robikar/PYTHONLEARN
Forks: 0
Stars: 0
Topics: 
README:



File: 934_youngjaeweb_PythonBooksEx.txt
Full Name: youngjaeweb/PythonBooksEx
Description: None
created_at: 2016-08-20T11:42:37Z
updated_at: 2016-08-20T11:46:16Z
pushed_at: 2016-10-20T06:01:48Z
Language: Python
URL: https://github.com/youngjaeweb/PythonBooksEx
Forks: 0
Stars: 0
Topics: 
README:



File: 935_vishwasmittal_python-workflow-test.txt
Full Name: vishwasmittal/python-workflow-test
Description: None
created_at: 2018-06-20T05:29:19Z
updated_at: 2023-10-09T10:10:14Z
pushed_at: 2018-06-20T05:47:54Z
Language: Python
URL: https://github.com/vishwasmittal/python-workflow-test
Forks: 0
Stars: 0
Topics: 
README:
# Airflow Data Processing Pipeline

Following are the instructions for the installation and usage for Airflow
workflow management system for processing the huge amount of data using
Celery Executor on newly created Google compute clouds and then terminating
those clouds after the work is complete.

## Architecture

This system consists of various components:

1. Scheduler: For scheduling the work on the workers
2. Webserver: For serving the elegant Airflow UI for monitoring the tasks
3. Borker Queue: This facilitates the communication between Scheduler and
the workers. We will RabbitMQ
4. Backend Database: For storing the information related to working of
Airflow like DAGs, DAG Runs, XCOMs etc. PostgreSQL is used here


Since this is an internal system that is not expected to receive a lot of
incoming web traffic. So we can setup the Scheduler, Webserver, Broker and
the backend database on the same machine.

As for the workers, these can be created and terminated according to the
need on any good cloud service provider. We are going to use the one by Google.


## Setting up

### Installing Broker and Backend
On your server, install RabbitMQ and PostgreSQL database. Make the users/roles
with read and write privileges and obtain the access endpoints. Many Good tutorials
can be found out on web related to it.

NOTE: Make sure that both of these endpoints are publicly visible. You can
also setup these components separately. Like using already available services
from any cloud providers like AWS Postgres RDS and SQS (Simple Queuing Service).

### Installing airflow on the server
Next, run the script named named as airflow_server.sh on your server. This
will install the airflow on the computer and will Initiate the local Database
(SQLite).

### Configuring the Airflow for server
Go through the config file, read the description of all the configs defined there
this will, already, give you a pretty fair idea what is needed to be changed to
make it work.

Required changes:

1. Change the `executor` to `CeleryExecutor`
2. Find `sql_alchemy_conn` and replace its value with the PostgreSQL DB endpoint you obtained earlier
3. Do the same for `celery_result_backend` i.e. set its value to the PostgreSQL DB endpoint
4. Change the value of `broker_url` config to the RabbitMQ endpoint you already obtained.
5. (Specific to the task we designed our system for) Set the value of `celeryd_concurrency` to `1`.
This will help enable our workers to focus on a single task.

### Unleashing the beast
After completing all the work, its time to run our flexible, heavy duty system.
Fire up 3 terminals and start and run the following commands:
```
$ airflow scheduler
$ airflow webserver
$ airflow worker
```

Now you can see [Airflow UI](http://localhost:8080) running on localhost port 8080.

And your scheduler is ready to rumble.

### Hiring the workers
Using this project, you are all set to create some heavy duty, obeying workers
and terminate them after they complete their work and save the result on the cloud.

This project itself includes all the required processes, functions and the shell scripts
required to setup those worker instances, assign work to them and then terminate them.




File: 936_gtdoubledouble_python-proxy.txt
Full Name: gtdoubledouble/python-proxy
Description: None
created_at: 2014-07-29T10:30:08Z
updated_at: 2014-07-29T10:31:04Z
pushed_at: 2014-07-29T10:36:47Z
Language: Python
URL: https://github.com/gtdoubledouble/python-proxy
Forks: 1
Stars: 0
Topics: 
README:
Python Proxy
============

A proxy built from Python sockets
Takes care of both normal and chunked transfers
Works on most sites, but not on YouTube.



File: 937_cwinsor_python_vanilla.txt
Full Name: cwinsor/python_vanilla
Description: None
created_at: 2021-04-29T01:06:13Z
updated_at: 2021-04-29T01:06:16Z
pushed_at: 2021-04-29T01:06:13Z
Language: None
URL: https://github.com/cwinsor/python_vanilla
Forks: 0
Stars: 0
Topics: 
README:
# python_vanilla


File: 939_assyrian7_PythonWebsiteScanner.txt
Full Name: assyrian7/PythonWebsiteScanner
Description: None
created_at: 2015-12-16T05:25:37Z
updated_at: 2016-10-08T11:23:49Z
pushed_at: 2015-12-17T07:31:15Z
Language: Python
URL: https://github.com/assyrian7/PythonWebsiteScanner
Forks: 1
Stars: 1
Topics: 
README:
This repository contains python code for scanning websites and storing 
that data. 



File: 942_ShubhamPal19_Python-projects.txt
Full Name: ShubhamPal19/Python-projects
Description: None
created_at: 2021-02-14T02:02:34Z
updated_at: 2021-09-15T18:30:02Z
pushed_at: 2021-09-15T18:29:59Z
Language: Jupyter Notebook
URL: https://github.com/ShubhamPal19/Python-projects
Forks: 0
Stars: 0
Topics: 
README:
# Python-projects

This repository was created for python programs.



File: 943_sets99_Python.txt
Full Name: sets99/Python
Description: None
created_at: 2020-06-17T23:13:36Z
updated_at: 2022-02-26T03:58:11Z
pushed_at: 2023-03-24T02:11:03Z
Language: Python
URL: https://github.com/sets99/Python
Forks: 0
Stars: 1
Topics: 
README:
Hello! This is my Python repo. 



File: 944_ZV8_GB-Client-server-applications-in-Python.txt
Full Name: ZV8/GB-Client-server-applications-in-Python
Description: None
created_at: 2021-08-26T19:54:47Z
updated_at: 2021-09-02T21:00:14Z
pushed_at: 2021-09-02T21:00:11Z
Language: Python
URL: https://github.com/ZV8/GB-Client-server-applications-in-Python
Forks: 0
Stars: 0
Topics: 
README:
# GB-Client-server-applications-in-Python


File: 945_Mauluddin92_my-first-python-code.txt
Full Name: Mauluddin92/my-first-python-code
Description: None
created_at: 2022-08-28T04:10:12Z
updated_at: 2022-08-28T04:10:12Z
pushed_at: 2022-08-29T08:04:13Z
Language: None
URL: https://github.com/Mauluddin92/my-first-python-code
Forks: 0
Stars: 0
Topics: 
README:
# my-first-python-code
ini adalah projeck pertama saya dengan python



File: 947_tahirbaboci_jenkins-python.txt
Full Name: tahirbaboci/jenkins-python
Description: None
created_at: 2018-04-08T13:37:46Z
updated_at: 2021-09-29T20:40:05Z
pushed_at: 2018-04-08T15:00:45Z
Language: Python
URL: https://github.com/tahirbaboci/jenkins-python
Forks: 0
Stars: 1
Topics: 
README:
This is a Jenkins Python Script which prints items(Jobs)



File: 94_guilhermegandolfi_jenkins-example-scripts-python.txt
Full Name: guilhermegandolfi/jenkins-example-scripts-python
Description: None
created_at: 2022-08-20T01:32:46Z
updated_at: 2022-10-01T19:12:06Z
pushed_at: 2022-10-01T19:03:12Z
Language: Dockerfile
URL: https://github.com/guilhermegandolfi/jenkins-example-scripts-python
Forks: 0
Stars: 0
Topics: 
README:



File: 950_sorwarduet_host-pythonanywhere.txt
Full Name: sorwarduet/host-pythonanywhere
Description: None
created_at: 2020-12-02T14:28:08Z
updated_at: 2020-12-02T14:56:45Z
pushed_at: 2020-12-02T14:56:42Z
Language: None
URL: https://github.com/sorwarduet/host-pythonanywhere
Forks: 0
Stars: 0
Topics: 
README:
## How Django project host python anywhere

Step 1:
Create account https://www.pythonanywhere.com/.

Step 2.
Two way host django projects
    a) Upload using sip file
    b) Using github or gitlab




File: 953_OscarLlamas6_etl-python-datawarehouse.txt
Full Name: OscarLlamas6/etl-python-datawarehouse
Description: None
created_at: 2022-06-15T23:46:27Z
updated_at: 2022-07-05T01:22:05Z
pushed_at: 2022-06-23T18:22:13Z
Language: Python
URL: https://github.com/OscarLlamas6/etl-python-datawarehouse
Forks: 0
Stars: 0
Topics: 
README:
# etl-python-datawarehouse

## [Documentacion de Proyecto - Link de Documento de Drive](https://docs.google.com/document/d/1NCGPKJ4duvXXppY7OLyMq5w9h2Nqw_NsidyJITqOILI/edit?usp=sharing)



File: 954_5-YE04_python-snake-game-.txt
Full Name: 5-YE04/python-snake-game-
Description: None
created_at: 2022-02-14T18:32:24Z
updated_at: 2022-02-14T21:17:00Z
pushed_at: 2022-02-14T18:33:51Z
Language: Python
URL: https://github.com/5-YE04/python-snake-game-
Forks: 0
Stars: 0
Topics: 
README:
# python-snake-game-


File: 95_RBrignoli_Testes-python.txt
Full Name: RBrignoli/Testes-python
Description: None
created_at: 2020-09-01T14:47:47Z
updated_at: 2020-09-03T17:26:06Z
pushed_at: 2020-10-15T13:50:24Z
Language: Python
URL: https://github.com/RBrignoli/Testes-python
Forks: 0
Stars: 0
Topics: 
README:



File: 98_dulatio_python_team.txt
Full Name: dulatio/python_team
Description: None
created_at: 2023-01-28T08:40:52Z
updated_at: 2023-01-28T08:40:52Z
pushed_at: 2023-01-28T09:14:28Z
Language: None
URL: https://github.com/dulatio/python_team
Forks: 0
Stars: 0
Topics: 
README:



File: 99_komalchavan1418_simple-linear-regression-using-python.txt
Full Name: komalchavan1418/simple-linear-regression-using-python
Description: None
created_at: 2021-12-03T11:28:59Z
updated_at: 2021-12-03T11:29:52Z
pushed_at: 2021-12-03T11:29:50Z
Language: Jupyter Notebook
URL: https://github.com/komalchavan1418/simple-linear-regression-using-python
Forks: 0
Stars: 0
Topics: 
README:



